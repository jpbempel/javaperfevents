/*
 * Copyright 2019 Jean-Philippe Bempel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Jaketown implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Jaketown());
    }

    {
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x11", "MEM_UOPS_RETIRED.STLB_MISS_LOADS", "100003", "Retired load uops that miss the STLB.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_STORES", new PMUEvent(null, "0xD0", "0,1,2,3", "0x12", "MEM_UOPS_RETIRED.STLB_MISS_STORES", "100003", "Retired store uops that miss the STLB.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.LOCK_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x21", "MEM_UOPS_RETIRED.LOCK_LOADS", "100007", "Retired load uops with locked access.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_LOADS", new PMUEvent("This event counts line-splitted load uops retired to the architected path. A line split is across 64B cache-line which includes a page split (4K).", "0xD0", "0,1,2,3", "0x41", "MEM_UOPS_RETIRED.SPLIT_LOADS", "100003", "Retired load uops that split across a cacheline boundary.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_STORES", new PMUEvent("This event counts line-splitted store uops retired to the architected path. A line split is across 64B cache-line which includes a page split (4K).", "0xD0", "0,1,2,3", "0x42", "MEM_UOPS_RETIRED.SPLIT_STORES", "100003", "Retired store uops that split across a cacheline boundary.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_LOADS", new PMUEvent("This event counts the number of load uops retired", "0xD0", "0,1,2,3", "0x81", "MEM_UOPS_RETIRED.ALL_LOADS", "2000003", "All retired load uops.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_STORES", new PMUEvent("This event counts the number of store uops retired.", "0xD0", "0,1,2,3", "0x82", "MEM_UOPS_RETIRED.ALL_STORES", "2000003", "All retired store uops.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_HIT", new PMUEvent(null, "0xD1", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_RETIRED.L1_HIT", "2000003", "Retired load uops with L1 cache hits as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_HIT", new PMUEvent(null, "0xD1", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_RETIRED.L2_HIT", "100003", "Retired load uops with L2 cache hits as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.LLC_HIT", new PMUEvent("This event counts retired load uops that hit in the last-level (L3) cache without snoops required.", "0xD1", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_RETIRED.LLC_HIT", "50021", "Retired load uops which data sources were data hits in LLC without snoops required.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.LLC_MISS", new PMUEvent(null, "0xD1", "0,1,2,3", "0x20", "MEM_LOAD_UOPS_RETIRED.LLC_MISS", "100007", "Miss in last-level (L3) cache. Excludes Unknown data-source.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.HIT_LFB", new PMUEvent(null, "0xD1", "0,1,2,3", "0x40", "MEM_LOAD_UOPS_RETIRED.HIT_LFB", "100003", "Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS", new PMUEvent(null, "0xD2", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS", "20011", "Retired load uops which data sources were LLC hit and cross-core snoop missed in on-pkg core cache.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT", new PMUEvent("This event counts retired load uops that hit in the last-level cache (L3) and were found in a non-modified state in a neighboring core's private cache (same package).  Since the last level cache is inclusive, hits to the L3 may require snooping the private L2 caches of any cores on the same socket that have the line.  In this case, a snoop was required, and another L2 had the line in a non-modified state.", "0xD2", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT", "20011", "Retired load uops which data sources were LLC and cross-core snoop hits in on-pkg core cache.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM", new PMUEvent("This event counts retired load uops that hit in the last-level cache (L3) and were found in a non-modified state in a neighboring core's private cache (same package).  Since the last level cache is inclusive, hits to the L3 may require snooping the private L2 caches of any cores on the same socket that have the line.  In this case, a snoop was required, and another L2 had the line in a modified state, so the line had to be invalidated in that L2 cache and transferred to the requesting L2.", "0xD2", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM", "20011", "Retired load uops which data sources were HitM responses from shared LLC.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE", new PMUEvent(null, "0xD2", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE", "100003", "Retired load uops which data sources were hits in LLC without snoops required.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM", "100007", "Data from local DRAM either Snoop not needed or Snoop Miss (RspI)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_DRAM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_DRAM", "100007", "Data from remote DRAM either Snoop not needed or Snoop Miss (RspI)", "0,1,2,3"));
		eventMap.put("L1D.REPLACEMENT", new PMUEvent("This event counts L1D data line replacements.  Replacements occur when a new line is brought into the cache, causing eviction of a line loaded earlier.  ", "0x51", "0,1,2,3", "0x1", "L1D.REPLACEMENT", "2000003", "L1D data line replacements.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D.ALLOCATED_IN_M", new PMUEvent(null, "0x51", "0,1,2,3", "0x2", "L1D.ALLOCATED_IN_M", "2000003", "Allocated L1D data cache lines in M state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D.EVICTION", new PMUEvent(null, "0x51", "0,1,2,3", "0x4", "L1D.EVICTION", "2000003", "L1D data cache lines in M state evicted due to replacement.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D.ALL_M_REPLACEMENT", new PMUEvent(null, "0x51", "0,1,2,3", "0x8", "L1D.ALL_M_REPLACEMENT", "2000003", "Cache lines in M state evicted out of L1D due to Snoop HitM or dirty line replacement.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING", new PMUEvent(null, "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING", "2000003", "L1D miss oustandings duration in cycles.", "2"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES", new PMUEvent(null, "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES", "2000003", "Cycles with L1D load Misses outstanding.", "2"));
		eventMap.put("LOCK_CYCLES.CACHE_LOCK_DURATION", new PMUEvent(null, "0x63", "0,1,2,3", "0x2", "LOCK_CYCLES.CACHE_LOCK_DURATION", "2000003", "Cycles when L1D is locked.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", "2000003", "Offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", "2000003", "Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", new PMUEvent(null, "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", "2000003", "Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", "2000003", "Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", "2000003", "Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_DATA_RD", new PMUEvent(null, "0xB0", "0,1,2,3", "0x1", "OFFCORE_REQUESTS.DEMAND_DATA_RD", "100003", "Demand Data Read requests sent to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_CODE_RD", new PMUEvent(null, "0xB0", "0,1,2,3", "0x2", "OFFCORE_REQUESTS.DEMAND_CODE_RD", "100003", "Cacheable and noncachaeble code read requests.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_RFO", new PMUEvent(null, "0xB0", "0,1,2,3", "0x4", "OFFCORE_REQUESTS.DEMAND_RFO", "100003", "Demand RFO requests including regular RFOs, locks, ItoM.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.ALL_DATA_RD", new PMUEvent(null, "0xB0", "0,1,2,3", "0x8", "OFFCORE_REQUESTS.ALL_DATA_RD", "100003", "Demand and prefetch data reads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_BUFFER.SQ_FULL", new PMUEvent(null, "0xB2", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_BUFFER.SQ_FULL", "2000003", "Cases when offcore requests buffer cannot take more entries for core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x1", "L2_RQSTS.DEMAND_DATA_RD_HIT", "200003", "Demand Data Read requests that hit L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x4", "L2_RQSTS.RFO_HIT", "200003", "RFO requests that hit L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x8", "L2_RQSTS.RFO_MISS", "200003", "RFO requests that miss L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x10", "L2_RQSTS.CODE_RD_HIT", "200003", "L2 cache hits when fetching instructions, code reads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x20", "L2_RQSTS.CODE_RD_MISS", "200003", "L2 cache misses when fetching instructions.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.PF_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x40", "L2_RQSTS.PF_HIT", "200003", "Requests from the L2 hardware prefetchers that hit L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.PF_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x80", "L2_RQSTS.PF_MISS", "200003", "Requests from the L2 hardware prefetchers that miss L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_STORE_LOCK_RQSTS.MISS", new PMUEvent(null, "0x27", "0,1,2,3", "0x1", "L2_STORE_LOCK_RQSTS.MISS", "200003", "RFOs that miss cache lines.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_STORE_LOCK_RQSTS.HIT_E", new PMUEvent(null, "0x27", "0,1,2,3", "0x4", "L2_STORE_LOCK_RQSTS.HIT_E", "200003", "RFOs that hit cache lines in E state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_STORE_LOCK_RQSTS.HIT_M", new PMUEvent(null, "0x27", "0,1,2,3", "0x8", "L2_STORE_LOCK_RQSTS.HIT_M", "200003", "RFOs that hit cache lines in M state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_STORE_LOCK_RQSTS.ALL", new PMUEvent(null, "0x27", "0,1,2,3", "0xf", "L2_STORE_LOCK_RQSTS.ALL", "200003", "RFOs that access cache lines in any state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.MISS", new PMUEvent(null, "0x28", "0,1,2,3", "0x1", "L2_L1D_WB_RQSTS.MISS", "200003", "Count the number of modified Lines evicted from L1 and missed L2. (Non-rejected WBs from the DCU.).", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.HIT_S", new PMUEvent(null, "0x28", "0,1,2,3", "0x2", "L2_L1D_WB_RQSTS.HIT_S", "200003", "Not rejected writebacks from L1D to L2 cache lines in S state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.HIT_E", new PMUEvent(null, "0x28", "0,1,2,3", "0x4", "L2_L1D_WB_RQSTS.HIT_E", "200003", "Not rejected writebacks from L1D to L2 cache lines in E state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.HIT_M", new PMUEvent(null, "0x28", "0,1,2,3", "0x8", "L2_L1D_WB_RQSTS.HIT_M", "200003", "Not rejected writebacks from L1D to L2 cache lines in M state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.ALL", new PMUEvent(null, "0x28", "0,1,2,3", "0xf", "L2_L1D_WB_RQSTS.ALL", "200003", "Not rejected writebacks from L1D to L2 cache lines in any state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.DEMAND_DATA_RD", new PMUEvent(null, "0xF0", "0,1,2,3", "0x1", "L2_TRANS.DEMAND_DATA_RD", "200003", "Demand Data Read requests that access L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.RFO", new PMUEvent(null, "0xF0", "0,1,2,3", "0x2", "L2_TRANS.RFO", "200003", "RFO requests that access L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.CODE_RD", new PMUEvent(null, "0xF0", "0,1,2,3", "0x4", "L2_TRANS.CODE_RD", "200003", "L2 cache accesses when fetching instructions.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_PF", new PMUEvent(null, "0xF0", "0,1,2,3", "0x8", "L2_TRANS.ALL_PF", "200003", "L2 or LLC HW prefetches that access L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L1D_WB", new PMUEvent(null, "0xF0", "0,1,2,3", "0x10", "L2_TRANS.L1D_WB", "200003", "L1D writebacks that access L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_FILL", new PMUEvent(null, "0xF0", "0,1,2,3", "0x20", "L2_TRANS.L2_FILL", "200003", "L2 fill requests that access L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_WB", new PMUEvent(null, "0xF0", "0,1,2,3", "0x40", "L2_TRANS.L2_WB", "200003", "L2 writebacks that access L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_REQUESTS", new PMUEvent(null, "0xF0", "0,1,2,3", "0x80", "L2_TRANS.ALL_REQUESTS", "200003", "Transactions accessing L2 pipe.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.I", new PMUEvent(null, "0xF1", "0,1,2,3", "0x1", "L2_LINES_IN.I", "100003", "L2 cache lines in I state filling L2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.S", new PMUEvent(null, "0xF1", "0,1,2,3", "0x2", "L2_LINES_IN.S", "100003", "L2 cache lines in S state filling L2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.E", new PMUEvent(null, "0xF1", "0,1,2,3", "0x4", "L2_LINES_IN.E", "100003", "L2 cache lines in E state filling L2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.ALL", new PMUEvent("This event counts the number of L2 cache lines brought into the L2 cache.  Lines are filled into the L2 cache when there was an L2 miss.", "0xF1", "0,1,2,3", "0x7", "L2_LINES_IN.ALL", "100003", "L2 cache lines filling L2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DEMAND_CLEAN", new PMUEvent(null, "0xF2", "0,1,2,3", "0x1", "L2_LINES_OUT.DEMAND_CLEAN", "100003", "Clean L2 cache lines evicted by demand.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DEMAND_DIRTY", new PMUEvent(null, "0xF2", "0,1,2,3", "0x2", "L2_LINES_OUT.DEMAND_DIRTY", "100003", "Dirty L2 cache lines evicted by demand.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.PF_CLEAN", new PMUEvent(null, "0xF2", "0,1,2,3", "0x4", "L2_LINES_OUT.PF_CLEAN", "100003", "Clean L2 cache lines evicted by L2 prefetch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.PF_DIRTY", new PMUEvent(null, "0xF2", "0,1,2,3", "0x8", "L2_LINES_OUT.PF_DIRTY", "100003", "Dirty L2 cache lines evicted by L2 prefetch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DIRTY_ALL", new PMUEvent(null, "0xF2", "0,1,2,3", "0xa", "L2_LINES_OUT.DIRTY_ALL", "100003", "Dirty L2 cache lines filling the L2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.MISS", new PMUEvent(null, "0x2E", "0,1,2,3", "0x41", "LONGEST_LAT_CACHE.MISS", "100003", "Core-originated cacheable demand requests missed LLC.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.REFERENCE", new PMUEvent(null, "0x2E", "0,1,2,3", "0x4f", "LONGEST_LAT_CACHE.REFERENCE", "100003", "Core-originated cacheable demand requests that refer to LLC.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SQ_MISC.SPLIT_LOCK", new PMUEvent(null, "0xF4", "0,1,2,3", "0x10", "SQ_MISC.SPLIT_LOCK", "100003", "Split locks in SQ.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_DATA_RD", new PMUEvent(null, "0x24", "0,1,2,3", "0x3", "L2_RQSTS.ALL_DEMAND_DATA_RD", "200003", "Demand Data Read requests.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_RFO", new PMUEvent(null, "0x24", "0,1,2,3", "0xc", "L2_RQSTS.ALL_RFO", "200003", "RFO requests to L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_CODE_RD", new PMUEvent(null, "0x24", "0,1,2,3", "0x30", "L2_RQSTS.ALL_CODE_RD", "200003", "L2 code requests.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_PF", new PMUEvent(null, "0x24", "0,1,2,3", "0xc0", "L2_RQSTS.ALL_PF", "200003", "Requests from L2 hardware prefetchers.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_BLOCKS.BANK_CONFLICT_CYCLES", new PMUEvent(null, "0xBF", "0,1,2,3", "0x5", "L1D_BLOCKS.BANK_CONFLICT_CYCLES", "100003", "Cycles when dispatched loads are cancelled due to L1D bank conflicts with other load ports.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", new PMUEvent(null, "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", "2000003", "Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_C6", new PMUEvent(null, "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_C6", "2000003", "Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES_ANY", new PMUEvent(null, "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES_ANY", "2000003", "Cycles with L1D load Misses outstanding from any thread on physical core.", "2"));
		eventMap.put("L1D_PEND_MISS.FB_FULL", new PMUEvent(null, "0x48", "0,1,2,3", "0x2", "L1D_PEND_MISS.FB_FULL", "2000003", "Cycles a demand request was blocked due to Fill Buffers inavailability.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts demand & prefetch data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts demand & prefetch data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts demand & prefetch data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts demand & prefetch data reads that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all prefetch data reads that hit the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts prefetch data reads that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.ANY_RESPONSE", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.SNOOP_MISS", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", "100003", "Counts all writebacks from the core to the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all demand code reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all demand data reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts demand data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts demand data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts demand data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts demand data reads that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.LRU_HINTS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.LRU_HINTS", "100003", "Counts L2 hints sent to LLC to keep a line from being evicted out of the core caches", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.PORTIO_MMIO_UC", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.PORTIO_MMIO_UC", "100003", "Counts miscellaneous accesses that include port i/o, MMIO and uncacheable memory accesses", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to L2) code reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoops sent to sibling cores return clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) code reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.SPLIT_LOCK_UC_LOCK.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SPLIT_LOCK_UC_LOCK.ANY_RESPONSE", "100003", "Counts requests where the address of an atomic lock instruction spans a cache line boundary or the lock instruction is executed on uncacheable address", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", "100003", "Counts non-temporal stores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", "100003", "Counts all demand data reads", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", "100003", "Counts all demand rfo's", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", "100003", "Counts all demand code reads", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.ANY_RESPONSE", "100003", "Counts all demand & prefetch data reads", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.ANY_RESPONSE", "100003", "Counts all demand & prefetch prefetch RFOs", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.ANY_RESPONSE", "100003", "Counts all data/code/rfo references (demand & prefetch)", "0,1,2,3"));
		eventMap.put("OTHER_ASSISTS.AVX_STORE", new PMUEvent(null, "0xC1", "0,1,2,3", "0x8", "OTHER_ASSISTS.AVX_STORE", "100003", "Number of GSSE memory assist for stores. GSSE microcode assist is being invoked whenever the hardware is unable to properly handle GSSE-256b operations.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.AVX_TO_SSE", new PMUEvent(null, "0xC1", "0,1,2,3", "0x10", "OTHER_ASSISTS.AVX_TO_SSE", "100003", "Number of transitions from AVX-256 to legacy SSE when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.SSE_TO_AVX", new PMUEvent(null, "0xC1", "0,1,2,3", "0x20", "OTHER_ASSISTS.SSE_TO_AVX", "100003", "Number of transitions from SSE to AVX-256 when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.X87_OUTPUT", new PMUEvent(null, "0xCA", "0,1,2,3", "0x2", "FP_ASSIST.X87_OUTPUT", "100003", "Number of X87 assists due to output value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.X87_INPUT", new PMUEvent(null, "0xCA", "0,1,2,3", "0x4", "FP_ASSIST.X87_INPUT", "100003", "Number of X87 assists due to input value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_OUTPUT", new PMUEvent(null, "0xCA", "0,1,2,3", "0x8", "FP_ASSIST.SIMD_OUTPUT", "100003", "Number of SIMD FP assists due to Output values.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_INPUT", new PMUEvent(null, "0xCA", "0,1,2,3", "0x10", "FP_ASSIST.SIMD_INPUT", "100003", "Number of SIMD FP assists due to input values.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.X87", new PMUEvent(null, "0x10", "0,1,2,3", "0x1", "FP_COMP_OPS_EXE.X87", "2000003", "Number of FP Computational Uops Executed this cycle. The number of FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS, integer DIVs, and IDIVs. This event does not distinguish an FADD used in the middle of a transcendental flow from a s.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE", new PMUEvent(null, "0x10", "0,1,2,3", "0x10", "FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE", "2000003", "Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE", new PMUEvent(null, "0x10", "0,1,2,3", "0x20", "FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE", "2000003", "Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_PACKED_SINGLE", new PMUEvent(null, "0x10", "0,1,2,3", "0x40", "FP_COMP_OPS_EXE.SSE_PACKED_SINGLE", "2000003", "Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE", new PMUEvent(null, "0x10", "0,1,2,3", "0x80", "FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE", "2000003", "Number of SSE* or AVX-128 FP Computational scalar double-precision uops issued this cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SIMD_FP_256.PACKED_SINGLE", new PMUEvent(null, "0x11", "0,1,2,3", "0x1", "SIMD_FP_256.PACKED_SINGLE", "2000003", "Number of GSSE-256 Computational FP single precision uops issued this cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SIMD_FP_256.PACKED_DOUBLE", new PMUEvent(null, "0x11", "0,1,2,3", "0x2", "SIMD_FP_256.PACKED_DOUBLE", "2000003", "Number of AVX-256 Computational FP double precision uops issued this cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.ANY", new PMUEvent(null, "0xCA", "0,1,2,3", "0x1e", "FP_ASSIST.ANY", "100003", "Cycles with any input/output SSE or FP assist.", "0,1,2,3"));
		eventMap.put("ICACHE.HIT", new PMUEvent(null, "0x80", "0,1,2,3", "0x1", "ICACHE.HIT", "2000003", "Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.MISSES", new PMUEvent("This event counts the number of instruction cache, streaming buffer and victim cache misses. Counting includes unchacheable accesses.", "0x80", "0,1,2,3", "0x2", "ICACHE.MISSES", "200003", "Instruction cache, streaming buffer and victim cache misses.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.EMPTY", new PMUEvent(null, "0x79", "0,1,2,3", "0x2", "IDQ.EMPTY", "2000003", "Instruction Decode Queue (IDQ) empty cycles.", "0,1,2,3"));
		eventMap.put("IDQ.MITE_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x4", "IDQ.MITE_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x8", "IDQ.DSB_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_UOPS", "2000003", "Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_MITE_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x20", "IDQ.MS_MITE_UOPS", "2000003", "Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x30", "IDQ.MS_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_CYCLES", new PMUEvent("This event counts cycles during which the microcode sequencer assisted the front-end in delivering uops.  Microcode assists are used for complex instructions or scenarios that can't be handled by the standard decoder.  Using other instructions, if possible, will usually improve performance.  See the Intel? 64 and IA-32 Architectures Optimization Reference Manual for more information.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CORE", new PMUEvent("This event counts the number of uops not delivered to the back-end per cycle, per thread, when the back-end was not stalled.  In the ideal case 4 uops can be delivered each cycle.  The event counts the undelivered uops - so if 3 were delivered in one cycle, the counter would be incremented by 1 for that cycle (4 - 3). If the back-end is stalled, the count for this event is not incremented even when uops were not delivered, because the back-end would not have been able to accept them.  This event is used in determining the front-end bound category of the top-down pipeline slots characterization.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CORE", "2000003", "Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled .", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", "2000003", "Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", "2000003", "Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled.", "0,1,2,3"));
		eventMap.put("DSB2MITE_SWITCHES.COUNT", new PMUEvent(null, "0xAB", "0,1,2,3", "0x1", "DSB2MITE_SWITCHES.COUNT", "2000003", "Decode Stream Buffer (DSB)-to-MITE switches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DSB2MITE_SWITCHES.PENALTY_CYCLES", new PMUEvent("This event counts the cycles attributed to a switch from the Decoded Stream Buffer (DSB), which holds decoded instructions, to the legacy decode pipeline.  It excludes cycles when the back-end cannot  accept new micro-ops.  The penalty for these switches is potentially several cycles of instruction starvation, where no micro-ops are delivered to the back-end.", "0xAB", "0,1,2,3", "0x2", "DSB2MITE_SWITCHES.PENALTY_CYCLES", "2000003", "Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DSB_FILL.OTHER_CANCEL", new PMUEvent(null, "0xAC", "0,1,2,3", "0x2", "DSB_FILL.OTHER_CANCEL", "2000003", "Cases of cancelling valid DSB fill not because of exceeding way limit.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DSB_FILL.EXCEED_DSB_LINES", new PMUEvent(null, "0xAC", "0,1,2,3", "0x8", "DSB_FILL.EXCEED_DSB_LINES", "2000003", "Cycles when Decode Stream Buffer (DSB) fill encounter more than 3 Decode Stream Buffer (DSB) lines.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_CYCLES", new PMUEvent(null, "0x79", "0,1,2,3", "0x4", "IDQ.MITE_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_CYCLES", new PMUEvent(null, "0x79", "0,1,2,3", "0x8", "IDQ.DSB_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_CYCLES", new PMUEvent(null, "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_CYCLES", "2000003", "Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_OCCUR", new PMUEvent(null, "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_OCCUR", "2000003", "Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", "2000003", "Cycles with less than 2 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", "2000003", "Cycles with less than 3 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_GE_1_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_GE_1_UOP_DELIV.CORE", "2000003", "Cycles when 1 or more uops were delivered to the by the front end.", "0,1,2,3"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_4_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_4_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering 4 Uops.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_ANY_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_ANY_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering any Uop.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_4_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_4_UOPS", "2000003", "Cycles MITE is delivering 4 Uops.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_ANY_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_ANY_UOPS", "2000003", "Cycles MITE is delivering any Uop.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DSB_FILL.ALL_CANCEL", new PMUEvent(null, "0xAC", "0,1,2,3", "0xa", "DSB_FILL.ALL_CANCEL", "2000003", "Cases of cancelling valid Decode Stream Buffer (DSB) fill not because of exceeding way limit.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", "2000003", "Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.", "0,1,2,3"));
		eventMap.put("IDQ.MITE_ALL_UOPS", new PMUEvent(null, "0x79", "0,1,2,3", "0x3c", "IDQ.MITE_ALL_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_SWITCHES", new PMUEvent(null, "0x79", "0,1,2,3", "0x30", "IDQ.MS_SWITCHES", "2000003", "Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MEMORY_ORDERING", new PMUEvent("This event counts the number of memory ordering Machine Clears detected. Memory Ordering Machine Clears can result from memory disambiguation, external snoops, or cross SMT-HW-thread snoop (stores) hitting load buffers.  Machine clears can have a significant performance impact if they are happening frequently.", "0xC3", "0,1,2,3", "0x2", "MACHINE_CLEARS.MEMORY_ORDERING", "100003", "Counts the number of machine clears due to memory order conflicts.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", "100003", "Loads with latency value being above 4 .", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", "50021", "Loads with latency value being above 8.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", "20011", "Loads with latency value being above 16.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", "100007", "Loads with latency value being above 32.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", "2003", "Loads with latency value being above 64.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", "1009", "Loads with latency value being above 128.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", "503", "Loads with latency value being above 256.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", "101", "Loads with latency value being above 512.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.PRECISE_STORE", new PMUEvent(null, "0xCD", "3", "0x2", "MEM_TRANS_RETIRED.PRECISE_STORE", "2000003", "Sample stores and collect precise store operation via PEBS record. PMC3 only. (Precise Event - PEBS).", "3"));
		eventMap.put("MISALIGN_MEM_REF.LOADS", new PMUEvent(null, "0x05", "0,1,2,3", "0x1", "MISALIGN_MEM_REF.LOADS", "2000003", "Speculative cache line split load uops dispatched to L1 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MISALIGN_MEM_REF.STORES", new PMUEvent(null, "0x05", "0,1,2,3", "0x2", "MISALIGN_MEM_REF.STORES", "2000003", "Speculative cache line split STA uops dispatched to L1 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all demand code reads that miss the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.LOCAL_DRAM", "100003", "Counts all demand code reads that miss the LLC  and the data returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_DRAM", "100003", "Counts all demand code reads that miss the LLC  and the data returned from remote dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all demand code reads that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HITM", "100003", "Counts all demand code reads that miss the LLC  the data is found in M state in remote cache and forwarded from there", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_DRAM", "100003", "Counts demand data reads that miss the LLC  and the data returned from remote & local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts demand data reads that miss in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.LOCAL_DRAM", "100003", "Counts demand data reads that miss the LLC  and the data returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_DRAM", "100003", "Counts demand data reads that miss the LLC  and the data returned from remote dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts demand data reads that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HITM", "100003", "Counts demand data reads that miss the LLC  the data is found in M state in remote cache and forwarded from there", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to L2) code reads that miss the LLC  and the data returned from remote & local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_DRAM", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data returned from remote & local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to L2) data reads that miss in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.LOCAL_DRAM", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_DRAM", "100003", "Counts prefetch (that bring data to L2) data reads  that miss the LLC  and the data returned from remote dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HITM", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  the data is found in M state in remote cache and forwarded from there", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) code reads that miss in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DEMAND_MLC_PREF_READS.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DEMAND_MLC_PREF_READS.LLC_MISS.LOCAL_DRAM", "100003", "Counts all local dram accesses for all demand and L2 prefetches. LLC prefetches are excluded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DEMAND_MLC_PREF_READS.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DEMAND_MLC_PREF_READS.LLC_MISS.ANY_RESPONSE", "100003", "This event counts all LLC misses for all demand and L2 prefetches. LLC prefetches are excluded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DEMAND_MLC_PREF_READS.LLC_MISS.REMOTE_HITM_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DEMAND_MLC_PREF_READS.LLC_MISS.REMOTE_HITM_HIT_FORWARD", "100003", "This event counts all remote cache-to-cache transfers (includes HITM and HIT-Forward) for all demand and L2 prefetches. LLC prefetches are excluded.", "0,1,2,3"));
		eventMap.put("INSTS_WRITTEN_TO_IQ.INSTS", new PMUEvent(null, "0x17", "0,1,2,3", "0x1", "INSTS_WRITTEN_TO_IQ.INSTS", "2000003", "Valid instructions written to IQ per cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING0", new PMUEvent(null, "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0", "2000003", "Unhalted core cycles when the thread is in ring 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING0_TRANS", new PMUEvent(null, "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0_TRANS", "100007", "Number of intervals between processor halts while thread is in ring 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING123", new PMUEvent(null, "0x5C", "0,1,2,3", "0x2", "CPL_CYCLES.RING123", "2000003", "Unhalted core cycles when thread is in rings 1, 2, or 3.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HW_PRE_REQ.DL1_MISS", new PMUEvent(null, "0x4E", "0,1,2,3", "0x2", "HW_PRE_REQ.DL1_MISS", "2000003", "Hardware Prefetch requests that miss the L1D cache. This accounts for both L1 streamer and IP-based (IPP) HW prefetchers. A request is being counted each time it access the cache & miss it, including if a block is applicable or if hit the Fill Buffer for .", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", new PMUEvent(null, "0x63", "0,1,2,3", "0x1", "LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", "2000003", "Cycles when L1 and L2 are locked due to UC or split lock.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent("This event counts the number of instructions retired from execution. For instructions that consist of multiple micro-ops, this event counts the retirement of the last micro-op of the instruction. Counting continues during hardware interrupts, traps, and inside interrupt handlers. ", "0x00", "Fixed counter 1", "0x1", "INST_RETIRED.ANY", "2000003", "Instructions retired from execution.", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD", new PMUEvent("This event counts the number of core cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. This event is a component in many key event ratios. The core frequency may change from time to time due to transitions associated with Enhanced Intel SpeedStep Technology or TM2. For this reason this event may have a changing ratio with regards to time. When the core frequency is constant, this event can approximate elapsed time while the core was not in the halt state. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. ", "0x00", "Fixed counter 2", "0x2", "CPU_CLK_UNHALTED.THREAD", "2000003", "Core cycles when the thread is not in halt state.", "Fixed counter 2"));
		eventMap.put("CPU_CLK_UNHALTED.REF_TSC", new PMUEvent("This event counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state. This event has a constant ratio with the CPU_CLK_UNHALTED.REF_XCLK event. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. ", "0x00", "Fixed counter 3", "0x3", "CPU_CLK_UNHALTED.REF_TSC", "2000003", "Reference cycles when the core is not in halt state.", "Fixed counter 3"));
		eventMap.put("BR_INST_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent(null, "0x88", "0,1,2,3", "0x41", "BR_INST_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken macro-conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_CONDITIONAL", new PMUEvent(null, "0x88", "0,1,2,3", "0x81", "BR_INST_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired macro-conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_JUMP", new PMUEvent(null, "0x88", "0,1,2,3", "0x82", "BR_INST_EXEC.TAKEN_DIRECT_JUMP", "200003", "Taken speculative and retired macro-conditional branch instructions excluding calls and indirects.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x88", "0,1,2,3", "0x84", "BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", new PMUEvent(null, "0x88", "0,1,2,3", "0x88", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", "200003", "Taken speculative and retired indirect branches with return mnemonic.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0x90", "BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", "200003", "Taken speculative and retired direct near calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0xa0", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired indirect calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_CONDITIONAL", new PMUEvent(null, "0x88", "0,1,2,3", "0xc1", "BR_INST_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired macro-conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_JMP", new PMUEvent(null, "0x88", "0,1,2,3", "0xc2", "BR_INST_EXEC.ALL_DIRECT_JMP", "200003", "Speculative and retired macro-unconditional branches excluding calls and indirects.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x88", "0,1,2,3", "0xc4", "BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Speculative and retired indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", new PMUEvent(null, "0x88", "0,1,2,3", "0xc8", "BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", "200003", "Speculative and retired indirect return branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0xd0", "BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", "200003", "Speculative and retired direct near calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent(null, "0x89", "0,1,2,3", "0x41", "BR_MISP_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken speculative and retired mispredicted macro conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_CONDITIONAL", new PMUEvent(null, "0x89", "0,1,2,3", "0x81", "BR_MISP_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired mispredicted macro conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x89", "0,1,2,3", "0x84", "BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired mispredicted indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_RETURN_NEAR", new PMUEvent(null, "0x89", "0,1,2,3", "0x88", "BR_MISP_EXEC.TAKEN_RETURN_NEAR", "200003", "Taken speculative and retired mispredicted indirect branches with return mnemonic.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_DIRECT_NEAR_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0x90", "BR_MISP_EXEC.TAKEN_DIRECT_NEAR_CALL", "200003", "Taken speculative and retired mispredicted direct near calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0xa0", "BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired mispredicted indirect calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_CONDITIONAL", new PMUEvent(null, "0x89", "0,1,2,3", "0xc1", "BR_MISP_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired mispredicted macro conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x89", "0,1,2,3", "0xc4", "BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Mispredicted indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_DIRECT_NEAR_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0xd0", "BR_MISP_EXEC.ALL_DIRECT_NEAR_CALL", "200003", "Speculative and retired mispredicted direct near calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P", new PMUEvent(null, "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P", "2000003", "Thread cycles when thread is not in halt state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.UOPS", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.UOPS", "2000003", "Number of Uops delivered by the LSD.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_ACTIVE", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_ACTIVE", "2000003", "Cycles Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.LCP", new PMUEvent(null, "0x87", "0,1,2,3", "0x1", "ILD_STALL.LCP", "2000003", "Stalls caused by changing prefix length of the instruction.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.IQ_FULL", new PMUEvent(null, "0x87", "0,1,2,3", "0x4", "ILD_STALL.IQ_FULL", "2000003", "Stall cycles because IQ is full.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RAT_STALL_CYCLES", new PMUEvent(null, "0x0D", "0,1,2,3", "0x40", "INT_MISC.RAT_STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) external stall is sent to Instruction Decode Queue (IDQ) for the thread.", "0,1,2,3,4,5,6,7"));
		eventMap.put("PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP", new PMUEvent(null, "0x59", "0,1,2,3", "0x20", "PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP", "2000003", "Increments the number of flags-merge uops in flight each cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("PARTIAL_RAT_STALLS.SLOW_LEA_WINDOW", new PMUEvent("This event counts the number of cycles with at least one slow LEA uop being allocated. A uop is generally considered as slow LEA if it has three sources (for example, two sources and immediate) regardless of whether it is a result of LEA instruction or not. Examples of the slow LEA uop are or uops with base, index, and offset source operands using base and index reqisters, where base is EBR/RBP/R13, using RIP relative or 16-bit addressing modes. See the Intel? 64 and IA-32 Architectures Optimization Reference Manual for more details about slow LEA instructions.", "0x59", "0,1,2,3", "0x40", "PARTIAL_RAT_STALLS.SLOW_LEA_WINDOW", "2000003", "Cycles with at least one slow LEA uop being allocated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("PARTIAL_RAT_STALLS.MUL_SINGLE_UOP", new PMUEvent(null, "0x59", "0,1,2,3", "0x80", "PARTIAL_RAT_STALLS.MUL_SINGLE_UOP", "2000003", "Multiply packed/scalar single precision uops allocated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ANY", new PMUEvent(null, "0xA2", "0,1,2,3", "0x1", "RESOURCE_STALLS.ANY", "2000003", "Resource-related stall cycles.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.LB", new PMUEvent(null, "0xA2", "0,1,2,3", "0x2", "RESOURCE_STALLS.LB", "2000003", "Counts the cycles of stall due to lack of load buffers.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.RS", new PMUEvent(null, "0xA2", "0,1,2,3", "0x4", "RESOURCE_STALLS.RS", "2000003", "Cycles stalled due to no eligible RS entry available.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.SB", new PMUEvent(null, "0xA2", "0,1,2,3", "0x8", "RESOURCE_STALLS.SB", "2000003", "Cycles stalled due to no store buffers available. (not including draining form sync).", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ROB", new PMUEvent(null, "0xA2", "0,1,2,3", "0x10", "RESOURCE_STALLS.ROB", "2000003", "Cycles stalled due to re-order buffer full.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS2.BOB_FULL", new PMUEvent(null, "0x5B", "0,1,2,3", "0x40", "RESOURCE_STALLS2.BOB_FULL", "2000003", "Cycles when Allocator is stalled if BOB is full and new branch needs it.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.ANY", new PMUEvent("This event counts the number of Uops issued by the front-end of the pipeilne to the back-end.", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.ANY", "2000003", "Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS).", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.STALL_CYCLES", new PMUEvent(null, "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread.", "0,1,2,3"));
		eventMap.put("UOPS_ISSUED.CORE_STALL_CYCLES", new PMUEvent(null, "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.CORE_STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads.", "0,1,2,3"));
		eventMap.put("RS_EVENTS.EMPTY_CYCLES", new PMUEvent(null, "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_CYCLES", "2000003", "Cycles when Reservation Station (RS) is empty for the thread.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ROB_MISC_EVENTS.LBR_INSERTS", new PMUEvent(null, "0xCC", "0,1,2,3", "0x20", "ROB_MISC_EVENTS.LBR_INSERTS", "2000003", "Count cases of saving new LBR.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent("This event is incremented when self-modifying code (SMC) is detected, which causes a machine clear.  Machine clears can have a significant performance impact if they are happening frequently.", "0xC3", "0,1,2,3", "0x4", "MACHINE_CLEARS.SMC", "100003", "Self-modifying code (SMC) detected.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MASKMOV", new PMUEvent("Maskmov false fault - counts number of time ucode passes through Maskmov flow due to instruction's mask being 0 while the flow was completed without raising a fault.", "0xC3", "0,1,2,3", "0x20", "MACHINE_CLEARS.MASKMOV", "100003", "This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent(null, "0xC0", "0,1,2,3", "0x0", "INST_RETIRED.ANY_P", "2000003", "Number of instructions retired. General Counter   - architectural event.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.ALL", new PMUEvent("This event counts the number of micro-ops retired.", "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.ALL", "2000003", "Actually retired uops.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.RETIRE_SLOTS", new PMUEvent("This event counts the number of retirement slots used each cycle.  There are potentially 4 slots that can be used each cycle - meaning, 4 micro-ops or 4 instructions could retire each cycle.  This event is used in determining the 'Retiring' category of the Top-Down pipeline slots characterization.", "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.RETIRE_SLOTS", "2000003", "Retirement slots used.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.STALL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.TOTAL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.TOTAL_CYCLES", "2000003", "Cycles with less than 10 actually retired uops.", "0,1,2,3"));
		eventMap.put("BR_INST_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x1", "BR_INST_RETIRED.CONDITIONAL", "400009", "Conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL", "100007", "Direct and indirect near call instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent(null, "0xC4", "0,1,2,3", "0x0", "BR_INST_RETIRED.ALL_BRANCHES", "400009", "All (macro) branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_RETURN", new PMUEvent(null, "0xC4", "0,1,2,3", "0x8", "BR_INST_RETIRED.NEAR_RETURN", "100007", "Return instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NOT_TAKEN", new PMUEvent(null, "0xC4", "0,1,2,3", "0x10", "BR_INST_RETIRED.NOT_TAKEN", "400009", "Not taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_TAKEN", new PMUEvent(null, "0xC4", "0,1,2,3", "0x20", "BR_INST_RETIRED.NEAR_TAKEN", "400009", "Taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.FAR_BRANCH", new PMUEvent(null, "0xC4", "0,1,2,3", "0x40", "BR_INST_RETIRED.FAR_BRANCH", "100007", "Far branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent(null, "0xC4", "0,1,2,3", "0x4", "BR_INST_RETIRED.ALL_BRANCHES_PEBS", "400009", "All (macro) branch instructions retired. (Precise Event - PEBS).", "0,1,2,3"));
		eventMap.put("BR_MISP_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC5", "0,1,2,3", "0x1", "BR_MISP_RETIRED.CONDITIONAL", "400009", "Mispredicted conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.NEAR_CALL", new PMUEvent(null, "0xC5", "0,1,2,3", "0x2", "BR_MISP_RETIRED.NEAR_CALL", "100007", "Direct and indirect mispredicted near call instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent(null, "0xC5", "0,1,2,3", "0x0", "BR_MISP_RETIRED.ALL_BRANCHES", "400009", "All mispredicted macro branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.NOT_TAKEN", new PMUEvent(null, "0xC5", "0,1,2,3", "0x10", "BR_MISP_RETIRED.NOT_TAKEN", "400009", "Mispredicted not taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.TAKEN", new PMUEvent(null, "0xC5", "0,1,2,3", "0x20", "BR_MISP_RETIRED.TAKEN", "400009", "Mispredicted taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent("Mispredicted macro branch instructions retired. (Precise Event - PEBS)", "0xC5", "0,1,2,3", "0x4", "BR_MISP_RETIRED.ALL_BRANCHES_PEBS", "400009", "Mispredicted macro branch instructions retired. (Precise Event - PEBS).", "0,1,2,3"));
		eventMap.put("OTHER_ASSISTS.ITLB_MISS_RETIRED", new PMUEvent(null, "0xC1", "0,1,2,3", "0x2", "OTHER_ASSISTS.ITLB_MISS_RETIRED", "100003", "Retired instructions experiencing ITLB misses.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ARITH.FPU_DIV_ACTIVE", new PMUEvent(null, "0x14", "0,1,2,3", "0x1", "ARITH.FPU_DIV_ACTIVE", "2000003", "Cycles when divider is busy executing divide operations.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ARITH.FPU_DIV", new PMUEvent("This event counts the number of the divide operations executed.", "0x14", "0,1,2,3", "0x1", "ARITH.FPU_DIV", "100003", "Divide operations executed.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED.THREAD", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_DISPATCHED.THREAD", "2000003", "Uops dispatched per thread.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED.CORE", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_DISPATCHED.CORE", "2000003", "Uops dispatched from any thread.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_0", new PMUEvent(null, "0xA1", "0,1,2,3", "0x1", "UOPS_DISPATCHED_PORT.PORT_0", "2000003", "Cycles per thread when uops are dispatched to port 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_1", new PMUEvent(null, "0xA1", "0,1,2,3", "0x2", "UOPS_DISPATCHED_PORT.PORT_1", "2000003", "Cycles per thread when uops are dispatched to port 1.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_4", new PMUEvent(null, "0xA1", "0,1,2,3", "0x40", "UOPS_DISPATCHED_PORT.PORT_4", "2000003", "Cycles per thread when uops are dispatched to port 4.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_5", new PMUEvent(null, "0xA1", "0,1,2,3", "0x80", "UOPS_DISPATCHED_PORT.PORT_5", "2000003", "Cycles per thread when uops are dispatched to port 5.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_NO_DISPATCH", new PMUEvent(null, "0xA3", "0,1,2,3", "0x4", "CYCLE_ACTIVITY.CYCLES_NO_DISPATCH", "2000003", "Each cycle there was no dispatch for this thread, increment by 1. Note this is connect to Umask 2. No dispatch can be deduced from the UOPS_EXECUTED event.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L1D_PENDING", new PMUEvent(null, "0xA3", "2", "0x2", "CYCLE_ACTIVITY.CYCLES_L1D_PENDING", "2000003", "Each cycle there was a miss-pending demand load this thread, increment by 1. Note this is in DCU and connected to Umask 1. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.", "2"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L2_PENDING", new PMUEvent(null, "0xA3", "0,1,2,3", "0x1", "CYCLE_ACTIVITY.CYCLES_L2_PENDING", "2000003", "Each cycle there was a MLC-miss pending demand load this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L1D_PENDING", new PMUEvent(null, "0xA3", "2", "0x6", "CYCLE_ACTIVITY.STALLS_L1D_PENDING", "2000003", "Each cycle there was a miss-pending demand load this thread and no uops dispatched, increment by 1. Note this is in DCU and connected to Umask 1 and 2. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.", "2"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L2_PENDING", new PMUEvent(null, "0xA3", "0,1,2,3", "0x5", "CYCLE_ACTIVITY.STALLS_L2_PENDING", "2000003", "Each cycle there was a MLC-miss pending demand load and no uops dispatched on this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0 and 2.", "0,1,2,3"));
		eventMap.put("LOAD_HIT_PRE.SW_PF", new PMUEvent(null, "0x4C", "0,1,2,3", "0x1", "LOAD_HIT_PRE.SW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for software prefetch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.HW_PF", new PMUEvent(null, "0x4C", "0,1,2,3", "0x2", "LOAD_HIT_PRE.HW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for hardware prefetch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.DATA_UNKNOWN", new PMUEvent(null, "0x03", "0,1,2,3", "0x1", "LD_BLOCKS.DATA_UNKNOWN", "100003", "Loads delayed due to SB blocks, preceding store operations with known addresses but unknown data.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.STORE_FORWARD", new PMUEvent("This event counts loads that followed a store to the same address, where the data could not be forwarded inside the pipeline from the store to the load.  The most common reason why store forwarding would be blocked is when a load's address range overlaps with a preceeding smaller uncompleted store.  See the table of not supported store forwards in the Intel? 64 and IA-32 Architectures Optimization Reference Manual.  The penalty for blocked store forwarding is that the load must wait for the store to complete before it can be issued.", "0x03", "0,1,2,3", "0x2", "LD_BLOCKS.STORE_FORWARD", "100003", "Cases when loads get true Block-on-Store blocking code preventing store forwarding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.NO_SR", new PMUEvent(null, "0x03", "0,1,2,3", "0x8", "LD_BLOCKS.NO_SR", "100003", "This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.ALL_BLOCK", new PMUEvent(null, "0x03", "0,1,2,3", "0x10", "LD_BLOCKS.ALL_BLOCK", "100003", "Number of cases where any load ends up with a valid block-code written to the load buffer (including blocks due to Memory Order Buffer (MOB), Data Cache Unit (DCU), TLB, but load has no DCU miss).", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", new PMUEvent("Aliasing occurs when a load is issued after a store and their memory addresses are offset by 4K.  This event counts the number of loads that aliased with a preceding store, resulting in an extended address check in the pipeline.  The enhanced address check typically has a performance penalty of 5 cycles.", "0x07", "0,1,2,3", "0x1", "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", "100003", "False dependencies in MOB due to partial compare.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS_PARTIAL.ALL_STA_BLOCK", new PMUEvent(null, "0x07", "0,1,2,3", "0x8", "LD_BLOCKS_PARTIAL.ALL_STA_BLOCK", "100003", "This event counts the number of times that load operations are temporarily blocked because of older stores, with addresses that are not yet known. A load operation may incur more than one block of this type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("AGU_BYPASS_CANCEL.COUNT", new PMUEvent(null, "0xB6", "0,1,2,3", "0x1", "AGU_BYPASS_CANCEL.COUNT", "100003", "This event counts executed load operations with all the following traits: 1. addressing of the format [base + offset], 2. the offset is between 1 and 2047, 3. the address specified in the base register is in one page and the address [base+offset] is in an.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate).", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other is halted.", "0,1,2,3"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_0_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x1", "UOPS_DISPATCHED_PORT.PORT_0_CORE", "2000003", "Cycles per core when uops are dispatched to port 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_1_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x2", "UOPS_DISPATCHED_PORT.PORT_1_CORE", "2000003", "Cycles per core when uops are dispatched to port 1.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_4_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x40", "UOPS_DISPATCHED_PORT.PORT_4_CORE", "2000003", "Cycles per core when uops are dispatched to port 4.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_5_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x80", "UOPS_DISPATCHED_PORT.PORT_5_CORE", "2000003", "Cycles per core when uops are dispatched to port 5.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_2", new PMUEvent(null, "0xA1", "0,1,2,3", "0xc", "UOPS_DISPATCHED_PORT.PORT_2", "2000003", "Cycles per thread when load or STA uops are dispatched to port 2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_3", new PMUEvent(null, "0xA1", "0,1,2,3", "0x30", "UOPS_DISPATCHED_PORT.PORT_3", "2000003", "Cycles per thread when load or STA uops are dispatched to port 3.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_2_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0xc", "UOPS_DISPATCHED_PORT.PORT_2_CORE", "2000003", "Cycles per core when load or STA uops are dispatched to port 2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_3_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x30", "UOPS_DISPATCHED_PORT.PORT_3_CORE", "2000003", "Cycles per core when load or STA uops are dispatched to port 3.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.PREC_DIST", new PMUEvent(null, "0xC0", "1", "0x1", "INST_RETIRED.PREC_DIST", "2000003", "Instructions retired. (Precise Event - PEBS).", "1"));
		eventMap.put("RESOURCE_STALLS2.ALL_PRF_CONTROL", new PMUEvent(null, "0x5B", "0,1,2,3", "0xf", "RESOURCE_STALLS2.ALL_PRF_CONTROL", "2000003", "Resource stalls2 control structures full for physical registers.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS2.ALL_FL_EMPTY", new PMUEvent(null, "0x5B", "0,1,2,3", "0xc", "RESOURCE_STALLS2.ALL_FL_EMPTY", "2000003", "Cycles with either free list is empty.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.MEM_RS", new PMUEvent(null, "0xA2", "0,1,2,3", "0xe", "RESOURCE_STALLS.MEM_RS", "2000003", "Resource stalls due to memory buffers or Reservation Station (RS) being fully utilized.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.OOO_RSRC", new PMUEvent(null, "0xA2", "0,1,2,3", "0xf0", "RESOURCE_STALLS.OOO_RSRC", "2000003", "Resource stalls due to Rob being full, FCSW, MXCSR and OTHER.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS2.OOO_RSRC", new PMUEvent(null, "0x5B", "0,1,2,3", "0x4f", "RESOURCE_STALLS2.OOO_RSRC", "2000003", "Resource stalls out of order resources full.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.LB_SB", new PMUEvent(null, "0xA2", "0,1,2,3", "0xa", "RESOURCE_STALLS.LB_SB", "2000003", "Resource stalls due to load or store buffers all being in use.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES", new PMUEvent(null, "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES", "2000003", "Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...).", "0,1,2,3,4,5,6,7"));
		eventMap.put("PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP_CYCLES", new PMUEvent("This event counts the number of cycles spent executing performance-sensitive flags-merging uops. For example, shift CL (merge_arith_flags). For more details, See the Intel? 64 and IA-32 Architectures Optimization Reference Manual.", "0x59", "0,1,2,3", "0x20", "PARTIAL_RAT_STALLS.FLAGS_MERGE_UOP_CYCLES", "2000003", "Performance sensitive flags-merging uops added by Sandy Bridge u-arch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_STALLS_COUNT", new PMUEvent(null, "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_STALLS_COUNT", "2000003", "Number of occurences waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...).", "0,1,2,3,4,5,6,7"));
		eventMap.put("BACLEARS.ANY", new PMUEvent(null, "0xE6", "0,1,2,3", "0x1f", "BACLEARS.ANY", "100003", "Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_BRANCHES", new PMUEvent(null, "0x88", "0,1,2,3", "0xff", "BR_INST_EXEC.ALL_BRANCHES", "200003", "Speculative and retired  branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_BRANCHES", new PMUEvent(null, "0x89", "0,1,2,3", "0xff", "BR_MISP_EXEC.ALL_BRANCHES", "200003", "Speculative and retired mispredicted macro conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.CORE_STALL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.CORE_STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3"));
		eventMap.put("LSD.CYCLES_4_UOPS", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_4_UOPS", "2000003", "Cycles 4 Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.COUNT", new PMUEvent(null, "0xc3", "0,1,2,3", "0x1", "MACHINE_CLEARS.COUNT", "100003", "Number of machine clears (nukes) of any type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_END", new PMUEvent(null, "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_END", "2000003", "Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_ANY", new PMUEvent(null, "0x00", "Fixed counter 2", "0x2", "CPU_CLK_UNHALTED.THREAD_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "Fixed counter 2"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate).", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES_ANY", new PMUEvent(null, "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES_ANY", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke).", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_1", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_1", "2000003", "Cycles at least 1 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_2", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_2", "2000003", "Cycles at least 2 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_3", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_3", "2000003", "Cycles at least 3 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_4", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_4", "2000003", "Cycles at least 4 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_NONE", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_NONE", "2000003", "Cycles with no micro-ops executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK", new PMUEvent("Reference cycles when the thread is unhalted (counts at 100 MHz rate)", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate).", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate).", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other thread is halted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UNC_C_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_C_CLOCKTICKS", null, "Uncore cache clock ticks", null));
		eventMap.put("UNC_C_LLC_LOOKUP.ANY", new PMUEvent(null, "0x34", "0,1", "0x11", "UNC_C_LLC_LOOKUP.ANY", null, "All LLC Misses (code+ data rd + data wr - including demand and prefetch)", null));
		eventMap.put("UNC_C_LLC_VICTIMS.M_STATE", new PMUEvent(null, "0x37", "0,1", "0x1", "UNC_C_LLC_VICTIMS.M_STATE", null, "M line evictions from LLC (writebacks to memory)", null));
		eventMap.put("LLC_MISSES.DATA_READ", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.DATA_READ", null, "LLC misses - demand and prefetch data reads - excludes LLC prefetches. Derived from unc_c_tor_inserts.miss_opcode.demand", null));
		eventMap.put("LLC_MISSES.UNCACHEABLE", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.UNCACHEABLE", null, "LLC misses - Uncacheable reads. Derived from unc_c_tor_inserts.miss_opcode.uncacheable", null));
		eventMap.put("LLC_MISSES.PCIE_WRITE", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.PCIE_WRITE", null, "PCIe allocating writes that miss LLC - DDIO misses. Derived from unc_c_tor_inserts.miss_opcode.ddio_miss", null));
		eventMap.put("LLC_MISSES.ITOM_WRITE", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.ITOM_WRITE", null, "LLC misses for ItoM writes (as part of fast string memcpy stores). Derived from unc_c_tor_inserts.miss_opcode.itom_write", null));
		eventMap.put("LLC_REFERENCES.STREAMING_FULL", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.STREAMING_FULL", null, "Streaming stores (full cache line). Derived from unc_c_tor_inserts.opcode.streaming_full", null));
		eventMap.put("LLC_REFERENCES.STREAMING_PARTIAL", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.STREAMING_PARTIAL", null, "Streaming stores (partial cache line). Derived from unc_c_tor_inserts.opcode.streaming_partial", null));
		eventMap.put("LLC_REFERENCES.PCIE_PARTIAL_READ", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_PARTIAL_READ", null, "Partial PCIe reads. Derived from unc_c_tor_inserts.opcode.pcie_partial", null));
		eventMap.put("LLC_REFERENCES.PCIE_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_WRITE", null, "PCIe allocating writes that hit in LLC (DDIO hits). Derived from unc_c_tor_inserts.opcode.ddio_hit", null));
		eventMap.put("LLC_REFERENCES.PCIE_READ", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_READ", null, "PCIe read current. Derived from unc_c_tor_inserts.opcode.pcie_read_current", null));
		eventMap.put("LLC_REFERENCES.ITOM_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.ITOM_WRITE", null, "ItoM write hits (as part of fast string memcpy stores). Derived from unc_c_tor_inserts.opcode.itom_write_hit", null));
		eventMap.put("LLC_REFERENCES.PCIE_NS_READ", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_NS_READ", null, "PCIe non-snoop reads. Derived from unc_c_tor_inserts.opcode.pcie_read", null));
		eventMap.put("LLC_REFERENCES.PCIE_NS_PARTIAL_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_NS_PARTIAL_WRITE", null, "PCIe non-snoop writes (partial). Derived from unc_c_tor_inserts.opcode.pcie_partial_write", null));
		eventMap.put("LLC_REFERENCES.PCIE_NS_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_NS_WRITE", null, "PCIe non-snoop writes (full line). Derived from unc_c_tor_inserts.opcode.pcie_full_write", null));
		eventMap.put("UNC_C_TOR_OCCUPANCY.MISS_ALL", new PMUEvent(null, "0x36", null, "0xa", "UNC_C_TOR_OCCUPANCY.MISS_ALL", null, "Occupancy counter for all LLC misses; we divide this by UNC_C_CLOCKTICKS to get average Q depth", null));
		eventMap.put("UNC_C_TOR_OCCUPANCY.LLC_DATA_READ", new PMUEvent(null, "0x36", null, "0x3", "UNC_C_TOR_OCCUPANCY.LLC_DATA_READ", null, "Occupancy counter for LLC data reads (demand and L2 prefetch). Derived from unc_c_tor_occupancy.miss_opcode.llc_data_read", null));
		eventMap.put("UNC_H_REQUESTS.READS", new PMUEvent(null, "0x1", "0,1,2,3", "0x3", "UNC_H_REQUESTS.READS", null, "read requests to home agent", null));
		eventMap.put("UNC_H_REQUESTS.WRITES", new PMUEvent(null, "0x1", "0,1,2,3", "0xc", "UNC_H_REQUESTS.WRITES", null, "write requests to home agent", null));
		eventMap.put("UNC_Q_CLOCKTICKS", new PMUEvent(null, "0x14", "0,1,2,3", null, "UNC_Q_CLOCKTICKS", null, "QPI clock ticks. Used to get percentages of QPI cycles events", null));
		eventMap.put("UNC_Q_RxL0P_POWER_CYCLES", new PMUEvent(null, "0x10", "0,1,2,3", null, "UNC_Q_RxL0P_POWER_CYCLES", null, "Cycles where receiving QPI link is in half-width mode", null));
		eventMap.put("UNC_Q_TxL0P_POWER_CYCLES", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_Q_TxL0P_POWER_CYCLES", null, "Cycles where transmitting QPI link is in half-width mode", null));
		eventMap.put("UNC_Q_TxL_FLITS_G0.DATA", new PMUEvent(null, null, "0,1,2,3", "0x2", "UNC_Q_TxL_FLITS_G0.DATA", null, "Number of data flits transmitted ", null));
		eventMap.put("UNC_Q_TxL_FLITS_G0.NON_DATA", new PMUEvent(null, null, "0,1,2,3", "0x4", "UNC_Q_TxL_FLITS_G0.NON_DATA", null, "Number of non data (control) flits transmitted ", null));
		eventMap.put("UNC_M_ACT_COUNT", new PMUEvent(null, "0x1", "0,1,2,3", null, "UNC_M_ACT_COUNT", null, "Memory page activates", null));
		eventMap.put("LLC_MISSES.MEM_READ", new PMUEvent(null, "0x4", "0,1,2,3", "0x3", "LLC_MISSES.MEM_READ", null, "read requests to memory controller. Derived from unc_m_cas_count.rd", null));
		eventMap.put("LLC_MISSES.MEM_WRITE", new PMUEvent(null, "0x4", "0,1,2,3", "0xc", "LLC_MISSES.MEM_WRITE", null, "write requests to memory controller. Derived from unc_m_cas_count.wr", null));
		eventMap.put("UNC_M_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_M_CLOCKTICKS", null, "Memory controller clock ticks. Used to get percentages of memory controller cycles events", null));
		eventMap.put("UNC_M_POWER_CHANNEL_PPD", new PMUEvent(null, "0x85", "0,1,2,3", null, "UNC_M_POWER_CHANNEL_PPD", null, "Cycles where DRAM ranks are in power down (CKE) mode", null));
		eventMap.put("UNC_M_POWER_CRITICAL_THROTTLE_CYCLES", new PMUEvent(null, "0x86", "0,1,2,3", null, "UNC_M_POWER_CRITICAL_THROTTLE_CYCLES", null, "Cycles all ranks are in critical thermal throttle", null));
		eventMap.put("UNC_M_POWER_SELF_REFRESH", new PMUEvent(null, "0x43", "0,1,2,3", null, "UNC_M_POWER_SELF_REFRESH", null, "Cycles Memory is in self refresh power mode", null));
		eventMap.put("UNC_M_PRE_COUNT.PAGE_MISS", new PMUEvent(null, "0x2", "0,1,2,3", "0x1", "UNC_M_PRE_COUNT.PAGE_MISS", null, "Memory page conflicts", null));
		eventMap.put("UNC_M_RPQ_OCCUPANCY", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_M_RPQ_OCCUPANCY", null, "Occupancy counter for memory read queue", null));
		eventMap.put("UNC_P_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_P_CLOCKTICKS", null, "PCU clock ticks. Use to get percentages of PCU cycles events", null));
		eventMap.put("UNC_P_FREQ_BAND0_CYCLES", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_BAND0_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band0=XXX with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND1_CYCLES", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_BAND1_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band1=XXX with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND2_CYCLES", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_BAND2_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band2=XXX with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND3_CYCLES", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_BAND3_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band3=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND0_TRANSITIONS", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_BAND0_TRANSITIONS", null, "Counts the number of times that the uncore transitioned a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band0=XXX with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band0_cycles", null));
		eventMap.put("UNC_P_FREQ_BAND1_TRANSITIONS", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_BAND1_TRANSITIONS", null, "Counts the number of times that the uncore transistioned to a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band1=XXX with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band1_cycles", null));
		eventMap.put("UNC_P_FREQ_BAND2_TRANSITIONS", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_BAND2_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band2=XXX with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band2_cycles", null));
		eventMap.put("UNC_P_FREQ_BAND3_TRANSITIONS", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_BAND3_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band3=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band3_cycles", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C0", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C0", null, "This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C3", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C3", null, "This is an occupancy event that tracks the number of cores that are in C3.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C6", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C6", null, "This is an occupancy event that tracks the number of cores that are in C6.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events ", null));
		eventMap.put("UNC_P_PROCHOT_EXTERNAL_CYCLES", new PMUEvent(null, "0xa", "0,1,2,3", null, "UNC_P_PROCHOT_EXTERNAL_CYCLES", null, "Counts the number of cycles that we are in external PROCHOT mode.  This mode is triggered when a sensor off the die determines that something off-die (like DRAM) is too hot and must throttle to avoid damaging the chip", null));
		eventMap.put("UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES", new PMUEvent(null, "0x4", "0,1,2,3", null, "UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES", null, "Counts the number of cycles when temperature is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_OS_CYCLES", new PMUEvent(null, "0x6", "0,1,2,3", null, "UNC_P_FREQ_MAX_OS_CYCLES", null, "Counts the number of cycles when the OS is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_POWER_CYCLES", new PMUEvent(null, "0x5", "0,1,2,3", null, "UNC_P_FREQ_MAX_POWER_CYCLES", null, "Counts the number of cycles when power is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_CURRENT_CYCLES", new PMUEvent(null, "0x7", "0,1,2,3", null, "UNC_P_FREQ_MAX_CURRENT_CYCLES", null, "Counts the number of cycles when current is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_TRANS_CYCLES", new PMUEvent(null, null, "0,1,2,3", null, "UNC_P_FREQ_TRANS_CYCLES", null, "Cycles spent changing Frequency", null));
		eventMap.put("UNC_P_FREQ_GE_1200MHZ_CYCLES", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_GE_1200MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 1.2Ghz. Derived from unc_p_freq_band0_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_2000MHZ_CYCLES", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_GE_2000MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 2Ghz. Derived from unc_p_freq_band1_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_3000MHZ_CYCLES", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_GE_3000MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 3Ghz. Derived from unc_p_freq_band2_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_4000MHZ_CYCLES", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_GE_4000MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 4Ghz. Derived from unc_p_freq_band3_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_1200MHZ_TRANSITIONS", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_GE_1200MHZ_TRANSITIONS", null, "Counts the number of times that the uncore transitioned to a frequency greater than or equal to 1.2Ghz. Derived from unc_p_freq_band0_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_2000MHZ_TRANSITIONS", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_GE_2000MHZ_TRANSITIONS", null, "Counts the number of times that the uncore transitioned to a frequency greater than or equal to 2Ghz. Derived from unc_p_freq_band1_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_3000MHZ_TRANSITIONS", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_GE_3000MHZ_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to 3Ghz. Derived from unc_p_freq_band2_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_4000MHZ_TRANSITIONS", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_GE_4000MHZ_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to 4Ghz. Derived from unc_p_freq_band3_cycles", null));
		eventMap.put("ITLB.ITLB_FLUSH", new PMUEvent(null, "0xAE", "0,1,2,3", "0x1", "ITLB.ITLB_FLUSH", "100007", "Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EPT.WALK_CYCLES", new PMUEvent(null, "0x4F", "0,1,2,3", "0x10", "EPT.WALK_CYCLES", "2000003", "Cycle count for an Extended Page table walk.  The Extended Page Directory cache is used by Virtual Machine operating systems while the guest operating systems use the standard TLB caches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.MISS_CAUSES_A_WALK", new PMUEvent(null, "0x85", "0,1,2,3", "0x1", "ITLB_MISSES.MISS_CAUSES_A_WALK", "100003", "Misses at all ITLB levels that cause page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x85", "0,1,2,3", "0x2", "ITLB_MISSES.WALK_COMPLETED", "100003", "Misses in all ITLB levels that cause completed page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_DURATION", new PMUEvent("This event count cycles when Page Miss Handler (PMH) is servicing page walks caused by ITLB misses.", "0x85", "0,1,2,3", "0x4", "ITLB_MISSES.WALK_DURATION", "2000003", "Cycles when PMH is busy with page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT", new PMUEvent(null, "0x85", "0,1,2,3", "0x10", "ITLB_MISSES.STLB_HIT", "100003", "Operations that miss the first ITLB level but hit the second and do not cause any page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", new PMUEvent(null, "0x08", "0,1,2,3", "0x1", "DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", "100003", "Load misses in all DTLB levels that cause page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x08", "0,1,2,3", "0x2", "DTLB_LOAD_MISSES.WALK_COMPLETED", "100003", "Load misses at all DTLB levels that cause completed page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_DURATION", new PMUEvent("This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by DTLB load misses.", "0x08", "0,1,2,3", "0x4", "DTLB_LOAD_MISSES.WALK_DURATION", "2000003", "Cycles when PMH is busy with page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT", new PMUEvent("This event counts load operations that miss the first DTLB level but hit the second and do not cause any page walks. The penalty in this case is approximately 7 cycles.", "0x08", "0,1,2,3", "0x10", "DTLB_LOAD_MISSES.STLB_HIT", "100003", "Load operations that miss the first DTLB level but hit the second and do not cause page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", new PMUEvent(null, "0x49", "0,1,2,3", "0x1", "DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", "100003", "Store misses in all DTLB levels that cause page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x49", "0,1,2,3", "0x2", "DTLB_STORE_MISSES.WALK_COMPLETED", "100003", "Store misses in all DTLB levels that cause completed page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_DURATION", new PMUEvent(null, "0x49", "0,1,2,3", "0x4", "DTLB_STORE_MISSES.WALK_DURATION", "2000003", "Cycles when PMH is busy with page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT", new PMUEvent(null, "0x49", "0,1,2,3", "0x10", "DTLB_STORE_MISSES.STLB_HIT", "100003", "Store operations that miss the first TLB level but hit the second and do not cause page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.DTLB_THREAD", new PMUEvent(null, "0xBD", "0,1,2,3", "0x1", "TLB_FLUSH.DTLB_THREAD", "100007", "DTLB flush attempts of the thread-specific entries.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.STLB_ANY", new PMUEvent(null, "0xBD", "0,1,2,3", "0x20", "TLB_FLUSH.STLB_ANY", "100007", "STLB flush attempts.", "0,1,2,3,4,5,6,7"));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}