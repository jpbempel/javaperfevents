/*
 * Copyright 2019 Jean-Philippe Bempel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Skylakex implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Skylakex());
    }

    {
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_MISS", new PMUEvent("Counts the number of demand Data Read requests that miss L2 cache. Only not rejected loads are counted.", "0x24", "0,1,2,3", "0x21", "L2_RQSTS.DEMAND_DATA_RD_MISS", "200003", "Demand Data Read miss L2, no rejects", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_MISS", new PMUEvent("Counts the RFO (Read-for-Ownership) requests that miss L2 cache.", "0x24", "0,1,2,3", "0x22", "L2_RQSTS.RFO_MISS", "200003", "RFO requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_MISS", new PMUEvent("Counts L2 cache misses when fetching instructions.", "0x24", "0,1,2,3", "0x24", "L2_RQSTS.CODE_RD_MISS", "200003", "L2 cache misses when fetching instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_MISS", new PMUEvent("Demand requests that miss L2 cache.", "0x24", "0,1,2,3", "0x27", "L2_RQSTS.ALL_DEMAND_MISS", "200003", "Demand requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.PF_MISS", new PMUEvent("Counts requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that miss L2 cache.", "0x24", "0,1,2,3", "0x38", "L2_RQSTS.PF_MISS", "200003", "Requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.MISS", new PMUEvent("All requests that miss L2 cache.", "0x24", "0,1,2,3", "0x3f", "L2_RQSTS.MISS", "200003", "All requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_HIT", new PMUEvent("Counts the number of demand Data Read requests that hit L2 cache. Only non rejected loads are counted.", "0x24", "0,1,2,3", "0x41", "L2_RQSTS.DEMAND_DATA_RD_HIT", "200003", "Demand Data Read requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_HIT", new PMUEvent("Counts the RFO (Read-for-Ownership) requests that hit L2 cache.", "0x24", "0,1,2,3", "0x42", "L2_RQSTS.RFO_HIT", "200003", "RFO requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_HIT", new PMUEvent("Counts L2 cache hits when fetching instructions, code reads.", "0x24", "0,1,2,3", "0x44", "L2_RQSTS.CODE_RD_HIT", "200003", "L2 cache hits when fetching instructions, code reads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.PF_HIT", new PMUEvent("Counts requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that hit L2 cache.", "0x24", "0,1,2,3", "0xd8", "L2_RQSTS.PF_HIT", "200003", "Requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_DATA_RD", new PMUEvent("Counts the number of demand Data Read requests (including requests from L1D hardware prefetchers). These loads may hit or miss L2 cache. Only non rejected loads are counted.", "0x24", "0,1,2,3", "0xe1", "L2_RQSTS.ALL_DEMAND_DATA_RD", "200003", "Demand Data Read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_RFO", new PMUEvent("Counts the total number of RFO (read for ownership) requests to L2 cache. L2 RFO requests include both L1D demand RFO misses as well as L1D RFO prefetches.", "0x24", "0,1,2,3", "0xe2", "L2_RQSTS.ALL_RFO", "200003", "RFO requests to L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_CODE_RD", new PMUEvent("Counts the total number of L2 code requests.", "0x24", "0,1,2,3", "0xe4", "L2_RQSTS.ALL_CODE_RD", "200003", "L2 code requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_REFERENCES", new PMUEvent("Demand requests to L2 cache.", "0x24", "0,1,2,3", "0xe7", "L2_RQSTS.ALL_DEMAND_REFERENCES", "200003", "Demand requests to L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_PF", new PMUEvent("Counts the total number of requests from the L2 hardware prefetchers.", "0x24", "0,1,2,3", "0xf8", "L2_RQSTS.ALL_PF", "200003", "Requests from the L1/L2/L3 hardware prefetchers or Load software prefetches", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.REFERENCES", new PMUEvent("All L2 requests.", "0x24", "0,1,2,3", "0xff", "L2_RQSTS.REFERENCES", "200003", "All L2 requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.MISS", new PMUEvent("Counts core-originated cacheable requests that miss the L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches from L1 and L2. It does not include all misses to the L3.", "0x2E", "0,1,2,3", "0x41", "LONGEST_LAT_CACHE.MISS", "100003", "Core-originated cacheable demand requests missed L3", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.REFERENCE", new PMUEvent("Counts core-originated cacheable requests to the L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches from L1 and L2.  It does not include all accesses to the L3.", "0x2E", "0,1,2,3", "0x4f", "LONGEST_LAT_CACHE.REFERENCE", "100003", "Core-originated cacheable demand requests that refer to L3", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING", new PMUEvent("Counts duration of L1D miss outstanding, that is each cycle number of Fill Buffers (FB) outstanding required by Demand Reads. FB either is held by demand loads, or it is held by non-demand loads and gets hit at least once by demand. The valid outstanding interval is defined until the FB deallocation by one of the following ways: from FB allocation, if FB is allocated by demand from the demand Hit FB, if it is allocated by hardware or software prefetch.Note: In the L1D, a Demand Read contains cacheable or noncacheable demand loads, including ones causing cache-line splits and reads due to page walks resulted from any request type.", "0x48", "0,1,2,3", "0x1", "L1D_PEND_MISS.PENDING", "2000003", "L1D miss outstandings duration in cycles", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES", new PMUEvent("Counts duration of L1D miss outstanding in cycles.", "0x48", "0,1,2,3", "0x1", "L1D_PEND_MISS.PENDING_CYCLES", "2000003", "Cycles with L1D load Misses outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES_ANY", new PMUEvent(null, "0x48", "0,1,2,3", "0x1", "L1D_PEND_MISS.PENDING_CYCLES_ANY", "2000003", "Cycles with L1D load Misses outstanding from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.FB_FULL", new PMUEvent("Number of times a request needed a FB (Fill Buffer) entry but there was no entry available for it. A request includes cacheable/uncacheable demands that are load, store or SW prefetch instructions.", "0x48", "0,1,2,3", "0x2", "L1D_PEND_MISS.FB_FULL", "2000003", "Number of times a request needed a FB entry but there was no entry available for it. That is the FB unavailability was dominant reason for blocking the request. A request includes cacheable/uncacheable demands that is load, store or SW prefetch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D.REPLACEMENT", new PMUEvent("Counts L1D data line replacements including opportunistic replacements, and replacements that require stall-for-replace or block-for-replace.", "0x51", "0,1,2,3", "0x1", "L1D.REPLACEMENT", "2000003", "L1D data line replacements", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", new PMUEvent("Counts the number of offcore outstanding Demand Data Read transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor. See the corresponding Umask under OFFCORE_REQUESTS.Note: A prefetch promoted to Demand is counted from the promotion point.", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", "2000003", "Offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", new PMUEvent("Counts cycles when offcore outstanding Demand Data Read transactions are present in the super queue (SQ). A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation).", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", "2000003", "Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", new PMUEvent(null, "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", "2000003", "Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", new PMUEvent("Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x2", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", "2000003", "Offcore outstanding Code Reads transactions in the SuperQueue (SQ), queue to uncore, every cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_CODE_RD", new PMUEvent("Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x2", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_CODE_RD", "2000003", "Cycles with offcore outstanding Code Reads transactions in the SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", new PMUEvent("Counts the number of offcore outstanding RFO (store) transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", "2000003", "Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", new PMUEvent("Counts the number of offcore outstanding demand rfo Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", "2000003", "Cycles with offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", new PMUEvent("Counts the number of offcore outstanding cacheable Core Data Read transactions in the super queue every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", "2000003", "Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", new PMUEvent("Counts cycles when offcore outstanding cacheable Core Data Read transactions are present in the super queue. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", "2000003", "Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_DATA_RD", new PMUEvent("Counts the Demand Data Read requests sent to uncore. Use it in conjunction with OFFCORE_REQUESTS_OUTSTANDING to determine average latency in the uncore.", "0xB0", "0,1,2,3", "0x1", "OFFCORE_REQUESTS.DEMAND_DATA_RD", "100003", "Demand Data Read requests sent to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_CODE_RD", new PMUEvent("Counts both cacheable and non-cacheable code read requests.", "0xB0", "0,1,2,3", "0x2", "OFFCORE_REQUESTS.DEMAND_CODE_RD", "100003", "Cacheable and noncachaeble code read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_RFO", new PMUEvent("Counts the demand RFO (read for ownership) requests including regular RFOs, locks, ItoM.", "0xB0", "0,1,2,3", "0x4", "OFFCORE_REQUESTS.DEMAND_RFO", "100003", "Demand RFO requests including regular RFOs, locks, ItoM", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.ALL_DATA_RD", new PMUEvent("Counts the demand and prefetch data reads. All Core Data Reads include cacheable 'Demands' and L2 prefetchers (not L3 prefetchers). Counting also covers reads due to page walks resulted from any request type.", "0xB0", "0,1,2,3", "0x8", "OFFCORE_REQUESTS.ALL_DATA_RD", "100003", "Demand and prefetch data reads", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.ALL_REQUESTS", new PMUEvent("Counts memory transactions reached the super queue including requests initiated by the core, all L3 prefetches, page walks, etc..", "0xB0", "0,1,2,3", "0x80", "OFFCORE_REQUESTS.ALL_REQUESTS", "100003", "Any memory transaction that reached the SQ.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_BUFFER.SQ_FULL", new PMUEvent("Counts the number of cases when the offcore requests buffer cannot take more entries for the core. This can happen when the superqueue does not contain eligible entries, or when L1D writeback pending FIFO requests is full.Note: Writeback pending FIFO has six entries.", "0xB2", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_BUFFER.SQ_FULL", "2000003", "Offcore requests buffer cannot take more entries for this thread core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE", new PMUEvent("Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE", "100003", "Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction", "0,1,2,3"));
		eventMap.put("MEM_INST_RETIRED.STLB_MISS_LOADS", new PMUEvent("Retired load instructions that miss the STLB.", "0xD0", "0,1,2,3", "0x11", "MEM_INST_RETIRED.STLB_MISS_LOADS", "100003", "Retired load instructions that miss the STLB. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_INST_RETIRED.STLB_MISS_STORES", new PMUEvent("Retired store instructions that miss the STLB.", "0xD0", "0,1,2,3", "0x12", "MEM_INST_RETIRED.STLB_MISS_STORES", "100003", "Retired store instructions that miss the STLB. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_INST_RETIRED.LOCK_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x21", "MEM_INST_RETIRED.LOCK_LOADS", "100007", "Retired load instructions with locked access. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_INST_RETIRED.SPLIT_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x41", "MEM_INST_RETIRED.SPLIT_LOADS", "100003", "Retired load instructions that split across a cacheline boundary. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_INST_RETIRED.SPLIT_STORES", new PMUEvent(null, "0xD0", "0,1,2,3", "0x42", "MEM_INST_RETIRED.SPLIT_STORES", "100003", "Retired store instructions that split across a cacheline boundary. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_INST_RETIRED.ALL_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x81", "MEM_INST_RETIRED.ALL_LOADS", "2000003", "All retired load instructions. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_INST_RETIRED.ALL_STORES", new PMUEvent("All retired store instructions.", "0xD0", "0,1,2,3", "0x82", "MEM_INST_RETIRED.ALL_STORES", "2000003", "All retired store instructions. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_RETIRED.L1_HIT", new PMUEvent("Counts retired load instructions with at least one uop that hit in the L1 data cache. This event includes all SW prefetches and lock instructions regardless of the data source.", "0xD1", "0,1,2,3", "0x1", "MEM_LOAD_RETIRED.L1_HIT", "2000003", "Retired load instructions with L1 cache hits as data sources", "0,1,2,3"));
		eventMap.put("MEM_LOAD_RETIRED.L2_HIT", new PMUEvent("Retired load instructions with L2 cache hits as data sources.", "0xD1", "0,1,2,3", "0x2", "MEM_LOAD_RETIRED.L2_HIT", "100003", "Retired load instructions with L2 cache hits as data sources", "0,1,2,3"));
		eventMap.put("MEM_LOAD_RETIRED.L3_HIT", new PMUEvent("Retired load instructions with L3 cache hits as data sources.", "0xD1", "0,1,2,3", "0x4", "MEM_LOAD_RETIRED.L3_HIT", "50021", "Retired load instructions with L3 cache hits as data sources", "0,1,2,3"));
		eventMap.put("MEM_LOAD_RETIRED.L1_MISS", new PMUEvent("Counts retired load instructions with at least one uop that missed in the L1 cache.", "0xD1", "0,1,2,3", "0x8", "MEM_LOAD_RETIRED.L1_MISS", "100003", "Retired load instructions missed L1 cache as data sources", "0,1,2,3"));
		eventMap.put("MEM_LOAD_RETIRED.L2_MISS", new PMUEvent("Retired load instructions missed L2 cache as data sources.", "0xD1", "0,1,2,3", "0x10", "MEM_LOAD_RETIRED.L2_MISS", "50021", "Retired load instructions missed L2 cache as data sources", "0,1,2,3"));
		eventMap.put("MEM_LOAD_RETIRED.L3_MISS", new PMUEvent("Retired load instructions missed L3 cache as data sources.", "0xD1", "0,1,2,3", "0x20", "MEM_LOAD_RETIRED.L3_MISS", "100007", "Retired load instructions missed L3 cache as data sources", "0,1,2,3"));
		eventMap.put("MEM_LOAD_RETIRED.FB_HIT", new PMUEvent("Counts retired load instructions with at least one uop was load missed in L1 but hit FB (Fill Buffers) due to preceding miss to the same cache line with data not ready. ", "0xD1", "0,1,2,3", "0x40", "MEM_LOAD_RETIRED.FB_HIT", "100007", "Retired load instructions which data sources were load missed L1 but hit FB due to preceding miss to the same cache line with data not ready", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_HIT_RETIRED.XSNP_MISS", new PMUEvent(null, "0xD2", "0,1,2,3", "0x1", "MEM_LOAD_L3_HIT_RETIRED.XSNP_MISS", "20011", "Retired load instructions which data sources were L3 hit and cross-core snoop missed in on-pkg core cache.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_HIT_RETIRED.XSNP_HIT", new PMUEvent("Retired load instructions which data sources were L3 and cross-core snoop hits in on-pkg core cache.", "0xD2", "0,1,2,3", "0x2", "MEM_LOAD_L3_HIT_RETIRED.XSNP_HIT", "20011", "Retired load instructions which data sources were L3 and cross-core snoop hits in on-pkg core cache", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_HIT_RETIRED.XSNP_HITM", new PMUEvent("Retired load instructions which data sources were HitM responses from shared L3.", "0xD2", "0,1,2,3", "0x4", "MEM_LOAD_L3_HIT_RETIRED.XSNP_HITM", "20011", "Retired load instructions which data sources were HitM responses from shared L3", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_HIT_RETIRED.XSNP_NONE", new PMUEvent("Retired load instructions which data sources were hits in L3 without snoops required.", "0xD2", "0,1,2,3", "0x8", "MEM_LOAD_L3_HIT_RETIRED.XSNP_NONE", "100003", "Retired load instructions which data sources were hits in L3 without snoops required", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_MISS_RETIRED.LOCAL_DRAM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x1", "MEM_LOAD_L3_MISS_RETIRED.LOCAL_DRAM", "100007", "Retired load instructions which data sources missed L3 but serviced from local dram", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_MISS_RETIRED.REMOTE_DRAM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x2", "MEM_LOAD_L3_MISS_RETIRED.REMOTE_DRAM", "100007", "Retired load instructions which data sources missed L3 but serviced from remote dram", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_MISS_RETIRED.REMOTE_HITM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x4", "MEM_LOAD_L3_MISS_RETIRED.REMOTE_HITM", "100007", "Retired load instructions whose data sources was remote HITM", "0,1,2,3"));
		eventMap.put("MEM_LOAD_L3_MISS_RETIRED.REMOTE_FWD", new PMUEvent(null, "0xD3", "0,1,2,3", "0x8", "MEM_LOAD_L3_MISS_RETIRED.REMOTE_FWD", "100007", "Retired load instructions whose data sources was forwarded from a remote cache", "0,1,2,3"));
		eventMap.put("MEM_LOAD_MISC_RETIRED.UC", new PMUEvent(null, "0xD4", "0,1,2,3", "0x4", "MEM_LOAD_MISC_RETIRED.UC", "100007", "Retired instructions with at least 1 uncacheable load or lock.", "0,1,2,3"));
		eventMap.put("L2_TRANS.L2_WB", new PMUEvent("Counts L2 writebacks that access L2 cache.", "0xF0", "0,1,2,3", "0x40", "L2_TRANS.L2_WB", "200003", "L2 writebacks that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.ALL", new PMUEvent("Counts the number of L2 cache lines filling the L2. Counting does not cover rejects.", "0xF1", "0,1,2,3", "0x1f", "L2_LINES_IN.ALL", "100003", "L2 cache lines filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.SILENT", new PMUEvent(null, "0xF2", "0,1,2,3", "0x1", "L2_LINES_OUT.SILENT", "200003", "Counts the number of lines that are silently dropped by L2 cache when triggered by an L2 cache fill. These lines are typically in Shared state. A non-threaded event.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.NON_SILENT", new PMUEvent("Counts the number of lines that are evicted by L2 cache when triggered by an L2 cache fill. Those lines can be either in modified state or clean state. Modified lines may either be written back to L3 or directly written to memory and not allocated in L3.  Clean lines may either be allocated in L3 or dropped.", "0xF2", "0,1,2,3", "0x2", "L2_LINES_OUT.NON_SILENT", "200003", "Counts the number of lines that are evicted by L2 cache when triggered by an L2 cache fill. Those lines can be either in modified state or clean state. Modified lines may either be written back to L3 or directly written to memory and not allocated in L3.  Clean lines may either be allocated in L3 or dropped", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.USELESS_PREF", new PMUEvent("Counts the number of lines that have been hardware prefetched but not used and now evicted by L2 cache.", "0xF2", "0,1,2,3", "0x4", "L2_LINES_OUT.USELESS_PREF", "200003", "Counts the number of lines that have been hardware prefetched but not used and now evicted by L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.USELESS_HWPF", new PMUEvent(null, "0xF2", "0,1,2,3", "0x4", "L2_LINES_OUT.USELESS_HWPF", "200003", "Counts the number of lines that have been hardware prefetched but not used and now evicted by L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("SQ_MISC.SPLIT_LOCK", new PMUEvent("Counts the number of cache line split locks sent to the uncore.", "0xF4", "0,1,2,3", "0x10", "SQ_MISC.SPLIT_LOCK", "100003", "Number of cache line split locks sent to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts demand data reads that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", "100003", "Counts demand data reads that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts demand data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts demand data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "DEMAND_DATA_RD & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.ANY_SNOOP", new PMUEvent("Counts demand data reads that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.ANY_SNOOP", "100003", "Counts demand data reads that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", new PMUEvent("Counts all demand data writes (RFOs) that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", "100003", "Counts all demand data writes (RFOs) that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all demand data writes (RFOs) that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all demand data writes (RFOs) that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "DEMAND_RFO & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all demand data writes (RFOs) that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.ANY_SNOOP", "100003", "Counts all demand data writes (RFOs) that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", new PMUEvent("Counts all demand code reads that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", "100003", "Counts all demand code reads that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all demand code reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all demand code reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "DEMAND_CODE_RD & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all demand code reads that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.ANY_SNOOP", "100003", "Counts all demand code reads that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts prefetch (that bring data to L2) data reads that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to L2) data reads that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts prefetch (that bring data to L2) data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts prefetch (that bring data to L2) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "PF_L2_DATA_RD & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts prefetch (that bring data to L2) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.ANY_SNOOP", new PMUEvent("Counts prefetch (that bring data to L2) data reads that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.ANY_SNOOP", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to L2) RFOs that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "PF_L2_RFO & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all prefetch (that bring data to L2) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.ANY_SNOOP", "100003", "Counts all prefetch (that bring data to L2) RFOs that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) data reads that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "PF_L3_DATA_RD & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.ANY_SNOOP", "100003", "Counts all prefetch (that bring data to LLC only) data reads that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "PF_L3_RFO & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.ANY_SNOOP", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.ANY_RESPONSE", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.ANY_RESPONSE", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "PF_L1D_AND_SW & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.HITM_OTHER_CORE", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.ANY_SNOOP", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_HIT.ANY_SNOOP", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.ANY_RESPONSE", new PMUEvent("Counts any other requests that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.ANY_RESPONSE", "100003", "Counts any other requests that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts any other requests that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts any other requests that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts any other requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts any other requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "OTHER & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts any other requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_HIT.HITM_OTHER_CORE", "100003", "Counts any other requests that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_HIT.ANY_SNOOP", new PMUEvent("Counts any other requests that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_HIT.ANY_SNOOP", "100003", "Counts any other requests that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts all prefetch data reads that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.ANY_RESPONSE", "100003", "Counts all prefetch data reads that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "ALL_PF_DATA_RD & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all prefetch data reads that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_HIT.ANY_SNOOP", "100003", "Counts all prefetch data reads that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.ANY_RESPONSE", new PMUEvent("Counts prefetch RFOs that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.ANY_RESPONSE", "100003", "Counts prefetch RFOs that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "ALL_PF_RFO & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.ANY_SNOOP", new PMUEvent("Counts prefetch RFOs that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_HIT.ANY_SNOOP", "100003", "Counts prefetch RFOs that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts all demand & prefetch data reads that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.ANY_RESPONSE", "100003", "Counts all demand & prefetch data reads that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all demand & prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all demand & prefetch data reads that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "ALL_DATA_RD & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all demand & prefetch data reads that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.ANY_SNOOP", "100003", "Counts all demand & prefetch data reads that hit in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.ANY_RESPONSE", new PMUEvent("Counts all demand & prefetch RFOs that have any response type. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.ANY_RESPONSE", "100003", "Counts all demand & prefetch RFOs that have any response type.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_HIT.NO_SNOOP_NEEDED", new PMUEvent("Counts all demand & prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_HIT.NO_SNOOP_NEEDED", "100003", "Counts all demand & prefetch RFOs that hit in the L3 and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", new PMUEvent("tbd Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_HIT.SNOOP_HIT_WITH_FWD", "100003", "ALL_RFO & L3_HIT & SNOOP_HIT_WITH_FWD", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_HIT.ANY_SNOOP", new PMUEvent("Counts all demand & prefetch RFOs that hit in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_HIT.ANY_SNOOP", "100003", "Counts all demand & prefetch RFOs that hit in the L3.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.SCALAR_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x1", "FP_ARITH_INST_RETIRED.SCALAR_DOUBLE", "2000003", "Number of SSE/AVX computational scalar double precision floating-point instructions retired.  Each count represents 1 computation. Applies to SSE* and AVX* scalar double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.SCALAR_SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x2", "FP_ARITH_INST_RETIRED.SCALAR_SINGLE", "2000003", "Number of SSE/AVX computational scalar single precision floating-point instructions retired.  Each count represents 1 computation. Applies to SSE* and AVX* scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x4", "FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE", "2000003", "Number of SSE/AVX computational 128-bit packed double precision floating-point instructions retired.  Each count represents 2 computations. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x8", "FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE", "2000003", "Number of SSE/AVX computational 128-bit packed single precision floating-point instructions retired.  Each count represents 4 computations. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x10", "FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE", "2000003", "Number of SSE/AVX computational 256-bit packed double precision floating-point instructions retired.  Each count represents 4 computations. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x20", "FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE", "2000003", "Number of SSE/AVX computational 256-bit packed single precision floating-point instructions retired.  Each count represents 8 computations. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE", new PMUEvent("Number of Packed Double-Precision FP arithmetic instructions (Use operation multiplier of 8).", "0xC7", "0,1,2,3", "0x40", "FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE", "2000003", "Number of Packed Double-Precision FP arithmetic instructions (Use operation multiplier of 8)", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE", new PMUEvent("Number of Packed Single-Precision FP arithmetic instructions (Use operation multiplier of 16).", "0xC7", "0,1,2,3", "0x80", "FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE", "2000003", "Number of Packed Single-Precision FP arithmetic instructions (Use operation multiplier of 16)", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.ANY", new PMUEvent("Counts cycles with any input and output SSE or x87 FP assist. If an input and output assist are detected on the same cycle the event increments by 1.", "0xCA", "0,1,2,3", "0x1e", "FP_ASSIST.ANY", "100003", "Cycles with any input/output SSE or FP assist", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_UOPS", new PMUEvent("Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may 'bypass' the IDQ. This also means that uops are not being delivered from the Decode Stream Buffer (DSB).", "0x79", "0,1,2,3", "0x4", "IDQ.MITE_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_CYCLES", new PMUEvent("Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may 'bypass' the IDQ.", "0x79", "0,1,2,3", "0x4", "IDQ.MITE_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_UOPS", new PMUEvent("Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may 'bypass' the IDQ.", "0x79", "0,1,2,3", "0x8", "IDQ.DSB_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_CYCLES", new PMUEvent("Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may 'bypass' the IDQ.", "0x79", "0,1,2,3", "0x8", "IDQ.DSB_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_CYCLES", new PMUEvent("Counts cycles during which uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_CYCLES", "2000003", "Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_4_UOPS", new PMUEvent("Counts the number of cycles 4 uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_4_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_ANY_UOPS", new PMUEvent("Counts the number of cycles uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_ANY_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_MITE_UOPS", new PMUEvent("Counts the number of uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ.", "0x79", "0,1,2,3", "0x20", "IDQ.MS_MITE_UOPS", "2000003", "Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_4_UOPS", new PMUEvent("Counts the number of cycles 4 uops were delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. Counting includes uops that may 'bypass' the IDQ. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB).", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_4_UOPS", "2000003", "Cycles MITE is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_ANY_UOPS", new PMUEvent("Counts the number of cycles uops were delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. Counting includes uops that may 'bypass' the IDQ. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB).", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_ANY_UOPS", "2000003", "Cycles MITE is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_CYCLES", new PMUEvent("Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ. Uops maybe initiated by Decode Stream Buffer (DSB) or MITE.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_SWITCHES", new PMUEvent("Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_SWITCHES", "2000003", "Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_UOPS", new PMUEvent("Counts the total number of uops delivered by the Microcode Sequencer (MS). Any instruction over 4 uops will be delivered by the MS. Some instructions such as transcendentals may additionally generate uops from the MS.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE_16B.IFDATA_STALL", new PMUEvent("Cycles where a code line fetch is stalled due to an L1 instruction cache miss. The legacy decode pipeline works at a 16 Byte granularity.", "0x80", "0,1,2,3", "0x4", "ICACHE_16B.IFDATA_STALL", "2000003", "Cycles where a code fetch is stalled due to L1 instruction cache miss.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE_64B.IFTAG_HIT", new PMUEvent(null, "0x83", "0,1,2,3", "0x1", "ICACHE_64B.IFTAG_HIT", "200003", "Instruction fetch tag lookups that hit in the instruction cache (L1I). Counts at 64-byte cache-line granularity.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE_64B.IFTAG_MISS", new PMUEvent(null, "0x83", "0,1,2,3", "0x2", "ICACHE_64B.IFTAG_MISS", "200003", "Instruction fetch tag lookups that miss in the instruction cache (L1I). Counts at 64-byte cache-line granularity.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE_64B.IFTAG_STALL", new PMUEvent(null, "0x83", "0,1,2,3", "0x4", "ICACHE_64B.IFTAG_STALL", "200003", "Cycles where a code fetch is stalled due to L1 instruction cache tag miss.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CORE", new PMUEvent("Counts the number of uops not delivered to Resource Allocation Table (RAT) per thread adding 4  x when Resource Allocation Table (RAT) is not stalled and Instruction Decode Queue (IDQ) delivers x uops to Resource Allocation Table (RAT) (where x belongs to {0,1,2,3}). Counting does not cover cases when: a. IDQ-Resource Allocation Table (RAT) pipe serves the other thread. b. Resource Allocation Table (RAT) is stalled for the thread (including uop drops and clear BE conditions).  c. Instruction Decode Queue (IDQ) delivers four uops.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CORE", "2000003", "Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", new PMUEvent("Counts, on the per-thread basis, cycles when no uops are delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core =4.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", "2000003", "Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", new PMUEvent("Counts, on the per-thread basis, cycles when less than 1 uop is delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core >= 3.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", "2000003", "Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", new PMUEvent("Cycles with less than 2 uops delivered by the front-end.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", "2000003", "Cycles with less than 2 uops delivered by the front end.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", new PMUEvent("Cycles with less than 3 uops delivered by the front-end.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", "2000003", "Cycles with less than 3 uops delivered by the front end.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", "2000003", "Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DSB2MITE_SWITCHES.PENALTY_CYCLES", new PMUEvent("Counts Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles. These cycles do not include uops routed through because of the switch itself, for example, when Instruction Decode Queue (IDQ) pre-allocation is unavailable, or Instruction Decode Queue (IDQ) is full. SBD-to-MITE switch true penalty cycles happen after the merge mux (MM) receives Decode Stream Buffer (DSB) Sync-indication until receiving the first MITE uop. MM is placed before Instruction Decode Queue (IDQ) to merge uops being fed from the MITE and Decode Stream Buffer (DSB) paths. Decode Stream Buffer (DSB) inserts the Sync-indication whenever a Decode Stream Buffer (DSB)-to-MITE switch occurs.Penalty: A Decode Stream Buffer (DSB) hit followed by a Decode Stream Buffer (DSB) miss can cost up to six cycles in which no uops are delivered to the IDQ. Most often, such switches from the Decode Stream Buffer (DSB) to the legacy pipeline cost 02 cycles.", "0xAB", "0,1,2,3", "0x2", "DSB2MITE_SWITCHES.PENALTY_CYCLES", "2000003", "Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FRONTEND_RETIRED.DSB_MISS", new PMUEvent("Counts retired Instructions that experienced DSB (Decode stream buffer i.e. the decoded instruction-cache) miss. ", "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.DSB_MISS", "100007", "Retired Instructions who experienced decode stream buffer (DSB - the decoded instruction-cache) miss. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.L1I_MISS", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.L1I_MISS", "100007", "Retired Instructions who experienced Instruction L1 Cache true miss. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.L2_MISS", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.L2_MISS", "100007", "Retired Instructions who experienced Instruction L2 Cache true miss. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.ITLB_MISS", new PMUEvent("Counts retired Instructions that experienced iTLB (Instruction TLB) true miss.", "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.ITLB_MISS", "100007", "Retired Instructions who experienced iTLB true miss. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.STLB_MISS", new PMUEvent("Counts retired Instructions that experienced STLB (2nd level TLB) true miss.", "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.STLB_MISS", "100007", "Retired Instructions who experienced STLB (2nd level TLB) true miss. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_2", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_2", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 2 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_2", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_2", "100007", "Retired instructions that are fetched after an interval where the front-end had at least 2 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_4", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_4", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 4 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_8", new PMUEvent("Counts retired instructions that are delivered to the back-end after a front-end stall of at least 8 cycles. During this period the front-end delivered no uops. ", "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_8", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 8 cycles which was not interrupted by a back-end stall.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_16", new PMUEvent("Counts retired instructions that are delivered to the back-end after a front-end stall of at least 16 cycles. During this period the front-end delivered no uops.", "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_16", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 16 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_32", new PMUEvent("Counts retired instructions that are delivered to the back-end  after a front-end stall of at least 32 cycles. During this period the front-end delivered no uops.", "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_32", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 32 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_64", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_64", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 64 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_128", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_128", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 128 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_256", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_256", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 256 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_512", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_512", "100007", "Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 512 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_1", new PMUEvent("Counts retired instructions that are delivered to the back-end after the front-end had at least 1 bubble-slot for a period of 2 cycles. A bubble-slot is an empty issue-pipeline slot while there was no RAT stall.", "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_1", "100007", "Retired instructions that are fetched after an interval where the front-end had at least 1 bubble-slot for a period of 2 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_3", new PMUEvent(null, "0xC6", "0,1,2,3", "0x1", "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_3", "100007", "Retired instructions that are fetched after an interval where the front-end had at least 3 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall. Precise Event.", "0,1,2,3"));
		eventMap.put("TX_MEM.ABORT_CONFLICT", new PMUEvent("Number of times a TSX line had a cache conflict.", "0x54", "0,1,2,3", "0x1", "TX_MEM.ABORT_CONFLICT", "2000003", "Number of times a transactional abort was signaled due to a data conflict on a transactionally accessed address", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_CAPACITY", new PMUEvent(null, "0x54", "0,1,2,3", "0x2", "TX_MEM.ABORT_CAPACITY", "2000003", "Number of times a transactional abort was signaled due to a data capacity limitation for transactional reads or writes.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK", new PMUEvent("Number of times a TSX Abort was triggered due to a non-release/commit store to lock.", "0x54", "0,1,2,3", "0x4", "TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK", "2000003", "Number of times a HLE transactional region aborted due to a non XRELEASE prefixed instruction writing to an elided lock in the elision buffer", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY", new PMUEvent("Number of times a TSX Abort was triggered due to commit but Lock Buffer not empty.", "0x54", "0,1,2,3", "0x8", "TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY", "2000003", "Number of times an HLE transactional execution aborted due to NoAllocatedElisionBuffer being non-zero.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH", new PMUEvent("Number of times a TSX Abort was triggered due to release/commit but data and address mismatch.", "0x54", "0,1,2,3", "0x10", "TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH", "2000003", "Number of times an HLE transactional execution aborted due to XRELEASE lock not satisfying the address and value requirements in the elision buffer", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT", new PMUEvent("Number of times a TSX Abort was triggered due to attempting an unsupported alignment from Lock Buffer.", "0x54", "0,1,2,3", "0x20", "TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT", "2000003", "Number of times an HLE transactional execution aborted due to an unsupported read alignment from the elision buffer.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.HLE_ELISION_BUFFER_FULL", new PMUEvent("Number of times we could not allocate Lock Buffer.", "0x54", "0,1,2,3", "0x40", "TX_MEM.HLE_ELISION_BUFFER_FULL", "2000003", "Number of times HLE lock could not be elided due to ElisionBufferAvailable being zero.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC1", new PMUEvent(null, "0x5d", "0,1,2,3", "0x1", "TX_EXEC.MISC1", "2000003", "Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC2", new PMUEvent("Unfriendly TSX abort triggered by a vzeroupper instruction.", "0x5d", "0,1,2,3", "0x2", "TX_EXEC.MISC2", "2000003", "Counts the number of times a class of instructions (e.g., vzeroupper) that may cause a transactional abort was executed inside a transactional region", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC3", new PMUEvent("Unfriendly TSX abort triggered by a nest count that is too deep.", "0x5d", "0,1,2,3", "0x4", "TX_EXEC.MISC3", "2000003", "Counts the number of times an instruction execution caused the transactional nest count supported to be exceeded", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC4", new PMUEvent("RTM region detected inside HLE.", "0x5d", "0,1,2,3", "0x8", "TX_EXEC.MISC4", "2000003", "Counts the number of times a XBEGIN instruction was executed inside an HLE transactional region.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC5", new PMUEvent("Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region.", "0x5d", "0,1,2,3", "0x10", "TX_EXEC.MISC5", "2000003", "Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.L3_MISS_DEMAND_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x10", "OFFCORE_REQUESTS_OUTSTANDING.L3_MISS_DEMAND_DATA_RD", "2000003", "Counts number of Offcore outstanding Demand Data Read requests that miss L3 cache in the superQ every cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_L3_MISS_DEMAND_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x10", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_L3_MISS_DEMAND_DATA_RD", "2000003", "Cycles with at least 1 Demand Data Read requests who miss L3 cache in the superQ.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.L3_MISS_DEMAND_DATA_RD_GE_6", new PMUEvent(null, "0x60", "0,1,2,3", "0x10", "OFFCORE_REQUESTS_OUTSTANDING.L3_MISS_DEMAND_DATA_RD_GE_6", "2000003", "Cycles with at least 6 Demand Data Read requests that miss L3 cache in the superQ.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L3_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x2", "CYCLE_ACTIVITY.CYCLES_L3_MISS", "2000003", "Cycles while L3 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L3_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x6", "CYCLE_ACTIVITY.STALLS_L3_MISS", "2000003", "Execution stalls while L3 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.L3_MISS_DEMAND_DATA_RD", new PMUEvent("Demand Data Read requests who miss L3 cache.", "0xB0", "0,1,2,3", "0x10", "OFFCORE_REQUESTS.L3_MISS_DEMAND_DATA_RD", "100003", "Demand Data Read requests who miss L3 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MEMORY_ORDERING", new PMUEvent("Counts the number of memory ordering Machine Clears detected. Memory Ordering Machine Clears can result from one of the following:a. memory disambiguation,b. external snoop, orc. cross SMT-HW-thread snoop (stores) hitting load buffer.", "0xC3", "0,1,2,3", "0x2", "MACHINE_CLEARS.MEMORY_ORDERING", "100003", "Counts the number of machine clears due to memory order conflicts.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.START", new PMUEvent("Number of times we entered an HLE region. Does not count nested transactions.", "0xC8", "0,1,2,3", "0x1", "HLE_RETIRED.START", "2000003", "Number of times an HLE execution started.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.COMMIT", new PMUEvent("Number of times HLE commit succeeded.", "0xC8", "0,1,2,3", "0x2", "HLE_RETIRED.COMMIT", "2000003", "Number of times an HLE execution successfully committed", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED", new PMUEvent("Number of times HLE abort was triggered. (PEBS)", "0xC8", "0,1,2,3", "0x4", "HLE_RETIRED.ABORTED", "2000003", "Number of times an HLE execution aborted due to any reasons (multiple categories may count as one). ", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MEM", new PMUEvent(null, "0xC8", "0,1,2,3", "0x8", "HLE_RETIRED.ABORTED_MEM", "2000003", "Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts).", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_TIMER", new PMUEvent(null, "0xC8", "0,1,2,3", "0x10", "HLE_RETIRED.ABORTED_TIMER", "2000003", "Number of times an HLE execution aborted due to hardware timer expiration.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_UNFRIENDLY", new PMUEvent(null, "0xC8", "0,1,2,3", "0x20", "HLE_RETIRED.ABORTED_UNFRIENDLY", "2000003", "Number of times an HLE execution aborted due to HLE-unfriendly instructions and certain unfriendly events (such as AD assists etc.).", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MEMTYPE", new PMUEvent("Number of times an HLE execution aborted due to incompatible memory type.", "0xC8", "0,1,2,3", "0x40", "HLE_RETIRED.ABORTED_MEMTYPE", "2000003", "Number of times an HLE execution aborted due to incompatible memory type", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_EVENTS", new PMUEvent(null, "0xC8", "0,1,2,3", "0x80", "HLE_RETIRED.ABORTED_EVENTS", "2000003", "Number of times an HLE execution aborted due to unfriendly events (such as interrupts).", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.START", new PMUEvent("Number of times we entered an RTM region. Does not count nested transactions.", "0xC9", "0,1,2,3", "0x1", "RTM_RETIRED.START", "2000003", "Number of times an RTM execution started.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.COMMIT", new PMUEvent("Number of times RTM commit succeeded.", "0xC9", "0,1,2,3", "0x2", "RTM_RETIRED.COMMIT", "2000003", "Number of times an RTM execution successfully committed", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.ABORTED", new PMUEvent("Number of times RTM abort was triggered. (PEBS)", "0xC9", "0,1,2,3", "0x4", "RTM_RETIRED.ABORTED", "2000003", "Number of times an RTM execution aborted due to any reasons (multiple categories may count as one). ", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.ABORTED_MEM", new PMUEvent("Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts).", "0xC9", "0,1,2,3", "0x8", "RTM_RETIRED.ABORTED_MEM", "2000003", "Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts)", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.ABORTED_TIMER", new PMUEvent(null, "0xC9", "0,1,2,3", "0x10", "RTM_RETIRED.ABORTED_TIMER", "2000003", "Number of times an RTM execution aborted due to uncommon conditions.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.ABORTED_UNFRIENDLY", new PMUEvent("Number of times an RTM execution aborted due to HLE-unfriendly instructions.", "0xC9", "0,1,2,3", "0x20", "RTM_RETIRED.ABORTED_UNFRIENDLY", "2000003", "Number of times an RTM execution aborted due to HLE-unfriendly instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.ABORTED_MEMTYPE", new PMUEvent("Number of times an RTM execution aborted due to incompatible memory type.", "0xC9", "0,1,2,3", "0x40", "RTM_RETIRED.ABORTED_MEMTYPE", "2000003", "Number of times an RTM execution aborted due to incompatible memory type", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.ABORTED_EVENTS", new PMUEvent("Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt).", "0xC9", "0,1,2,3", "0x80", "RTM_RETIRED.ABORTED_EVENTS", "2000003", "Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt)", "0,1,2,3,4,5,6,7"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 4 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", "100003", "Counts loads when the latency from first dispatch to completion is greater than 4 cycles.", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 8 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", "50021", "Counts loads when the latency from first dispatch to completion is greater than 8 cycles.", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 16 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", "20011", "Counts loads when the latency from first dispatch to completion is greater than 16 cycles.", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 32 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", "100007", "Counts loads when the latency from first dispatch to completion is greater than 32 cycles.", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 64 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", "2003", "Counts loads when the latency from first dispatch to completion is greater than 64 cycles.", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 128 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", "1009", "Counts loads when the latency from first dispatch to completion is greater than 128 cycles.", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 256 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", "503", "Counts loads when the latency from first dispatch to completion is greater than 256 cycles.", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", new PMUEvent("Counts loads when the latency from first dispatch to completion is greater than 512 cycles.  Reported latency may be longer than just the memory latency.", "0xCD", "0,1,2,3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", "101", "Counts loads when the latency from first dispatch to completion is greater than 512 cycles.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.ANY_SNOOP", new PMUEvent("Counts demand data reads that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.ANY_SNOOP", "100003", "Counts demand data reads that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts demand data reads that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts demand data reads that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.REMOTE_HITM", new PMUEvent("Counts demand data reads that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.REMOTE_HITM", "100003", "Counts demand data reads that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts demand data reads that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts demand data reads that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts demand data reads that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts demand data reads that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts demand data reads that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts demand data reads that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all demand data writes (RFOs) that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.ANY_SNOOP", "100003", "Counts all demand data writes (RFOs) that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all demand data writes (RFOs) that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all demand data writes (RFOs) that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all demand data writes (RFOs) that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.REMOTE_HITM", "100003", "Counts all demand data writes (RFOs) that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand data writes (RFOs) that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand data writes (RFOs) that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all demand code reads that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.ANY_SNOOP", "100003", "Counts all demand code reads that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all demand code reads that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all demand code reads that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all demand code reads that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.REMOTE_HITM", "100003", "Counts all demand code reads that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand code reads that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand code reads that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand code reads that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand code reads that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand code reads that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand code reads that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.ANY_SNOOP", new PMUEvent("Counts prefetch (that bring data to L2) data reads that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.ANY_SNOOP", "100003", "Counts prefetch (that bring data to L2) data reads that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts prefetch (that bring data to L2) data reads that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts prefetch (that bring data to L2) data reads that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.REMOTE_HITM", new PMUEvent("Counts prefetch (that bring data to L2) data reads that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.REMOTE_HITM", "100003", "Counts prefetch (that bring data to L2) data reads that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts prefetch (that bring data to L2) data reads that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.ANY_SNOOP", "100003", "Counts all prefetch (that bring data to L2) RFOs that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all prefetch (that bring data to L2) RFOs that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.REMOTE_HITM", "100003", "Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to L2) RFOs that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.ANY_SNOOP", "100003", "Counts all prefetch (that bring data to LLC only) data reads that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.REMOTE_HITM", "100003", "Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) data reads that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.ANY_SNOOP", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.REMOTE_HITM", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch (that bring data to LLC only) RFOs that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.ANY_SNOOP", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.ANY_SNOOP", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.REMOTE_HITM", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.REMOTE_HITM", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1D_AND_SW.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts L1 data cache hardware prefetch requests and software prefetch requests that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_MISS.ANY_SNOOP", new PMUEvent("Counts any other requests that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_MISS.ANY_SNOOP", "100003", "Counts any other requests that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts any other requests that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts any other requests that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_MISS.REMOTE_HITM", new PMUEvent("Counts any other requests that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_MISS.REMOTE_HITM", "100003", "Counts any other requests that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts any other requests that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts any other requests that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts any other requests that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts any other requests that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts any other requests that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts any other requests that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all prefetch data reads that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.ANY_SNOOP", "100003", "Counts all prefetch data reads that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all prefetch data reads that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all prefetch data reads that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all prefetch data reads that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.REMOTE_HITM", "100003", "Counts all prefetch data reads that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch data reads that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch data reads that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch data reads that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch data reads that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all prefetch data reads that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all prefetch data reads that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.ANY_SNOOP", new PMUEvent("Counts prefetch RFOs that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.ANY_SNOOP", "100003", "Counts prefetch RFOs that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts prefetch RFOs that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts prefetch RFOs that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.REMOTE_HITM", new PMUEvent("Counts prefetch RFOs that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.REMOTE_HITM", "100003", "Counts prefetch RFOs that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts prefetch RFOs that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts prefetch RFOs that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts prefetch RFOs that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts prefetch RFOs that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts prefetch RFOs that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts prefetch RFOs that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all demand & prefetch data reads that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.ANY_SNOOP", "100003", "Counts all demand & prefetch data reads that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all demand & prefetch data reads that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all demand & prefetch data reads that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all demand & prefetch data reads that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.REMOTE_HITM", "100003", "Counts all demand & prefetch data reads that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand & prefetch data reads that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand & prefetch data reads that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand & prefetch data reads that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand & prefetch data reads that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand & prefetch data reads that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand & prefetch data reads that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS.ANY_SNOOP", new PMUEvent("Counts all demand & prefetch RFOs that miss in the L3. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS.ANY_SNOOP", "100003", "Counts all demand & prefetch RFOs that miss in the L3.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS.REMOTE_HIT_FORWARD", new PMUEvent("Counts all demand & prefetch RFOs that miss the L3 and clean or shared data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all demand & prefetch RFOs that miss the L3 and clean or shared data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS.REMOTE_HITM", new PMUEvent("Counts all demand & prefetch RFOs that miss the L3 and the modified data is transferred from remote cache. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS.REMOTE_HITM", "100003", "Counts all demand & prefetch RFOs that miss the L3 and the modified data is transferred from remote cache.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local or remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local or remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand & prefetch RFOs that miss the L3 and the data is returned from remote dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS_REMOTE_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand & prefetch RFOs that miss the L3 and the data is returned from remote dram.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", new PMUEvent("Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local dram. Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS_LOCAL_DRAM.SNOOP_MISS_OR_NO_FWD", "100003", "Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local dram.", "0,1,2,3"));
		eventMap.put("CORE_POWER.LVL0_TURBO_LICENSE", new PMUEvent("Core cycles where the core was running with power-delivery for baseline license level 0.  This includes non-AVX codes, SSE, AVX 128-bit, and low-current AVX 256-bit codes.", "0x28", "0,1,2,3", "0x7", "CORE_POWER.LVL0_TURBO_LICENSE", "200003", "Core cycles where the core was running in a manner where Turbo may be clipped to the Non-AVX turbo schedule.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_POWER.LVL1_TURBO_LICENSE", new PMUEvent("Core cycles where the core was running with power-delivery for license level 1.  This includes high current AVX 256-bit instructions as well as low current AVX 512-bit instructions.", "0x28", "0,1,2,3", "0x18", "CORE_POWER.LVL1_TURBO_LICENSE", "200003", "Core cycles where the core was running in a manner where Turbo may be clipped to the AVX2 turbo schedule.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_POWER.LVL2_TURBO_LICENSE", new PMUEvent("Core cycles where the core was running with power-delivery for license level 2 (introduced in Skylake Server michroarchtecture).  This includes high current AVX 512-bit instructions.", "0x28", "0,1,2,3", "0x20", "CORE_POWER.LVL2_TURBO_LICENSE", "200003", "Core cycles where the core was running in a manner where Turbo may be clipped to the AVX512 turbo schedule.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_POWER.THROTTLE", new PMUEvent("Core cycles the out-of-order engine was throttled due to a pending power level request.", "0x28", "0,1,2,3", "0x40", "CORE_POWER.THROTTLE", "200003", "Core cycles the core was throttled due to a pending power level request.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SW_PREFETCH_ACCESS.NTA", new PMUEvent(null, "0x32", "0,1,2,3", "0x1", "SW_PREFETCH_ACCESS.NTA", "2000003", "Number of PREFETCHNTA instructions executed.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SW_PREFETCH_ACCESS.T0", new PMUEvent(null, "0x32", "0,1,2,3", "0x2", "SW_PREFETCH_ACCESS.T0", "2000003", "Number of PREFETCHT0 instructions executed.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SW_PREFETCH_ACCESS.T1_T2", new PMUEvent(null, "0x32", "0,1,2,3", "0x4", "SW_PREFETCH_ACCESS.T1_T2", "2000003", "Number of PREFETCHT1 or PREFETCHT2 instructions executed.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SW_PREFETCH_ACCESS.PREFETCHW", new PMUEvent(null, "0x32", "0,1,2,3", "0x8", "SW_PREFETCH_ACCESS.PREFETCHW", "2000003", "Number of PREFETCHW instructions executed.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HW_INTERRUPTS.RECEIVED", new PMUEvent("Counts the number of hardware interruptions received by the processor.", "0xCB", "0,1,2,3", "0x1", "HW_INTERRUPTS.RECEIVED", "203", "Number of hardware interrupts received by the processor.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_SNOOP_RESPONSE.RSP_IHITI", new PMUEvent(null, "0xEF", "0,1,2,3", "0x1", "CORE_SNOOP_RESPONSE.RSP_IHITI", "2000003", null, "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_SNOOP_RESPONSE.RSP_IHITFSE", new PMUEvent(null, "0xEF", "0,1,2,3", "0x2", "CORE_SNOOP_RESPONSE.RSP_IHITFSE", "2000003", null, "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_SNOOP_RESPONSE.RSP_SHITFSE", new PMUEvent(null, "0xEF", "0,1,2,3", "0x4", "CORE_SNOOP_RESPONSE.RSP_SHITFSE", "2000003", null, "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_SNOOP_RESPONSE.RSP_SFWDM", new PMUEvent(null, "0xEF", "0,1,2,3", "0x8", "CORE_SNOOP_RESPONSE.RSP_SFWDM", "2000003", null, "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_SNOOP_RESPONSE.RSP_IFWDM", new PMUEvent(null, "0xEF", "0,1,2,3", "0x10", "CORE_SNOOP_RESPONSE.RSP_IFWDM", "2000003", null, "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_SNOOP_RESPONSE.RSP_IFWDFE", new PMUEvent(null, "0xEF", "0,1,2,3", "0x20", "CORE_SNOOP_RESPONSE.RSP_IFWDFE", "2000003", null, "0,1,2,3,4,5,6,7"));
		eventMap.put("CORE_SNOOP_RESPONSE.RSP_SFWDFE", new PMUEvent(null, "0xEF", "0,1,2,3", "0x40", "CORE_SNOOP_RESPONSE.RSP_SFWDFE", "2000003", null, "0,1,2,3,4,5,6,7"));
		eventMap.put("IDI_MISC.WB_UPGRADE", new PMUEvent("Counts number of cache lines that are allocated and written back to L3 with the intention that they are more likely to be reused shortly.", "0xFE", "0,1,2,3", "0x2", "IDI_MISC.WB_UPGRADE", "100003", "Counts number of cache lines that are allocated and written back to L3 with the intention that they are more likely to be reused shortly", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDI_MISC.WB_DOWNGRADE", new PMUEvent("Counts number of cache lines that are dropped and not written back to L3 as they are deemed to be less likely to be reused shortly.", "0xFE", "0,1,2,3", "0x4", "IDI_MISC.WB_DOWNGRADE", "100003", "Counts number of cache lines that are dropped and not written back to L3 as they are deemed to be less likely to be reused shortly", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent("Counts the number of instructions retired from execution. For instructions that consist of multiple micro-ops, Counts the retirement of the last micro-op of the instruction. Counting continues during hardware interrupts, traps, and inside interrupt handlers. Notes: INST_RETIRED.ANY is counted by a designated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. INST_RETIRED.ANY_P is counted by a programmable counter and it is an architectural performance event. Counting: Faulting executions of GETSEC/VM entry/VM Exit/MWait will not count as retired instructions.", "0x00", "Fixed counter 0", "0x1", "INST_RETIRED.ANY", "2000003", "Instructions retired from execution.", "Fixed counter 0"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD", new PMUEvent("Counts the number of core cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. This event is a component in many key event ratios. The core frequency may change from time to time due to transitions associated with Enhanced Intel SpeedStep Technology or TM2. For this reason this event may have a changing ratio with regards to time. When the core frequency is constant, this event can approximate elapsed time while the core was not in the halt state. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events.", "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD", "2000003", "Core cycles when the thread is not in halt state", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_ANY", new PMUEvent(null, "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.REF_TSC", new PMUEvent("Counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state. This event has a constant ratio with the CPU_CLK_UNHALTED.REF_XCLK event. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. Note: On all current platforms this event stops counting during 'throttling (TM)' states duty off periods the processor is 'halted'.  The counter update is done at a lower clock rate then the core clock the overflow status bit for this counter may appear 'sticky'.  After the counter has overflowed and software clears the overflow status bit and resets the counter to less than MAX. The reset value to the counter is not clocked immediately so the overflow status bit will flip 'high (1)' and generate another PMI (if enabled) after which the reset value gets clocked into the counter. Therefore, software will get the interrupt, read the overflow status bit '1 for bit 34 while the counter value is less than MAX. Software should ignore this case.", "0x00", "Fixed counter 2", "0x3", "CPU_CLK_UNHALTED.REF_TSC", "2000003", "Reference cycles when the core is not in halt state.", "Fixed counter 2"));
		eventMap.put("LD_BLOCKS.STORE_FORWARD", new PMUEvent("Counts how many times the load operation got the true Block-on-Store blocking code preventing store forwarding. This includes cases when:a. preceding store conflicts with the load (incomplete overlap),b. store forwarding is impossible due to u-arch limitations,c. preceding lock RMW operations are not forwarded,d. store has the no-forward bit set (uncacheable/page-split/masked stores),e. all-blocking stores are used (mostly, fences and port I/O), and others.The most common case is a load blocked due to its address range overlapping with a preceding smaller uncompleted store. Note: This event does not take into account cases of out-of-SW-control (for example, SbTailHit), unknown physical STA, and cases of blocking loads on store due to being non-WB memory type or a lock. These cases are covered by other events. See the table of not supported store forwards in the Optimization Guide.", "0x03", "0,1,2,3", "0x2", "LD_BLOCKS.STORE_FORWARD", "100003", "Loads blocked by overlapping with store buffer that cannot be forwarded .", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.NO_SR", new PMUEvent("The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.", "0x03", "0,1,2,3", "0x8", "LD_BLOCKS.NO_SR", "100003", "The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", new PMUEvent("Counts false dependencies in MOB when the partial comparison upon loose net check and dependency was resolved by the Enhanced Loose net mechanism. This may not result in high performance penalties. Loose net checks can fail when loads and stores are 4k aliased.", "0x07", "0,1,2,3", "0x1", "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", "100003", "False dependencies in MOB due to partial compare on address.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES", new PMUEvent("Core cycles the Resource allocator was stalled due to recovery from an earlier branch misprediction or machine clear event.", "0x0D", "0,1,2,3", "0x1", "INT_MISC.RECOVERY_CYCLES", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for this thread (e.g. misprediction or memory nuke)", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES_ANY", new PMUEvent(null, "0x0D", "0,1,2,3", "0x1", "INT_MISC.RECOVERY_CYCLES_ANY", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke).", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.CLEAR_RESTEER_CYCLES", new PMUEvent(null, "0x0D", "0,1,2,3", "0x80", "INT_MISC.CLEAR_RESTEER_CYCLES", "2000003", "Cycles the issue-stage is waiting for front-end to fetch from resteered path following branch misprediction or machine clear events.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.ANY", new PMUEvent("Counts the number of uops that the Resource Allocation Table (RAT) issues to the Reservation Station (RS).", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.ANY", "2000003", "Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.STALL_CYCLES", new PMUEvent("Counts cycles during which the Resource Allocation Table (RAT) does not issue any Uops to the reservation station (RS) for the current thread.", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.VECTOR_WIDTH_MISMATCH", new PMUEvent("Counts the number of Blend Uops issued by the Resource Allocation Table (RAT) to the reservation station (RS) in order to preserve upper bits of vector registers. Starting with the Skylake microarchitecture, these Blend uops are needed since every Intel SSE instruction executed in Dirty Upper State needs to preserve bits 128-255 of the destination register. For more information, refer to Mixing Intel AVX and Intel SSE Code section of the Optimization Guide.", "0x0E", "0,1,2,3", "0x2", "UOPS_ISSUED.VECTOR_WIDTH_MISMATCH", "2000003", "Uops inserted at issue-stage in order to preserve upper bits of vector registers.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.SLOW_LEA", new PMUEvent(null, "0x0E", "0,1,2,3", "0x20", "UOPS_ISSUED.SLOW_LEA", "2000003", "Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ARITH.DIVIDER_ACTIVE", new PMUEvent(null, "0x14", "0,1,2,3", "0x1", "ARITH.DIVIDER_ACTIVE", "2000003", "Cycles when divide unit is busy executing divide or square root operations. Accounts for integer and floating-point operations.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P", new PMUEvent("This is an architectural event that counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling. For this reason, this event may have a changing ratio with regards to wall clock time.", "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P", "2000003", "Thread cycles when thread is not in halt state", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.RING0_TRANS", new PMUEvent("Counts when the Current Privilege Level (CPL) transitions from ring 1, 2 or 3 to ring 0 (Kernel).", "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.RING0_TRANS", "100007", "Counts when there is a transition from ring 1, 2 or 3 to ring 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK", "2503", "Core crystal clock cycles when the thread is unhalted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", "2503", "Core crystal clock cycles when at least one thread on the physical core is unhalted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK", "2503", "Core crystal clock cycles when the thread is unhalted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK_ANY", "2503", "Core crystal clock cycles when at least one thread on the physical core is unhalted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Core crystal clock cycles when this thread is unhalted and the other thread is halted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", "2503", "Core crystal clock cycles when this thread is unhalted and the other thread is halted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.SW_PF", new PMUEvent("Counts all not software-prefetch load dispatches that hit the fill buffer (FB) allocated for the software prefetch. It can also be incremented by some lock instructions. So it should only be used with profiling so that the locks can be excluded by ASM (Assembly File) inspection of the nearby instructions.", "0x4C", "0,1,2,3", "0x1", "LOAD_HIT_PRE.SW_PF", "100003", "Demand load dispatches that hit L1D fill buffer (FB) allocated for software prefetch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_CYCLES", new PMUEvent("Counts cycles during which the reservation station (RS) is empty for the thread.; Note: In ST-mode, not active thread should drive 0. This is usually caused by severely costly branch mispredictions, or allocator/FE issues.", "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_CYCLES", "2000003", "Cycles when Reservation Station (RS) is empty for the thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_END", new PMUEvent("Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate front-end Latency Bound issues.", "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_END", "2000003", "Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.LCP", new PMUEvent("Counts cycles that the Instruction Length decoder (ILD) stalls occurred due to dynamically changing prefix length of the decoded instruction (by operand size prefix instruction 0x66, address size prefix instruction 0x67 or REX.W for Intel64). Count is proportional to the number of prefixes in a 16B-line. This may result in a three-cycle penalty for each LCP (Length changing prefix) in a 16-byte chunk.", "0x87", "0,1,2,3", "0x1", "ILD_STALL.LCP", "2000003", "Stalls caused by changing prefix length of the instruction.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_0", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 0.", "0xA1", "0,1,2,3", "0x1", "UOPS_DISPATCHED_PORT.PORT_0", "2000003", "Cycles per thread when uops are executed in port 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_1", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 1.", "0xA1", "0,1,2,3", "0x2", "UOPS_DISPATCHED_PORT.PORT_1", "2000003", "Cycles per thread when uops are executed in port 1", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_2", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 2.", "0xA1", "0,1,2,3", "0x4", "UOPS_DISPATCHED_PORT.PORT_2", "2000003", "Cycles per thread when uops are executed in port 2", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_3", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 3.", "0xA1", "0,1,2,3", "0x8", "UOPS_DISPATCHED_PORT.PORT_3", "2000003", "Cycles per thread when uops are executed in port 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_4", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 4.", "0xA1", "0,1,2,3", "0x10", "UOPS_DISPATCHED_PORT.PORT_4", "2000003", "Cycles per thread when uops are executed in port 4", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_5", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 5.", "0xA1", "0,1,2,3", "0x20", "UOPS_DISPATCHED_PORT.PORT_5", "2000003", "Cycles per thread when uops are executed in port 5", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_6", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 6.", "0xA1", "0,1,2,3", "0x40", "UOPS_DISPATCHED_PORT.PORT_6", "2000003", "Cycles per thread when uops are executed in port 6", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_7", new PMUEvent("Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 7.", "0xA1", "0,1,2,3", "0x80", "UOPS_DISPATCHED_PORT.PORT_7", "2000003", "Cycles per thread when uops are executed in port 7", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ANY", new PMUEvent("Counts resource-related stall cycles. Reasons for stalls can be as follows:a. *any* u-arch structure got full (LB, SB, RS, ROB, BOB, LM, Physical Register Reclaim Table (PRRT), or Physical History Table (PHT) slots).b. *any* u-arch structure got empty (like INT/SIMD FreeLists).c. FPU control word (FPCW), MXCSR.and others. This counts cycles that the pipeline back-end blocked uop delivery from the front-end.", "0xA2", "0,1,2,3", "0x1", "RESOURCE_STALLS.ANY", "2000003", "Resource-related stall cycles", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.SB", new PMUEvent("Counts allocation stall cycles caused by the store buffer (SB) being full. This counts cycles that the pipeline back-end blocked uop delivery from the front-end.", "0xA2", "0,1,2,3", "0x8", "RESOURCE_STALLS.SB", "2000003", "Cycles stalled due to no store buffers available. (not including draining form sync).", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L2_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x1", "CYCLE_ACTIVITY.CYCLES_L2_MISS", "2000003", "Cycles while L2 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_TOTAL", new PMUEvent(null, "0xA3", "0,1,2,3", "0x4", "CYCLE_ACTIVITY.STALLS_TOTAL", "2000003", "Total execution stalls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L2_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x5", "CYCLE_ACTIVITY.STALLS_L2_MISS", "2000003", "Execution stalls while L2 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L1D_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x8", "CYCLE_ACTIVITY.CYCLES_L1D_MISS", "2000003", "Cycles while L1 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L1D_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0xc", "CYCLE_ACTIVITY.STALLS_L1D_MISS", "2000003", "Execution stalls while L1 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_MEM_ANY", new PMUEvent(null, "0xA3", "0,1,2,3", "0x10", "CYCLE_ACTIVITY.CYCLES_MEM_ANY", "2000003", "Cycles while memory subsystem has an outstanding load.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_MEM_ANY", new PMUEvent(null, "0xA3", "0,1,2,3", "0x14", "CYCLE_ACTIVITY.STALLS_MEM_ANY", "2000003", "Execution stalls while memory subsystem has an outstanding load.", "0,1,2,3"));
		eventMap.put("EXE_ACTIVITY.EXE_BOUND_0_PORTS", new PMUEvent("Counts cycles during which no uops were executed on all ports and Reservation Station (RS) was not empty.", "0xA6", "0,1,2,3", "0x1", "EXE_ACTIVITY.EXE_BOUND_0_PORTS", "2000003", "Cycles where no uops were executed, the Reservation Station was not empty, the Store Buffer was full and there was no outstanding load.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EXE_ACTIVITY.1_PORTS_UTIL", new PMUEvent("Counts cycles during which a total of 1 uop was executed on all ports and Reservation Station (RS) was not empty.", "0xA6", "0,1,2,3", "0x2", "EXE_ACTIVITY.1_PORTS_UTIL", "2000003", "Cycles total of 1 uop is executed on all ports and Reservation Station was not empty.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EXE_ACTIVITY.2_PORTS_UTIL", new PMUEvent("Counts cycles during which a total of 2 uops were executed on all ports and Reservation Station (RS) was not empty.", "0xA6", "0,1,2,3", "0x4", "EXE_ACTIVITY.2_PORTS_UTIL", "2000003", "Cycles total of 2 uops are executed on all ports and Reservation Station was not empty.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EXE_ACTIVITY.3_PORTS_UTIL", new PMUEvent("Cycles total of 3 uops are executed on all ports and Reservation Station (RS) was not empty.", "0xA6", "0,1,2,3", "0x8", "EXE_ACTIVITY.3_PORTS_UTIL", "2000003", "Cycles total of 3 uops are executed on all ports and Reservation Station was not empty.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EXE_ACTIVITY.4_PORTS_UTIL", new PMUEvent("Cycles total of 4 uops are executed on all ports and Reservation Station (RS) was not empty.", "0xA6", "0,1,2,3", "0x10", "EXE_ACTIVITY.4_PORTS_UTIL", "2000003", "Cycles total of 4 uops are executed on all ports and Reservation Station was not empty.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EXE_ACTIVITY.BOUND_ON_STORES", new PMUEvent(null, "0xA6", "0,1,2,3", "0x40", "EXE_ACTIVITY.BOUND_ON_STORES", "2000003", "Cycles where the Store Buffer was full and no outstanding load.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.UOPS", new PMUEvent("Number of uops delivered to the back-end by the LSD(Loop Stream Detector).", "0xA8", "0,1,2,3", "0x1", "LSD.UOPS", "2000003", "Number of Uops delivered by the LSD.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_ACTIVE", new PMUEvent("Counts the cycles when at least one uop is delivered by the LSD (Loop-stream detector).", "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_ACTIVE", "2000003", "Cycles Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_4_UOPS", new PMUEvent("Counts the cycles when 4 uops are delivered by the LSD (Loop-stream detector).", "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_4_UOPS", "2000003", "Cycles 4 Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.THREAD", new PMUEvent("Number of uops to be executed per-thread each cycle.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.THREAD", "2000003", "Counts the number of uops to be executed per-thread each cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.STALL_CYCLES", new PMUEvent("Counts cycles during which no uops were dispatched from the Reservation Station (RS) per thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.STALL_CYCLES", "2000003", "Counts number of cycles no uops were dispatched to be executed on this thread.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", new PMUEvent("Cycles where at least 1 uop was executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", "2000003", "Cycles where at least 1 uop was executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", new PMUEvent("Cycles where at least 2 uops were executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", "2000003", "Cycles where at least 2 uops were executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", new PMUEvent("Cycles where at least 3 uops were executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", "2000003", "Cycles where at least 3 uops were executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", new PMUEvent("Cycles where at least 4 uops were executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", "2000003", "Cycles where at least 4 uops were executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE", new PMUEvent("Number of uops executed from any thread.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE", "2000003", "Number of uops executed on the core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_1", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_1", "2000003", "Cycles at least 1 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_2", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_2", "2000003", "Cycles at least 2 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_3", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_3", "2000003", "Cycles at least 3 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_4", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_4", "2000003", "Cycles at least 4 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_NONE", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_NONE", "2000003", "Cycles with no micro-ops executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.X87", new PMUEvent("Counts the number of x87 uops executed.", "0xB1", "0,1,2,3", "0x10", "UOPS_EXECUTED.X87", "2000003", "Counts the number of x87 uops dispatched.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent("Counts the number of instructions (EOMs) retired. Counting covers macro-fused instructions individually (that is, increments by two).", "0xC0", "0,1,2,3", "0x0", "INST_RETIRED.ANY_P", "2000003", "Number of instructions retired. General Counter - architectural event", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.PREC_DIST", new PMUEvent("A version of INST_RETIRED that allows for a more unbiased distribution of samples across instructions retired. It utilizes the Precise Distribution of Instructions Retired (PDIR) feature to mitigate some bias in how retired instructions get sampled.", "0xC0", "1", "0x1", "INST_RETIRED.PREC_DIST", "2000003", "Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution", "1"));
		eventMap.put("INST_RETIRED.TOTAL_CYCLES_PS", new PMUEvent("Number of cycles using an always true condition applied to  PEBS instructions retired event. (inst_ret< 16)", "0xC0", "0,2,3", "0x1", "INST_RETIRED.TOTAL_CYCLES_PS", "2000003", "Number of cycles using always true condition applied to  PEBS instructions retired event.", "0,2,3"));
		eventMap.put("OTHER_ASSISTS.ANY", new PMUEvent(null, "0xC1", "0,1,2,3", "0x3f", "OTHER_ASSISTS.ANY", "100003", "Number of times a microcode assist is invoked by HW other than FP-assist. Examples include AD (page Access Dirty) and AVX* related assists.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.RETIRE_SLOTS", new PMUEvent("Counts the retirement slots used.", "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.RETIRE_SLOTS", "2000003", "Retirement slots used.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.STALL_CYCLES", new PMUEvent("This is a non-precise version (that is, does not use PEBS) of the event that counts cycles without actually retired uops.", "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.TOTAL_CYCLES", new PMUEvent("Number of cycles using always true condition (uops_ret < 16) applied to non PEBS uops retired event.", "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.TOTAL_CYCLES", "2000003", "Cycles with less than 10 actually retired uops.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.COUNT", new PMUEvent(null, "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.COUNT", "100003", "Number of machine clears (nukes) of any type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent("Counts self-modifying code (SMC) detected, which causes a machine clear.", "0xC3", "0,1,2,3", "0x4", "MACHINE_CLEARS.SMC", "100003", "Self-modifying code (SMC) detected.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent("Counts all (macro) branch instructions retired.", "0xC4", "0,1,2,3", "0x0", "BR_INST_RETIRED.ALL_BRANCHES", "400009", "All (macro) branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.CONDITIONAL", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts conditional branch instructions retired.", "0xC4", "0,1,2,3", "0x1", "BR_INST_RETIRED.CONDITIONAL", "400009", "Conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts both direct and indirect near call instructions retired.", "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL", "100007", "Direct and indirect near call instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent("This is a precise version of BR_INST_RETIRED.ALL_BRANCHES that counts all (macro) branch instructions retired.", "0xC4", "0,1,2,3", "0x4", "BR_INST_RETIRED.ALL_BRANCHES_PEBS", "400009", "All (macro) branch instructions retired.", "0,1,2,3"));
		eventMap.put("BR_INST_RETIRED.NEAR_RETURN", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts return instructions retired.", "0xC4", "0,1,2,3", "0x8", "BR_INST_RETIRED.NEAR_RETURN", "100007", "Return instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NOT_TAKEN", new PMUEvent("This is a non-precise version (that is, does not use PEBS) of the event that counts not taken branch instructions retired.", "0xC4", "0,1,2,3", "0x10", "BR_INST_RETIRED.NOT_TAKEN", "400009", "Not taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_TAKEN", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts taken branch instructions retired.", "0xC4", "0,1,2,3", "0x20", "BR_INST_RETIRED.NEAR_TAKEN", "400009", "Taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.FAR_BRANCH", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts far branch instructions retired.", "0xC4", "0,1,2,3", "0x40", "BR_INST_RETIRED.FAR_BRANCH", "100007", "Counts the number of far branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent("Counts all the retired branch instructions that were mispredicted by the processor. A branch misprediction occurs when the processor incorrectly predicts the destination of the branch.  When the misprediction is discovered at execution, all the instructions executed in the wrong (speculative) path must be discarded, and the processor must start fetching from the correct path.", "0xC5", "0,1,2,3", "0x0", "BR_MISP_RETIRED.ALL_BRANCHES", "400009", "All mispredicted macro branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.CONDITIONAL", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts mispredicted conditional branch instructions retired.", "0xC5", "0,1,2,3", "0x1", "BR_MISP_RETIRED.CONDITIONAL", "400009", "Mispredicted conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.NEAR_CALL", new PMUEvent("This event counts both taken and not taken retired mispredicted direct and indirect near calls, including both register and memory indirect.", "0xC5", "0,1,2,3", "0x2", "BR_MISP_RETIRED.NEAR_CALL", "400009", "Mispredicted direct and indirect near call instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent("This is a precise version of BR_MISP_RETIRED.ALL_BRANCHES that counts all mispredicted macro branch instructions retired.", "0xC5", "0,1,2,3", "0x4", "BR_MISP_RETIRED.ALL_BRANCHES_PEBS", "400009", "Mispredicted macro branch instructions retired.", "0,1,2,3"));
		eventMap.put("BR_MISP_RETIRED.NEAR_TAKEN", new PMUEvent("Number of near branch instructions retired that were mispredicted and taken.", "0xC5", "0,1,2,3", "0x20", "BR_MISP_RETIRED.NEAR_TAKEN", "400009", "Number of near branch instructions retired that were mispredicted and taken. ", "0,1,2,3,4,5,6,7"));
		eventMap.put("ROB_MISC_EVENTS.LBR_INSERTS", new PMUEvent("Increments when an entry is added to the Last Branch Record (LBR) array (or removed from the array in case of RETURNs in call stack mode). The event requires LBR enable via IA32_DEBUGCTL MSR and branch type selection via MSR_LBR_SELECT.", "0xCC", "0,1,2,3", "0x20", "ROB_MISC_EVENTS.LBR_INSERTS", "2000003", "Increments whenever there is an update to the LBR array.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BACLEARS.ANY", new PMUEvent("Counts the number of times the front-end is resteered when it finds a branch instruction in a fetch line. This occurs for the first time a branch instruction is fetched or when the branch is not tracked by the BPU (Branch Prediction Unit) anymore.", "0xE6", "0,1,2,3", "0x1", "BACLEARS.ANY", "100003", "Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LLC_MISSES.MEM_READ", new PMUEvent(null, "0x4", "0,1,2,3", "0x3", "LLC_MISSES.MEM_READ", null, "read requests to memory controller. Derived from unc_m_cas_count.rd", null));
		eventMap.put("LLC_MISSES.MEM_WRITE", new PMUEvent(null, "0x4", "0,1,2,3", "0xC", "LLC_MISSES.MEM_WRITE", null, "write requests to memory controller. Derived from unc_m_cas_count.wr", null));
		eventMap.put("UNC_M_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_M_CLOCKTICKS", null, "Memory controller clock ticks", null));
		eventMap.put("UNC_M_POWER_CHANNEL_PPD", new PMUEvent(null, "0x85", "0,1,2,3", null, "UNC_M_POWER_CHANNEL_PPD", null, "Cycles where DRAM ranks are in power down (CKE) mode", null));
		eventMap.put("UNC_M_POWER_SELF_REFRESH", new PMUEvent(null, "0x43", "0,1,2,3", null, "UNC_M_POWER_SELF_REFRESH", null, "Cycles Memory is in self refresh power mode", null));
		eventMap.put("UNC_M_PRE_COUNT.PAGE_MISS", new PMUEvent(null, "0x2", "0,1,2,3", "0x1", "UNC_M_PRE_COUNT.PAGE_MISS", null, "Pre-charges due to page misses", null));
		eventMap.put("UNC_M_PRE_COUNT.RD", new PMUEvent(null, "0x2", "0,1,2,3", "0x4", "UNC_M_PRE_COUNT.RD", null, "Pre-charge for reads", null));
		eventMap.put("UNC_M_PRE_COUNT.WR", new PMUEvent(null, "0x2", "0,1,2,3", "0x8", "UNC_M_PRE_COUNT.WR", null, "Pre-charge for writes", null));
		eventMap.put("UNC_M_ACT_COUNT.WR", new PMUEvent("Counts DRAM Page Activate commands sent on this channel due to a write request to the iMC (Memory Controller).  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS (Column Access Select) command.", "0x1", "0,1,2,3", "0x2", "UNC_M_ACT_COUNT.WR", null, "DRAM Page Activate commands sent due to a write request", null));
		eventMap.put("UNC_M_CAS_COUNT.ALL", new PMUEvent("Counts all CAS (Column Address Select) commands issued to DRAM per memory channel.  CAS commands are issued to specify the address to read or write on DRAM, so this event increments for every read and write. This event counts whether AutoPrecharge (which closes the DRAM Page automatically after a read/write) is enabled or not.", "0x4", "0,1,2,3", "0xF", "UNC_M_CAS_COUNT.ALL", null, "All DRAM CAS Commands issued", null));
		eventMap.put("LLC_MISSES.MEM_READ", new PMUEvent(null, "0x4", "0,1,2,3", "0x3", "LLC_MISSES.MEM_READ", null, "read requests to memory controller. Derived from unc_m_cas_count.rd", null));
		eventMap.put("UNC_M_CAS_COUNT.RD_REG", new PMUEvent("Counts CAS (Column Access Select) regular read commands issued to DRAM on a per channel basis.  CAS commands are issued to specify the address to read or write on DRAM, and this event increments for every regular read.  This event only counts regular reads and does not includes underfill reads due to partial write requests.  This event counts whether AutoPrecharge (which closes the DRAM Page automatically after a read/write)  is enabled or not.", "0x4", "0,1,2,3", "0x1", "UNC_M_CAS_COUNT.RD_REG", null, "All DRAM Read CAS Commands issued (does not include underfills) ", null));
		eventMap.put("UNC_M_CAS_COUNT.RD_UNDERFILL", new PMUEvent("Counts CAS (Column Access Select) underfill read commands issued to DRAM due to a partial write, on a per channel basis.  CAS commands are issued to specify the address to read or write on DRAM, and this command counts underfill reads.  Partial writes must be completed by first reading in the underfill from DRAM and then merging in the partial write data before writing the full line back to DRAM. This event will generally count about the same as the number of partial writes, but may be slightly less because of partials hitting in the WPQ (due to a previous write request). ", "0x4", "0,1,2,3", "0x2", "UNC_M_CAS_COUNT.RD_UNDERFILL", null, "DRAM Underfill Read CAS Commands issued", null));
		eventMap.put("LLC_MISSES.MEM_WRITE", new PMUEvent(null, "0x4", "0,1,2,3", "0xC", "LLC_MISSES.MEM_WRITE", null, "write requests to memory controller. Derived from unc_m_cas_count.wr", null));
		eventMap.put("UNC_M_RPQ_INSERTS", new PMUEvent("Counts the number of read requests allocated into the Read Pending Queue (RPQ).  This queue is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC.  The requests deallocate after the read CAS command has been issued to DRAM.  This event counts both Isochronous and non-Isochronous requests which were issued to the RPQ.    ", "0x10", "0,1,2,3", null, "UNC_M_RPQ_INSERTS", null, "Read Pending Queue Allocations", null));
		eventMap.put("UNC_M_RPQ_OCCUPANCY", new PMUEvent("Counts the number of entries in the Read Pending Queue (RPQ) at each cycle.  This can then be used to calculate both the average occupancy of the queue (in conjunction with the number of cycles not empty) and the average latency in the queue (in conjunction with the number of allocations).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC. They deallocate from the RPQ after the CAS command has been issued to memory.", "0x80", "0,1,2,3", null, "UNC_M_RPQ_OCCUPANCY", null, "Read Pending Queue Occupancy", null));
		eventMap.put("UNC_M_WPQ_INSERTS", new PMUEvent("Counts the number of writes requests allocated into the Write Pending Queue (WPQ).  The WPQ is used to schedule writes out to the memory controller and to track the requests.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the CHA to the iMC (Memory Controller).  The write requests deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.", "0x20", "0,1,2,3", null, "UNC_M_WPQ_INSERTS", null, "Write Pending Queue Allocations", null));
		eventMap.put("UNC_M_WPQ_OCCUPANCY", new PMUEvent("Counts the number of entries in the Write Pending Queue (WPQ) at each cycle.  This can then be used to calculate both the average queue occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The WPQ is used to schedule writes out to the memory controller and to track the requests.", "0x81", "0,1,2,3", null, "UNC_M_WPQ_OCCUPANCY", null, "Write Pending Queue Occupancy", null));
		eventMap.put("UNC_CHA_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_CHA_CLOCKTICKS", null, "Uncore cache clock ticks", null));
		eventMap.put("LLC_MISSES.UNCACHEABLE", new PMUEvent(null, "0x35", "0,1,2,3", "0x21", "LLC_MISSES.UNCACHEABLE", null, "LLC misses - Uncacheable reads (from cpu) . Derived from unc_cha_tor_inserts.ia_miss", null));
		eventMap.put("LLC_MISSES.MMIO_READ", new PMUEvent(null, "0x35", "0,1,2,3", "0x21", "LLC_MISSES.MMIO_READ", null, "MMIO reads. Derived from unc_cha_tor_inserts.ia_miss", null));
		eventMap.put("LLC_MISSES.MMIO_WRITE", new PMUEvent(null, "0x35", "0,1,2,3", "0x21", "LLC_MISSES.MMIO_WRITE", null, "MMIO writes. Derived from unc_cha_tor_inserts.ia_miss", null));
		eventMap.put("LLC_REFERENCES.STREAMING_FULL", new PMUEvent(null, "0x35", "0,1,2,3", "0x21", "LLC_REFERENCES.STREAMING_FULL", null, "Streaming stores (full cache line). Derived from unc_cha_tor_inserts.ia_miss", null));
		eventMap.put("LLC_REFERENCES.STREAMING_PARTIAL", new PMUEvent(null, "0x35", "0,1,2,3", "0x21", "LLC_REFERENCES.STREAMING_PARTIAL", null, "Streaming stores (partial cache line). Derived from unc_cha_tor_inserts.ia_miss", null));
		eventMap.put("UNC_CHA_REQUESTS.READS", new PMUEvent(null, "0x50", "0,1,2,3", "0x03", "UNC_CHA_REQUESTS.READS", null, "read requests from home agent", null));
		eventMap.put("UNC_CHA_REQUESTS.READS_LOCAL", new PMUEvent(null, "0x50", "0,1,2,3", "0x01", "UNC_CHA_REQUESTS.READS_LOCAL", null, "read requests from local home agent", null));
		eventMap.put("UNC_CHA_REQUESTS.READS_REMOTE", new PMUEvent(null, "0x50", "0,1,2,3", "0x02", "UNC_CHA_REQUESTS.READS_REMOTE", null, "read requests from remote home agent", null));
		eventMap.put("UNC_CHA_REQUESTS.WRITES", new PMUEvent(null, "0x50", "0,1,2,3", "0x0C", "UNC_CHA_REQUESTS.WRITES", null, "write requests from home agent", null));
		eventMap.put("UNC_CHA_REQUESTS.WRITES_LOCAL", new PMUEvent(null, "0x50", "0,1,2,3", "0x04", "UNC_CHA_REQUESTS.WRITES_LOCAL", null, "write requests from local home agent", null));
		eventMap.put("UNC_CHA_REQUESTS.WRITES_REMOTE", new PMUEvent(null, "0x50", "0,1,2,3", "0x08", "UNC_CHA_REQUESTS.WRITES_REMOTE", null, "write requests from remote home agent", null));
		eventMap.put("UPI_DATA_BANDWIDTH_TX", new PMUEvent(null, "0x2", "0,1,2,3", "0x0F", "UPI_DATA_BANDWIDTH_TX", null, "UPI interconnect send bandwidth for payload. Derived from unc_upi_txl_flits.all_data", null));
		eventMap.put("LLC_MISSES.PCIE_READ", new PMUEvent(null, "0x83", "0,1", "0x04", "LLC_MISSES.PCIE_READ", null, "PCI Express bandwidth reading at IIO. Derived from unc_iio_data_req_of_cpu.mem_read.part0", null));
		eventMap.put("LLC_MISSES.PCIE_WRITE", new PMUEvent(null, "0x83", "0,1", "0x01", "LLC_MISSES.PCIE_WRITE", null, "PCI Express bandwidth writing at IIO. Derived from unc_iio_data_req_of_cpu.mem_write.part0", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART0", new PMUEvent(null, "0x83", "0,1", "0x01", "UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART0", null, "PCI Express bandwidth writing at IIO, part 0", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART1", new PMUEvent(null, "0x83", "0,1", "0x01", "UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART1", null, "PCI Express bandwidth writing at IIO, part 1", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART2", new PMUEvent(null, "0x83", "0,1", "0x01", "UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART2", null, "PCI Express bandwidth writing at IIO, part 2", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART3", new PMUEvent(null, "0x83", "0,1", "0x01", "UNC_IIO_DATA_REQ_OF_CPU.MEM_WRITE.PART3", null, "PCI Express bandwidth writing at IIO, part 3", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART0", new PMUEvent(null, "0x83", "0,1", "0x04", "UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART0", null, "PCI Express bandwidth reading at IIO, part 0", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART1", new PMUEvent(null, "0x83", "0,1", "0x04", "UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART1", null, "PCI Express bandwidth reading at IIO, part 1", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART2", new PMUEvent(null, "0x83", "0,1", "0x04", "UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART2", null, "PCI Express bandwidth reading at IIO, part 2", null));
		eventMap.put("UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART3", new PMUEvent(null, "0x83", "0,1", "0x04", "UNC_IIO_DATA_REQ_OF_CPU.MEM_READ.PART3", null, "PCI Express bandwidth reading at IIO, part 3", null));
		eventMap.put("UNC_CHA_CORE_SNP.CORE_GTONE", new PMUEvent("Counts the number of transactions that trigger a configurable number of cross snoops.  Cores are snooped if the transaction looks up the cache and determines that it is necessary based on the operation type and what CoreValid bits are set.  For example, if 2 CV bits are set on a data read, the cores must have the data in S state so it is not necessary to snoop them.  However, if only 1 CV bit is set the core my have modified the data.  If the transaction was an RFO, it would need to invalidate the lines.  This event can be filtered based on who triggered the initial snoop(s).", "0x33", "0,1,2,3", "0x42", "UNC_CHA_CORE_SNP.CORE_GTONE", null, "Core Cross Snoops Issued; Multiple Core Requests", null));
		eventMap.put("UNC_CHA_CORE_SNP.EVICT_GTONE", new PMUEvent("Counts the number of transactions that trigger a configurable number of cross snoops.  Cores are snooped if the transaction looks up the cache and determines that it is necessary based on the operation type and what CoreValid bits are set.  For example, if 2 CV bits are set on a data read, the cores must have the data in S state so it is not necessary to snoop them.  However, if only 1 CV bit is set the core my have modified the data.  If the transaction was an RFO, it would need to invalidate the lines.  This event can be filtered based on who triggered the initial snoop(s).", "0x33", "0,1,2,3", "0x82", "UNC_CHA_CORE_SNP.EVICT_GTONE", null, "Core Cross Snoops Issued; Multiple Eviction", null));
		eventMap.put("UNC_CHA_DIR_LOOKUP.NO_SNP", new PMUEvent("Counts transactions that looked into the multi-socket cacheline Directory state, and therefore did not send a snoop because the Directory indicated it was not needed", "0x53", "0,1,2,3", "0x02", "UNC_CHA_DIR_LOOKUP.NO_SNP", null, "Multi-socket cacheline Directory state lookups; Snoop Not Needed", null));
		eventMap.put("UNC_CHA_DIR_LOOKUP.SNP", new PMUEvent("Counts  transactions that looked into the multi-socket cacheline Directory state, and sent one or more snoops, because the Directory indicated it was needed", "0x53", "0,1,2,3", "0x01", "UNC_CHA_DIR_LOOKUP.SNP", null, "Multi-socket cacheline Directory state lookups; Snoop Needed", null));
		eventMap.put("UNC_CHA_DIR_UPDATE.HA", new PMUEvent("Counts only multi-socket cacheline Directory state updates memory writes issued from the HA pipe. This does not include memory write requests which are for I (Invalid) or E (Exclusive) cachelines.", "0x54", "0,1,2,3", "0x01", "UNC_CHA_DIR_UPDATE.HA", null, "Multi-socket cacheline Directory state updates; Directory Updated memory write from the HA pipe", null));
		eventMap.put("UNC_CHA_DIR_UPDATE.TOR", new PMUEvent("Counts only multi-socket cacheline Directory state updates due to memory writes issued from the TOR pipe which are the result of remote transaction hitting the SF/LLC and returning data Core2Core. This does not include memory write requests which are for I (Invalid) or E (Exclusive) cachelines.", "0x54", "0,1,2,3", "0x02", "UNC_CHA_DIR_UPDATE.TOR", null, "Multi-socket cacheline Directory state updates; Directory Updated memory write from TOR pipe", null));
		eventMap.put("UNC_CHA_HITME_HIT.EX_RDS", new PMUEvent("Counts read requests from a remote socket which hit in the HitME cache (used to cache the multi-socket Directory state) to a line in the E(Exclusive) state.  This includes the following read opcodes (RdCode, RdData, RdDataMigratory, RdCur, RdInv*, Inv*)", "0x5F", "0,1,2,3", "0x01", "UNC_CHA_HITME_HIT.EX_RDS", null, "Read request from a remote socket which hit in the HitMe Cache to a line In the E state", null));
		eventMap.put("UNC_CHA_IMC_READS_COUNT.NORMAL", new PMUEvent("Counts when a normal (Non-Isochronous) read is issued to any of the memory controller channels from the CHA.", "0x59", "0,1,2,3", "0x01", "UNC_CHA_IMC_READS_COUNT.NORMAL", null, "Normal priority reads issued to the memory controller from the CHA", null));
		eventMap.put("UNC_CHA_IMC_WRITES_COUNT.FULL", new PMUEvent("Counts when a normal (Non-Isochronous) full line write is issued from the CHA to the any of the memory controller channels.", "0x5B", "0,1,2,3", "0x01", "UNC_CHA_IMC_WRITES_COUNT.FULL", null, "CHA to iMC Full Line Writes Issued; Full Line Non-ISOCH", null));
		eventMap.put("UNC_CHA_MISC.RFO_HIT_S", new PMUEvent("Counts when a RFO (the Read for Ownership issued before a  write) request hit a cacheline in the S (Shared) state.", "0x39", "0,1,2,3", "0x08", "UNC_CHA_MISC.RFO_HIT_S", null, "Number of times that an RFO hit in S state.", null));
		eventMap.put("UNC_CHA_REQUESTS.INVITOE_LOCAL", new PMUEvent("Counts the total number of requests coming from a unit on this socket for exclusive ownership of a cache line without receiving data (INVITOE) to the CHA.", "0x50", "0,1,2,3", "0x10", "UNC_CHA_REQUESTS.INVITOE_LOCAL", null, "Local requests for exclusive ownership of a cache line  without receiving data", null));
		eventMap.put("UNC_CHA_REQUESTS.INVITOE_REMOTE", new PMUEvent("Counts the total number of requests coming from a remote socket for exclusive ownership of a cache line without receiving data (INVITOE) to the CHA.", "0x50", "0,1,2,3", "0x20", "UNC_CHA_REQUESTS.INVITOE_REMOTE", null, "Local requests for exclusive ownership of a cache line without receiving data", null));
		eventMap.put("UNC_CHA_SNOOP_RESP.RSPCNFLCTS", new PMUEvent("Counts when a a transaction with the opcode type RspCnflct* Snoop Response was received. This is returned when a snoop finds an existing outstanding transaction in a remote caching agent. This triggers conflict resolution hardware. This covers both the opcode RspCnflct and RspCnflctWbI.", "0x5C", "0,1,2,3", "0x40", "UNC_CHA_SNOOP_RESP.RSPCNFLCTS", null, "RspCnflct* Snoop Responses Received", null));
		eventMap.put("UNC_CHA_SNOOP_RESP.RSPI", new PMUEvent("Counts when a transaction with the opcode type RspI Snoop Response was received which indicates the remote cache does not have the data, or when the remote cache silently evicts data (such as when an RFO: the Read for Ownership issued before a write hits non-modified data).", "0x5C", "0,1,2,3", "0x01", "UNC_CHA_SNOOP_RESP.RSPI", null, "RspI Snoop Responses Received", null));
		eventMap.put("UNC_CHA_SNOOP_RESP.RSPIFWD", new PMUEvent("Counts when a a transaction with the opcode type RspIFwd Snoop Response was received which indicates a remote caching agent forwarded the data and the requesting agent is able to acquire the data in E (Exclusive) or M (modified) states.  This is commonly returned with RFO (the Read for Ownership issued before a write) transactions.  The snoop could have either been to a cacheline in the M,E,F (Modified, Exclusive or Forward)  states.", "0x5C", "0,1,2,3", "0x04", "UNC_CHA_SNOOP_RESP.RSPIFWD", null, "RspIFwd Snoop Responses Received", null));
		eventMap.put("UNC_CHA_SNOOP_RESP.RSPSFWD", new PMUEvent("Counts when a a transaction with the opcode type RspSFwd Snoop Response was received which indicates a remote caching agent forwarded the data but held on to its current copy.  This is common for data and code reads that hit in a remote socket in E (Exclusive) or F (Forward) state.", "0x5C", "0,1,2,3", "0x08", "UNC_CHA_SNOOP_RESP.RSPSFWD", null, "RspSFwd Snoop Responses Received", null));
		eventMap.put("UNC_CHA_SNOOP_RESP.RSP_FWD_WB", new PMUEvent("Counts when a transaction with the opcode type Rsp*Fwd*WB Snoop Response was received which indicates the data was written back to it's home socket, and the cacheline was forwarded to the requestor socket.  This snoop response is only used in >= 4 socket systems.  It is used when a snoop HITM's in a remote caching agent and it directly forwards data to a requestor, and simultaneously returns data to it's home socket to be written back to memory.", "0x5C", "0,1,2,3", "0x20", "UNC_CHA_SNOOP_RESP.RSP_FWD_WB", null, "Rsp*Fwd*WB Snoop Responses Received", null));
		eventMap.put("UNC_CHA_SNOOP_RESP.RSP_WBWB", new PMUEvent("Counts when a transaction with the opcode type Rsp*WB Snoop Response was received which indicates which indicates the data was written back to it's home.  This is returned when a non-RFO request hits a cacheline in the Modified state. The Cache can either downgrade the cacheline to a S (Shared) or I (Invalid) state depending on how the system has been configured.  This reponse will also be sent when a cache requests E (Exclusive) ownership of a cache line without receiving data, because the cache must acquire ownership.", "0x5C", "0,1,2,3", "0x10", "UNC_CHA_SNOOP_RESP.RSP_WBWB", null, "Rsp*WB Snoop Responses Received", null));
		eventMap.put("UNC_IIO_CLOCKTICKS", new PMUEvent("Counts clockticks of the 1GHz trafiic controller clock in the IIO unit.", "0x1", "0,1,2,3", null, "UNC_IIO_CLOCKTICKS", null, "Clockticks of the IIO Traffic Controller", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART0", new PMUEvent("Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part0. In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x04", "UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART0", null, "Read request for 4 bytes made by the CPU to IIO Part0", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART1", new PMUEvent("Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part1. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x04", "UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART1", null, "Read request for 4 bytes made by the CPU to IIO Part1", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART2", new PMUEvent("Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part2. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x04", "UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART2", null, "Read request for 4 bytes made by the CPU to IIO Part2", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART3", new PMUEvent("Counts every read request for 4 bytes of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part3. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x04", "UNC_IIO_DATA_REQ_BY_CPU.MEM_READ.PART3", null, "Read request for 4 bytes made by the CPU to IIO Part3", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART0", new PMUEvent("Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part0 by a unit on the main die (generally a core). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x01", "UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART0", null, "Write request of 4 bytes made to IIO Part0 by the CPU", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART1", new PMUEvent("Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part1 by a unit on the main die (generally a core). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x01", "UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART1", null, "Write request of 4 bytes made to IIO Part1 by the CPU", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART2", new PMUEvent("Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part2 by  a unit on the main die (generally a core). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x01", "UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART2", null, "Write request of 4 bytes made to IIO Part2 by the CPU ", null));
		eventMap.put("UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART3", new PMUEvent("Counts every write request of 4 bytes of data made to the MMIO space of a card on IIO Part3 by  a unit on the main die (generally a core). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.", "0xC0", "2,3", "0x01", "UNC_IIO_DATA_REQ_BY_CPU.MEM_WRITE.PART3", null, "Write request of 4 bytes made to IIO Part3 by the CPU ", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART0", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part0. In the general case, part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART0", null, "Read request for up to a 64 byte transaction is made by the CPU to IIO Part0", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART1", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part1. In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART1", null, "Read request for up to a 64 byte transaction is made by the CPU to IIO Part1", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART2", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part2. In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART2", null, "Read request for up to a 64 byte transaction is made by the CPU to IIO Part2", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART3", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by a unit on the main die (generally a core) to the MMIO space of a card on IIO Part3. In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_BY_CPU.MEM_READ.PART3", null, "Read request for up to a 64 byte transaction is made by the CPU to IIO Part3", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART0", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part0 by a unit on the main die (generally a core). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART0", null, "Write request of up to a 64 byte transaction is made to IIO Part0 by the CPU", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART1", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part1 by a unit on the main die (generally a core). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART1", null, "Write request of up to a 64 byte transaction is made to IIO Part1 by the CPU", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART2", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part2 by a unit on the main die (generally a core). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART2", null, "Write request of up to a 64 byte transaction is made to IIO Part2 by the CPU ", null));
		eventMap.put("UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART3", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made to the MMIO space of a card on IIO Part3 by a unit on the main die (generally a core). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.", "0xC1", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_BY_CPU.MEM_WRITE.PART3", null, "Write request of up to a 64 byte transaction is made to IIO Part3 by the CPU ", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART0", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by IIO Part0 to a unit on the main die (generally memory). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART0", null, "Read request for up to a 64 byte transaction is made by IIO Part0 to Memory", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART1", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by IIO Part1 to a unit on the main die (generally memory). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART1", null, "Read request for up to a 64 byte transaction is  made by IIO Part1 to Memory", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART2", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by IIO Part2 to a unit on the main die (generally memory). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART2", null, "Read request for up to a 64 byte transaction is made by IIO Part2 to Memory", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART3", new PMUEvent("Counts every read request for up to a 64 byte transaction of data made by IIO Part3 to a unit on the main die (generally memory). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x04", "UNC_IIO_TXN_REQ_OF_CPU.MEM_READ.PART3", null, "Read request for up to a 64 byte transaction is made by IIO Part3 to Memory", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART0", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made by IIO Part0 to a unit on the main die (generally memory). In the general case, Part0 refers to a standard PCIe card of any size (x16,x8,x4) that is plugged directly into one of the PCIe slots. Part0 could also refer to any device plugged into the first slot of a PCIe riser card or to a device attached to the IIO unit which starts its use of the bus using lane 0 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART0", null, "Write request of up to a 64 byte transaction is made by IIO Part0 to Memory", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART1", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made by IIO Part1 to a unit on the main die (generally memory). In the general case, Part1 refers to a x4 PCIe card plugged into the second slot of a PCIe riser card, but it could refer to any x4 device attached to the IIO unit using lanes starting at lane 4 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART1", null, "Write request of up to a 64 byte transaction is made by IIO Part1 to Memory", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART2", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made by IIO Part2 to a unit on the main die (generally memory). In the general case, Part2 refers to a x4 or x8 PCIe card plugged into the third slot of a PCIe riser card, but it could refer to any x4 or x8 device attached to the IIO unit and using lanes starting at lane 8 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART2", null, "Write request of up to a 64 byte transaction is made by IIO Part2 to Memory", null));
		eventMap.put("UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART3", new PMUEvent("Counts every write request of up to a 64 byte transaction of data made by IIO Part3 to a unit on the main die (generally memory). In the general case, Part3 refers to a x4 PCIe card plugged into the fourth slot of a PCIe riser card, but it could brefer to  any device attached to the IIO unit using the lanes starting at lane 12 of the 16 lanes supported by the bus.", "0x84", "0,1,2,3", "0x01", "UNC_IIO_TXN_REQ_OF_CPU.MEM_WRITE.PART3", null, "Write request of up to a 64 byte transaction is made by IIO Part3 to Memory", null));
		eventMap.put("UNC_M2M_BYPASS_M2M_Egress.NOT_TAKEN", new PMUEvent("Counts traffic in which the M2M (Mesh to Memory) to iMC (Memory Controller) bypass was not taken", "0x22", "0,1,2,3", "0x2", "UNC_M2M_BYPASS_M2M_Egress.NOT_TAKEN", null, "Traffic in which the M2M to iMC Bypass was not taken", null));
		eventMap.put("UNC_M2M_DIRECT2CORE_NOT_TAKEN_DIRSTATE", new PMUEvent("Counts cycles when direct to core mode (which bypasses the CHA) was disabled", "0x24", "0,1,2,3", null, "UNC_M2M_DIRECT2CORE_NOT_TAKEN_DIRSTATE", null, "Cycles when direct to core mode (which bypasses the CHA) was disabled", null));
		eventMap.put("UNC_M2M_DIRECT2CORE_TAKEN", new PMUEvent("Counts when messages were sent direct to core (bypassing the CHA)", "0x23", "0,1,2,3", null, "UNC_M2M_DIRECT2CORE_TAKEN", null, "Messages sent direct to core (bypassing the CHA)", null));
		eventMap.put("UNC_M2M_DIRECT2CORE_TXN_OVERRIDE", new PMUEvent("Counts reads in which direct to core transactions (which would have bypassed the CHA) were overridden", "0x25", "0,1,2,3", null, "UNC_M2M_DIRECT2CORE_TXN_OVERRIDE", null, "Number of reads in which direct to core transaction were overridden", null));
		eventMap.put("UNC_M2M_DIRECT2UPI_NOT_TAKEN_CREDITS", new PMUEvent("Counts reads in which direct to Intel Ultra Path Interconnect (UPI) transactions (which would have bypassed the CHA) were overridden", "0x28", "0,1,2,3", null, "UNC_M2M_DIRECT2UPI_NOT_TAKEN_CREDITS", null, "Number of reads in which direct to Intel UPI transactions were overridden", null));
		eventMap.put("UNC_M2M_DIRECT2UPI_NOT_TAKEN_DIRSTATE", new PMUEvent("Counts cycles when the ability to send messages direct to the Intel Ultra Path Interconnect (bypassing the CHA) was disabled", "0x27", "0,1,2,3", null, "UNC_M2M_DIRECT2UPI_NOT_TAKEN_DIRSTATE", null, "Cycles when direct to Intel UPI was disabled", null));
		eventMap.put("UNC_M2M_DIRECT2UPI_TAKEN", new PMUEvent("Counts when messages were sent direct to the Intel Ultra Path Interconnect (bypassing the CHA)", "0x26", "0,1,2,3", null, "UNC_M2M_DIRECT2UPI_TAKEN", null, "Messages sent direct to the Intel UPI", null));
		eventMap.put("UNC_M2M_DIRECT2UPI_TXN_OVERRIDE", new PMUEvent("Counts when a read message that was sent direct to the Intel Ultra Path Interconnect (bypassing the CHA) was overridden", "0x29", "0,1,2,3", null, "UNC_M2M_DIRECT2UPI_TXN_OVERRIDE", null, "Number of reads that a message sent direct2 Intel UPI was overridden", null));
		eventMap.put("UNC_M2M_DIRECTORY_LOOKUP.ANY", new PMUEvent("Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state, and found the cacheline marked in Any State (A, I, S or unused)", "0x2D", "0,1,2,3", "0x1", "UNC_M2M_DIRECTORY_LOOKUP.ANY", null, "Multi-socket cacheline Directory lookups (any state found)", null));
		eventMap.put("UNC_M2M_DIRECTORY_LOOKUP.STATE_A", new PMUEvent("Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state, and found the cacheline marked in the A (SnoopAll) state, indicating the cacheline is stored in another socket in any state, and we must snoop the other sockets to make sure we get the latest data.  The data may be stored in any state in the local socket.", "0x2D", "0,1,2,3", "0x8", "UNC_M2M_DIRECTORY_LOOKUP.STATE_A", null, "Multi-socket cacheline Directory lookups (cacheline found in A state) ", null));
		eventMap.put("UNC_M2M_DIRECTORY_LOOKUP.STATE_I", new PMUEvent("Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state , and found the cacheline marked in the I (Invalid) state indicating the cacheline is not stored in another socket, and so there is no need to snoop the other sockets for the latest data.  The data may be stored in any state in the local socket.", "0x2D", "0,1,2,3", "0x2", "UNC_M2M_DIRECTORY_LOOKUP.STATE_I", null, "Multi-socket cacheline Directory lookup (cacheline found in I state) ", null));
		eventMap.put("UNC_M2M_DIRECTORY_LOOKUP.STATE_S", new PMUEvent("Counts when the M2M (Mesh to Memory) looks into the multi-socket cacheline Directory state , and found the cacheline marked in the S (Shared) state indicating the cacheline is either stored in another socket in the S(hared) state , and so there is no need to snoop the other sockets for the latest data.  The data may be stored in any state in the local socket.", "0x2D", "0,1,2,3", "0x4", "UNC_M2M_DIRECTORY_LOOKUP.STATE_S", null, "Multi-socket cacheline Directory lookup (cacheline found in S state) ", null));
		eventMap.put("UNC_M2M_DIRECTORY_UPDATE.A2I", new PMUEvent("Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from from A (SnoopAll) to I (Invalid)", "0x2E", "0,1,2,3", "0x20", "UNC_M2M_DIRECTORY_UPDATE.A2I", null, "Multi-socket cacheline Directory update from A to I", null));
		eventMap.put("UNC_M2M_DIRECTORY_UPDATE.A2S", new PMUEvent("Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from from A (SnoopAll) to S (Shared)", "0x2E", "0,1,2,3", "0x40", "UNC_M2M_DIRECTORY_UPDATE.A2S", null, "Multi-socket cacheline Directory update from A to S", null));
		eventMap.put("UNC_M2M_DIRECTORY_UPDATE.ANY", new PMUEvent("Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory to a new state", "0x2E", "0,1,2,3", "0x1", "UNC_M2M_DIRECTORY_UPDATE.ANY", null, "Multi-socket cacheline Directory update from/to Any state ", null));
		eventMap.put("UNC_M2M_DIRECTORY_UPDATE.I2A", new PMUEvent("Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from from I (Invalid) to A (SnoopAll)", "0x2E", "0,1,2,3", "0x4", "UNC_M2M_DIRECTORY_UPDATE.I2A", null, "Multi-socket cacheline Directory update from I to A", null));
		eventMap.put("UNC_M2M_DIRECTORY_UPDATE.I2S", new PMUEvent("Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from from I (Invalid) to S (Shared)", "0x2E", "0,1,2,3", "0x2", "UNC_M2M_DIRECTORY_UPDATE.I2S", null, "Multi-socket cacheline Directory update from I to S", null));
		eventMap.put("UNC_M2M_DIRECTORY_UPDATE.S2A", new PMUEvent("Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from from S (Shared) to A (SnoopAll)", "0x2E", "0,1,2,3", "0x10", "UNC_M2M_DIRECTORY_UPDATE.S2A", null, "Multi-socket cacheline Directory update from S to A", null));
		eventMap.put("UNC_M2M_DIRECTORY_UPDATE.S2I", new PMUEvent("Counts when the M2M (Mesh to Memory) updates the multi-socket cacheline Directory state from from S (Shared) to I (Invalid)", "0x2E", "0,1,2,3", "0x8", "UNC_M2M_DIRECTORY_UPDATE.S2I", null, "Multi-socket cacheline Directory update from S to I", null));
		eventMap.put("UNC_M2M_IMC_READS.ALL", new PMUEvent("Counts when the M2M (Mesh to Memory) issues reads to the iMC (Memory Controller). ", "0x37", "0,1,2,3", "0x4", "UNC_M2M_IMC_READS.ALL", null, "Reads to iMC issued", null));
		eventMap.put("UNC_M2M_IMC_READS.NORMAL", new PMUEvent("Counts when the M2M (Mesh to Memory) issues reads to the iMC (Memory Controller).  It only counts  normal priority non-isochronous reads.", "0x37", "0,1,2,3", "0x1", "UNC_M2M_IMC_READS.NORMAL", null, "Reads to iMC issued at Normal Priority (Non-Isochronous)", null));
		eventMap.put("UNC_M2M_IMC_WRITES.ALL", new PMUEvent("Counts when the M2M (Mesh to Memory) issues writes to the iMC (Memory Controller).", "0x38", "0,1,2,3", "0x10", "UNC_M2M_IMC_WRITES.ALL", null, "Writes to iMC issued", null));
		eventMap.put("UNC_M2M_IMC_WRITES.PARTIAL", new PMUEvent("Counts when the M2M (Mesh to Memory) issues partial writes to the iMC (Memory Controller).  It only counts normal priority non-isochronous writes.", "0x38", "0,1,2,3", "0x2", "UNC_M2M_IMC_WRITES.PARTIAL", null, "Partial Non-Isochronous writes to the iMC", null));
		eventMap.put("UNC_M2M_PREFCAM_DEMAND_PROMOTIONS", new PMUEvent("Counts when the M2M (Mesh to Memory) promotes a outstanding request in the prefetch queue due to a subsequent demand read request that entered the M2M with the same address.  Explanatory Side Note: The Prefecth queue is made of CAM (Content Addressable Memory)", "0x56", "0,1,2,3", null, "UNC_M2M_PREFCAM_DEMAND_PROMOTIONS", null, "Prefecth requests that got turn into a demand request", null));
		eventMap.put("UNC_M2M_PREFCAM_INSERTS", new PMUEvent("Counts when the M2M (Mesh to Memory) recieves a prefetch request and inserts it into its outstanding prefetch queue.  Explanatory Side Note: the prefect queue is made from CAM: Content Addressable Memory", "0x57", "0,1,2,3", null, "UNC_M2M_PREFCAM_INSERTS", null, "Inserts into the Memory Controller Prefetch Queue", null));
		eventMap.put("UNC_M2M_RxC_AD_INSERTS", new PMUEvent("Counts when the a new entry is Received(RxC) and then added to the AD (Address Ring) Ingress Queue from the CMS (Common Mesh Stop).  This is generally used for reads, and ", "0x1", "0,1,2,3", null, "UNC_M2M_RxC_AD_INSERTS", null, "AD Ingress (from CMS) Queue Inserts", null));
		eventMap.put("UNC_M3UPI_UPI_PREFETCH_SPAWN", new PMUEvent("Count cases where flow control queue that sits between the Intel Ultra Path Interconnect (UPI) and the mesh spawns a prefetch to the iMC (Memory Controller)", "0x29", "0,1,2,3", null, "UNC_M3UPI_UPI_PREFETCH_SPAWN", null, "Prefetches generated by the flow control queue of the M3UPI unit.", null));
		eventMap.put("UNC_UPI_CLOCKTICKS", new PMUEvent("Counts clockticks of the fixed frequency clock controlling the Intel Ultra Path Interconnect (UPI).  This clock runs at1/8th the 'GT/s' speed of the UPI link.  For example, a  9.6GT/s  link will have a fixed Frequency of 1.2 Ghz.", "0x1", "0,1,2,3", null, "UNC_UPI_CLOCKTICKS", null, "Clocks of the Intel Ultra Path Interconnect (UPI)", null));
		eventMap.put("UNC_UPI_DIRECT_ATTEMPTS.D2C", new PMUEvent("Counts Data Response (DRS) packets that attempted to go direct to core bypassing the CHA.", "0x12", "0,1,2,3", "0x1", "UNC_UPI_DIRECT_ATTEMPTS.D2C", null, "Data Response packets that go direct to core", null));
		eventMap.put("UNC_UPI_DIRECT_ATTEMPTS.D2U", new PMUEvent("Counts Data Response (DRS) packets that attempted to go direct to Intel Ultra Path Interconnect (UPI) bypassing the CHA .", "0x12", "0,1,2,3", "0x2", "UNC_UPI_DIRECT_ATTEMPTS.D2U", null, "Data Response packets that go direct to Intel UPI", null));
		eventMap.put("UNC_UPI_L1_POWER_CYCLES", new PMUEvent("Counts cycles when the Intel Ultra Path Interconnect (UPI) is in L1 power mode.  L1 is a mode that totally shuts down the UPI link.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another, this event only coutns when both links are shutdown.", "0x21", "0,1,2,3", null, "UNC_UPI_L1_POWER_CYCLES", null, "Cycles Intel UPI is in L1 power mode (shutdown)", null));
		eventMap.put("UNC_UPI_RxL0P_POWER_CYCLES", new PMUEvent("Counts cycles when the the receive side (Rx) of the Intel Ultra Path Interconnect(UPI) is in L0p power mode. L0p is a mode where we disable 60% of the UPI lanes, decreasing our bandwidth in order to save power.", "0x25", "0,1,2,3", null, "UNC_UPI_RxL0P_POWER_CYCLES", null, "Cycles the Rx of the Intel UPI is in L0p power mode", null));
		eventMap.put("UNC_UPI_RxL_BYPASSED.SLOT0", new PMUEvent("Counts incoming FLITs (FLow control unITs) which bypassed the slot0 RxQ buffer (Receive Queue) and passed directly to the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of FLITs transfered, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency.", "0x31", "0,1,2,3", "0x1", "UNC_UPI_RxL_BYPASSED.SLOT0", null, "FLITs received which bypassed the Slot0 Receive Buffer", null));
		eventMap.put("UNC_UPI_RxL_BYPASSED.SLOT1", new PMUEvent("Counts incoming FLITs (FLow control unITs) which bypassed the slot1 RxQ buffer  (Receive Queue) and passed directly across the BGF and into the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of FLITs transfered, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency.", "0x31", "0,1,2,3", "0x2", "UNC_UPI_RxL_BYPASSED.SLOT1", null, "FLITs received which bypassed the Slot0 Receive Buffer", null));
		eventMap.put("UNC_UPI_RxL_BYPASSED.SLOT2", new PMUEvent("Counts incoming FLITs (FLow control unITs) whcih bypassed the slot2 RxQ buffer (Receive Queue)  and passed directly to the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of FLITs transfered, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency.", "0x31", "0,1,2,3", "0x4", "UNC_UPI_RxL_BYPASSED.SLOT2", null, "FLITs received which bypassed the Slot0 Recieve Buffer", null));
		eventMap.put("UNC_UPI_RxL_FLITS.ALL_DATA", new PMUEvent("Counts valid data FLITs  (80 bit FLow control unITs: 64bits of data) received from any of the 3 Intel Ultra Path Interconnect (UPI) Receive Queue slots on this UPI unit.", "0x3", "0,1,2,3", "0x0F", "UNC_UPI_RxL_FLITS.ALL_DATA", null, "Valid data FLITs received from any slot", null));
		eventMap.put("UNC_UPI_RxL_FLITS.ALL_NULL", new PMUEvent("Counts null FLITs (80 bit FLow control unITs) received from any of the 3 Intel Ultra Path Interconnect (UPI) Receive Queue slots on this UPI unit.", "0x3", "0,1,2,3", "0x27", "UNC_UPI_RxL_FLITS.ALL_NULL", null, "Null FLITs received from any slot", null));
		eventMap.put("UNC_UPI_RxL_FLITS.NON_DATA", new PMUEvent("Counts protocol header and credit FLITs  (80 bit FLow control unITs) received from any of the 3 UPI slots on this UPI unit.", "0x3", "0,1,2,3", "0x97", "UNC_UPI_RxL_FLITS.NON_DATA", null, "Protocol header and credit FLITs received from any slot", null));
		eventMap.put("UNC_UPI_TxL0P_POWER_CYCLES", new PMUEvent("Counts cycles when the transmit side (Tx) of the Intel Ultra Path Interconnect(UPI) is in L0p power mode. L0p is a mode where we disable 60% of the UPI lanes, decreasing our bandwidth in order to save power.", "0x27", "0,1,2,3", null, "UNC_UPI_TxL0P_POWER_CYCLES", null, "Cycles in which the Tx of the Intel Ultra Path Interconnect (UPI) is in L0p power mode", null));
		eventMap.put("UNC_UPI_TxL_BYPASSED", new PMUEvent("Counts incoming FLITs (FLow control unITs) which bypassed the TxL(transmit) FLIT buffer and pass directly out the UPI Link. Generally, when data is transmitted across the Intel Ultra Path Interconnect (UPI), it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used in L0p (Low Power) mode and (Link Layer Retry) LLR  mode, increasing latency to transfer out to the link.", "0x41", "0,1,2,3", null, "UNC_UPI_TxL_BYPASSED", null, "FLITs that bypassed the TxL Buffer", null));
		eventMap.put("UPI_DATA_BANDWIDTH_TX", new PMUEvent(null, "0x2", "0,1,2,3", "0x0F", "UPI_DATA_BANDWIDTH_TX", null, "UPI interconnect send bandwidth for payload. Derived from unc_upi_txl_flits.all_data", null));
		eventMap.put("UNC_UPI_TxL_FLITS.ALL_NULL", new PMUEvent("Counts null FLITs (80 bit FLow control unITs) transmitted via any of the 3 Intel Ulra Path Interconnect (UPI) slots on this UPI unit.", "0x2", "0,1,2,3", "0x27", "UNC_UPI_TxL_FLITS.ALL_NULL", null, "Null FLITs transmitted from any slot", null));
		eventMap.put("UNC_UPI_TxL_FLITS.IDLE", new PMUEvent("Counts when the Intel Ultra Path Interconnect(UPI) transmits an idle FLIT(80 bit FLow control unITs).  Every UPI cycle must be sending either data FLITs, protocol/credit FLITs or idle FLITs.", "0x2", "0,1,2,3", "0x47", "UNC_UPI_TxL_FLITS.IDLE", null, "Idle FLITs transmitted", null));
		eventMap.put("UNC_UPI_TxL_FLITS.NON_DATA", new PMUEvent("Counts protocol header and credit FLITs (80 bit FLow control unITs) transmitted across any of the 3 UPI (Ultra Path Interconnect) slots on this UPI unit.", "0x2", "0,1,2,3", "0x97", "UNC_UPI_TxL_FLITS.NON_DATA", null, "Protocol header and credit FLITs transmitted across any slot", null));
		eventMap.put("DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Counts demand data loads that caused a page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk need not have completed.", "0x08", "0,1,2,3", "0x1", "DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", "100003", "Load misses in all DTLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_4K", new PMUEvent("Counts page walks completed due to demand data loads whose address translations missed in the TLB and were mapped to 4K pages.  The page walks can end with or without a page fault.", "0x08", "0,1,2,3", "0x2", "DTLB_LOAD_MISSES.WALK_COMPLETED_4K", "2000003", "Page walk completed due to a demand data load to a 4K page", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("Counts page walks completed due to demand data loads whose address translations missed in the TLB and were mapped to 2M/4M pages.  The page walks can end with or without a page fault.", "0x08", "0,1,2,3", "0x4", "DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M", "2000003", "Page walk completed due to a demand data load to a 2M/4M page", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_1G", new PMUEvent("Counts page walks completed due to demand data loads whose address translations missed in the TLB and were mapped to 4K pages.  The page walks can end with or without a page fault.", "0x08", "0,1,2,3", "0x8", "DTLB_LOAD_MISSES.WALK_COMPLETED_1G", "2000003", "Page walk completed due to a demand data load to a 1G page", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED", new PMUEvent("Counts demand data loads that caused a completed page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels. The page walk can end with or without a fault.", "0x08", "0,1,2,3", "0xe", "DTLB_LOAD_MISSES.WALK_COMPLETED", "100003", "Load miss in all TLB levels causes a page walk that completes. (All page sizes)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_PENDING", new PMUEvent("Counts 1 per cycle for each PMH that is busy with a page walk for a load. EPT page walk duration are excluded in Skylake microarchitecture.", "0x08", "0,1,2,3", "0x10", "DTLB_LOAD_MISSES.WALK_PENDING", "2000003", "Counts 1 per cycle for each PMH that is busy with a page walk for a load. EPT page walk duration are excluded in Skylake.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_ACTIVE", new PMUEvent("Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a load.", "0x08", "0,1,2,3", "0x10", "DTLB_LOAD_MISSES.WALK_ACTIVE", "100003", "Cycles when at least one PMH is busy with a page walk for a load. EPT page walk duration are excluded in Skylake.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT", new PMUEvent("Counts loads that miss the DTLB (Data TLB) and hit the STLB (Second level TLB).", "0x08", "0,1,2,3", "0x20", "DTLB_LOAD_MISSES.STLB_HIT", "2000003", "Loads that miss the DTLB and hit the STLB.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Counts demand data stores that caused a page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk need not have completed.", "0x49", "0,1,2,3", "0x1", "DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", "100003", "Store misses in all DTLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_4K", new PMUEvent("Counts page walks completed due to demand data stores whose address translations missed in the TLB and were mapped to 4K pages.  The page walks can end with or without a page fault.", "0x49", "0,1,2,3", "0x2", "DTLB_STORE_MISSES.WALK_COMPLETED_4K", "100003", "Page walk completed due to a demand data store to a 4K page", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("Counts page walks completed due to demand data stores whose address translations missed in the TLB and were mapped to 2M/4M pages.  The page walks can end with or without a page fault.", "0x49", "0,1,2,3", "0x4", "DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M", "100003", "Page walk completed due to a demand data store to a 2M/4M page", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_1G", new PMUEvent("Counts page walks completed due to demand data stores whose address translations missed in the TLB and were mapped to 1G pages.  The page walks can end with or without a page fault.", "0x49", "0,1,2,3", "0x8", "DTLB_STORE_MISSES.WALK_COMPLETED_1G", "100003", "Page walk completed due to a demand data store to a 1G page", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED", new PMUEvent("Counts demand data stores that caused a completed page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels. The page walk can end with or without a fault.", "0x49", "0,1,2,3", "0xe", "DTLB_STORE_MISSES.WALK_COMPLETED", "100003", "Store misses in all TLB levels causes a page walk that completes. (All page sizes)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_PENDING", new PMUEvent("Counts 1 per cycle for each PMH that is busy with a page walk for a store. EPT page walk duration are excluded in Skylake microarchitecture.", "0x49", "0,1,2,3", "0x10", "DTLB_STORE_MISSES.WALK_PENDING", "2000003", "Counts 1 per cycle for each PMH that is busy with a page walk for a store. EPT page walk duration are excluded in Skylake.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_ACTIVE", new PMUEvent("Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a store.", "0x49", "0,1,2,3", "0x10", "DTLB_STORE_MISSES.WALK_ACTIVE", "100003", "Cycles when at least one PMH is busy with a page walk for a store. EPT page walk duration are excluded in Skylake.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT", new PMUEvent("Stores that miss the DTLB (Data TLB) and hit the STLB (2nd Level TLB).", "0x49", "0,1,2,3", "0x20", "DTLB_STORE_MISSES.STLB_HIT", "100003", "Stores that miss the DTLB and hit the STLB.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EPT.WALK_PENDING", new PMUEvent("Counts cycles for each PMH (Page Miss Handler) that is busy with an EPT (Extended Page Table) walk for any request type.", "0x4F", "0,1,2,3", "0x10", "EPT.WALK_PENDING", "2000003", "Counts 1 per cycle for each PMH that is busy with a EPT (Extended Page Table) walk for any request type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Counts page walks of any page size (4K/2M/4M/1G) caused by a code fetch. This implies it missed in the ITLB and further levels of TLB, but the walk need not have completed.", "0x85", "0,1,2,3", "0x1", "ITLB_MISSES.MISS_CAUSES_A_WALK", "100003", "Misses at all ITLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_4K", new PMUEvent("Counts completed page walks (4K page size) caused by a code fetch. This implies it missed in the ITLB and further levels of TLB. The page walk can end with or without a fault.", "0x85", "0,1,2,3", "0x2", "ITLB_MISSES.WALK_COMPLETED_4K", "100003", "Code miss in all TLB levels causes a page walk that completes. (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("Counts code misses in all ITLB levels that caused a completed page walk (2M and 4M page sizes). The page walk can end with or without a fault.", "0x85", "0,1,2,3", "0x4", "ITLB_MISSES.WALK_COMPLETED_2M_4M", "100003", "Code miss in all TLB levels causes a page walk that completes. (2M/4M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_1G", new PMUEvent("Counts store misses in all DTLB levels that cause a completed page walk (1G page size). The page walk can end with or without a fault.", "0x85", "0,1,2,3", "0x8", "ITLB_MISSES.WALK_COMPLETED_1G", "100003", "Code miss in all TLB levels causes a page walk that completes. (1G)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED", new PMUEvent("Counts completed page walks (2M and 4M page sizes) caused by a code fetch. This implies it missed in the ITLB and further levels of TLB. The page walk can end with or without a fault.", "0x85", "0,1,2,3", "0xe", "ITLB_MISSES.WALK_COMPLETED", "100003", "Code miss in all TLB levels causes a page walk that completes. (All page sizes)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_PENDING", new PMUEvent("Counts 1 per cycle for each PMH (Page Miss Handler) that is busy with a page walk for an instruction fetch request. EPT page walk duration are excluded in Skylake michroarchitecture.", "0x85", "0,1,2,3", "0x10", "ITLB_MISSES.WALK_PENDING", "100003", "Counts 1 per cycle for each PMH that is busy with a page walk for an instruction fetch request. EPT page walk duration are excluded in Skylake.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_ACTIVE", new PMUEvent("Cycles when at least one PMH is busy with a page walk for code (instruction fetch) request. EPT page walk duration are excluded in Skylake microarchitecture.", "0x85", "0,1,2,3", "0x10", "ITLB_MISSES.WALK_ACTIVE", "100003", "Cycles when at least one PMH is busy with a page walk for code (instruction fetch) request. EPT page walk duration are excluded in Skylake.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT", new PMUEvent(null, "0x85", "0,1,2,3", "0x20", "ITLB_MISSES.STLB_HIT", "100003", "Instruction fetch requests that miss the ITLB and hit the STLB.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB.ITLB_FLUSH", new PMUEvent("Counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).", "0xAE", "0,1,2,3", "0x1", "ITLB.ITLB_FLUSH", "100007", "Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.DTLB_THREAD", new PMUEvent("Counts the number of DTLB flush attempts of the thread-specific entries.", "0xBD", "0,1,2,3", "0x1", "TLB_FLUSH.DTLB_THREAD", "100007", "DTLB flush attempts of the thread-specific entries", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.STLB_ANY", new PMUEvent("Counts the number of any STLB flush attempts (such as entire, VPID, PCID, InvPage, CR3 write, etc.).", "0xBD", "0,1,2,3", "0x20", "TLB_FLUSH.STLB_ANY", "100007", "STLB flush attempts", "0,1,2,3,4,5,6,7"));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}