package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Westmereep_dp implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Westmereep_dp());
    }

    {
		eventMap.put("CACHE_LOCK_CYCLES.L1D", new PMUEvent(null, "0x63", "0,1", "0x2", "CACHE_LOCK_CYCLES.L1D", "2000000", "Cycles L1D locked", null));
		eventMap.put("CACHE_LOCK_CYCLES.L1D_L2", new PMUEvent(null, "0x63", "0,1", "0x1", "CACHE_LOCK_CYCLES.L1D_L2", "2000000", "Cycles L1D and L2 locked", null));
		eventMap.put("L1D.M_EVICT", new PMUEvent(null, "0x51", "0,1", "0x4", "L1D.M_EVICT", "2000000", "L1D cache lines replaced in M state", null));
		eventMap.put("L1D.M_REPL", new PMUEvent(null, "0x51", "0,1", "0x2", "L1D.M_REPL", "2000000", "L1D cache lines allocated in the M state", null));
		eventMap.put("L1D.M_SNOOP_EVICT", new PMUEvent(null, "0x51", "0,1", "0x8", "L1D.M_SNOOP_EVICT", "2000000", "L1D snoop eviction of cache lines in M state", null));
		eventMap.put("L1D.REPL", new PMUEvent(null, "0x51", "0,1", "0x1", "L1D.REPL", "2000000", "L1 data cache lines allocated", null));
		eventMap.put("L1D_CACHE_PREFETCH_LOCK_FB_HIT", new PMUEvent(null, "0x52", "0,1", "0x1", "L1D_CACHE_PREFETCH_LOCK_FB_HIT", "2000000", "L1D prefetch load lock accepted in fill buffer", null));
		eventMap.put("L1D_PREFETCH.MISS", new PMUEvent(null, "0x4E", "0,1", "0x2", "L1D_PREFETCH.MISS", "200000", "L1D hardware prefetch misses", null));
		eventMap.put("L1D_PREFETCH.REQUESTS", new PMUEvent(null, "0x4E", "0,1", "0x1", "L1D_PREFETCH.REQUESTS", "200000", "L1D hardware prefetch requests", null));
		eventMap.put("L1D_PREFETCH.TRIGGERS", new PMUEvent(null, "0x4E", "0,1", "0x4", "L1D_PREFETCH.TRIGGERS", "200000", "L1D hardware prefetch requests triggered", null));
		eventMap.put("L1D_WB_L2.E_STATE", new PMUEvent(null, "0x28", "0,1,2,3", "0x4", "L1D_WB_L2.E_STATE", "100000", "L1 writebacks to L2 in E state", null));
		eventMap.put("L1D_WB_L2.I_STATE", new PMUEvent(null, "0x28", "0,1,2,3", "0x1", "L1D_WB_L2.I_STATE", "100000", "L1 writebacks to L2 in I state (misses)", null));
		eventMap.put("L1D_WB_L2.M_STATE", new PMUEvent(null, "0x28", "0,1,2,3", "0x8", "L1D_WB_L2.M_STATE", "100000", "L1 writebacks to L2 in M state", null));
		eventMap.put("L1D_WB_L2.MESI", new PMUEvent(null, "0x28", "0,1,2,3", "0xf", "L1D_WB_L2.MESI", "100000", "All L1 writebacks to L2", null));
		eventMap.put("L1D_WB_L2.S_STATE", new PMUEvent(null, "0x28", "0,1,2,3", "0x2", "L1D_WB_L2.S_STATE", "100000", "L1 writebacks to L2 in S state", null));
		eventMap.put("L2_DATA_RQSTS.ANY", new PMUEvent(null, "0x26", "0,1,2,3", "0xff", "L2_DATA_RQSTS.ANY", "200000", "All L2 data requests", null));
		eventMap.put("L2_DATA_RQSTS.DEMAND.E_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x4", "L2_DATA_RQSTS.DEMAND.E_STATE", "200000", "L2 data demand loads in E state", null));
		eventMap.put("L2_DATA_RQSTS.DEMAND.I_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x1", "L2_DATA_RQSTS.DEMAND.I_STATE", "200000", "L2 data demand loads in I state (misses)", null));
		eventMap.put("L2_DATA_RQSTS.DEMAND.M_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x8", "L2_DATA_RQSTS.DEMAND.M_STATE", "200000", "L2 data demand loads in M state", null));
		eventMap.put("L2_DATA_RQSTS.DEMAND.MESI", new PMUEvent(null, "0x26", "0,1,2,3", "0xf", "L2_DATA_RQSTS.DEMAND.MESI", "200000", "L2 data demand requests", null));
		eventMap.put("L2_DATA_RQSTS.DEMAND.S_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x2", "L2_DATA_RQSTS.DEMAND.S_STATE", "200000", "L2 data demand loads in S state", null));
		eventMap.put("L2_DATA_RQSTS.PREFETCH.E_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x40", "L2_DATA_RQSTS.PREFETCH.E_STATE", "200000", "L2 data prefetches in E state", null));
		eventMap.put("L2_DATA_RQSTS.PREFETCH.I_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x10", "L2_DATA_RQSTS.PREFETCH.I_STATE", "200000", "L2 data prefetches in the I state (misses)", null));
		eventMap.put("L2_DATA_RQSTS.PREFETCH.M_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x80", "L2_DATA_RQSTS.PREFETCH.M_STATE", "200000", "L2 data prefetches in M state", null));
		eventMap.put("L2_DATA_RQSTS.PREFETCH.MESI", new PMUEvent(null, "0x26", "0,1,2,3", "0xf0", "L2_DATA_RQSTS.PREFETCH.MESI", "200000", "All L2 data prefetches", null));
		eventMap.put("L2_DATA_RQSTS.PREFETCH.S_STATE", new PMUEvent(null, "0x26", "0,1,2,3", "0x20", "L2_DATA_RQSTS.PREFETCH.S_STATE", "200000", "L2 data prefetches in the S state", null));
		eventMap.put("L2_LINES_IN.ANY", new PMUEvent(null, "0xF1", "0,1,2,3", "0x7", "L2_LINES_IN.ANY", "100000", "L2 lines alloacated", null));
		eventMap.put("L2_LINES_IN.E_STATE", new PMUEvent(null, "0xF1", "0,1,2,3", "0x4", "L2_LINES_IN.E_STATE", "100000", "L2 lines allocated in the E state", null));
		eventMap.put("L2_LINES_IN.S_STATE", new PMUEvent(null, "0xF1", "0,1,2,3", "0x2", "L2_LINES_IN.S_STATE", "100000", "L2 lines allocated in the S state", null));
		eventMap.put("L2_LINES_OUT.ANY", new PMUEvent(null, "0xF2", "0,1,2,3", "0xf", "L2_LINES_OUT.ANY", "100000", "L2 lines evicted", null));
		eventMap.put("L2_LINES_OUT.DEMAND_CLEAN", new PMUEvent(null, "0xF2", "0,1,2,3", "0x1", "L2_LINES_OUT.DEMAND_CLEAN", "100000", "L2 lines evicted by a demand request", null));
		eventMap.put("L2_LINES_OUT.DEMAND_DIRTY", new PMUEvent(null, "0xF2", "0,1,2,3", "0x2", "L2_LINES_OUT.DEMAND_DIRTY", "100000", "L2 modified lines evicted by a demand request", null));
		eventMap.put("L2_LINES_OUT.PREFETCH_CLEAN", new PMUEvent(null, "0xF2", "0,1,2,3", "0x4", "L2_LINES_OUT.PREFETCH_CLEAN", "100000", "L2 lines evicted by a prefetch request", null));
		eventMap.put("L2_LINES_OUT.PREFETCH_DIRTY", new PMUEvent(null, "0xF2", "0,1,2,3", "0x8", "L2_LINES_OUT.PREFETCH_DIRTY", "100000", "L2 modified lines evicted by a prefetch request", null));
		eventMap.put("L2_RQSTS.IFETCH_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x10", "L2_RQSTS.IFETCH_HIT", "200000", "L2 instruction fetch hits", null));
		eventMap.put("L2_RQSTS.IFETCH_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x20", "L2_RQSTS.IFETCH_MISS", "200000", "L2 instruction fetch misses", null));
		eventMap.put("L2_RQSTS.IFETCHES", new PMUEvent(null, "0x24", "0,1,2,3", "0x30", "L2_RQSTS.IFETCHES", "200000", "L2 instruction fetches", null));
		eventMap.put("L2_RQSTS.LD_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x1", "L2_RQSTS.LD_HIT", "200000", "L2 load hits", null));
		eventMap.put("L2_RQSTS.LD_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x2", "L2_RQSTS.LD_MISS", "200000", "L2 load misses", null));
		eventMap.put("L2_RQSTS.LOADS", new PMUEvent(null, "0x24", "0,1,2,3", "0x3", "L2_RQSTS.LOADS", "200000", "L2 requests", null));
		eventMap.put("L2_RQSTS.MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0xaa", "L2_RQSTS.MISS", "200000", "All L2 misses", null));
		eventMap.put("L2_RQSTS.PREFETCH_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x40", "L2_RQSTS.PREFETCH_HIT", "200000", "L2 prefetch hits", null));
		eventMap.put("L2_RQSTS.PREFETCH_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x80", "L2_RQSTS.PREFETCH_MISS", "200000", "L2 prefetch misses", null));
		eventMap.put("L2_RQSTS.PREFETCHES", new PMUEvent(null, "0x24", "0,1,2,3", "0xc0", "L2_RQSTS.PREFETCHES", "200000", "All L2 prefetches", null));
		eventMap.put("L2_RQSTS.REFERENCES", new PMUEvent(null, "0x24", "0,1,2,3", "0xff", "L2_RQSTS.REFERENCES", "200000", "All L2 requests", null));
		eventMap.put("L2_RQSTS.RFO_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x4", "L2_RQSTS.RFO_HIT", "200000", "L2 RFO hits", null));
		eventMap.put("L2_RQSTS.RFO_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x8", "L2_RQSTS.RFO_MISS", "200000", "L2 RFO misses", null));
		eventMap.put("L2_RQSTS.RFOS", new PMUEvent(null, "0x24", "0,1,2,3", "0xc", "L2_RQSTS.RFOS", "200000", "L2 RFO requests", null));
		eventMap.put("L2_TRANSACTIONS.ANY", new PMUEvent(null, "0xF0", "0,1,2,3", "0x80", "L2_TRANSACTIONS.ANY", "200000", "All L2 transactions", null));
		eventMap.put("L2_TRANSACTIONS.FILL", new PMUEvent(null, "0xF0", "0,1,2,3", "0x20", "L2_TRANSACTIONS.FILL", "200000", "L2 fill transactions", null));
		eventMap.put("L2_TRANSACTIONS.IFETCH", new PMUEvent(null, "0xF0", "0,1,2,3", "0x4", "L2_TRANSACTIONS.IFETCH", "200000", "L2 instruction fetch transactions", null));
		eventMap.put("L2_TRANSACTIONS.L1D_WB", new PMUEvent(null, "0xF0", "0,1,2,3", "0x10", "L2_TRANSACTIONS.L1D_WB", "200000", "L1D writeback to L2 transactions", null));
		eventMap.put("L2_TRANSACTIONS.LOAD", new PMUEvent(null, "0xF0", "0,1,2,3", "0x1", "L2_TRANSACTIONS.LOAD", "200000", "L2 Load transactions", null));
		eventMap.put("L2_TRANSACTIONS.PREFETCH", new PMUEvent(null, "0xF0", "0,1,2,3", "0x8", "L2_TRANSACTIONS.PREFETCH", "200000", "L2 prefetch transactions", null));
		eventMap.put("L2_TRANSACTIONS.RFO", new PMUEvent(null, "0xF0", "0,1,2,3", "0x2", "L2_TRANSACTIONS.RFO", "200000", "L2 RFO transactions", null));
		eventMap.put("L2_TRANSACTIONS.WB", new PMUEvent(null, "0xF0", "0,1,2,3", "0x40", "L2_TRANSACTIONS.WB", "200000", "L2 writeback to LLC transactions", null));
		eventMap.put("L2_WRITE.LOCK.E_STATE", new PMUEvent(null, "0x27", "0,1,2,3", "0x40", "L2_WRITE.LOCK.E_STATE", "100000", "L2 demand lock RFOs in E state", null));
		eventMap.put("L2_WRITE.LOCK.HIT", new PMUEvent(null, "0x27", "0,1,2,3", "0xe0", "L2_WRITE.LOCK.HIT", "100000", "All demand L2 lock RFOs that hit the cache", null));
		eventMap.put("L2_WRITE.LOCK.I_STATE", new PMUEvent(null, "0x27", "0,1,2,3", "0x10", "L2_WRITE.LOCK.I_STATE", "100000", "L2 demand lock RFOs in I state (misses)", null));
		eventMap.put("L2_WRITE.LOCK.M_STATE", new PMUEvent(null, "0x27", "0,1,2,3", "0x80", "L2_WRITE.LOCK.M_STATE", "100000", "L2 demand lock RFOs in M state", null));
		eventMap.put("L2_WRITE.LOCK.MESI", new PMUEvent(null, "0x27", "0,1,2,3", "0xf0", "L2_WRITE.LOCK.MESI", "100000", "All demand L2 lock RFOs", null));
		eventMap.put("L2_WRITE.LOCK.S_STATE", new PMUEvent(null, "0x27", "0,1,2,3", "0x20", "L2_WRITE.LOCK.S_STATE", "100000", "L2 demand lock RFOs in S state", null));
		eventMap.put("L2_WRITE.RFO.HIT", new PMUEvent(null, "0x27", "0,1,2,3", "0xe", "L2_WRITE.RFO.HIT", "100000", "All L2 demand store RFOs that hit the cache", null));
		eventMap.put("L2_WRITE.RFO.I_STATE", new PMUEvent(null, "0x27", "0,1,2,3", "0x1", "L2_WRITE.RFO.I_STATE", "100000", "L2 demand store RFOs in I state (misses)", null));
		eventMap.put("L2_WRITE.RFO.M_STATE", new PMUEvent(null, "0x27", "0,1,2,3", "0x8", "L2_WRITE.RFO.M_STATE", "100000", "L2 demand store RFOs in M state", null));
		eventMap.put("L2_WRITE.RFO.MESI", new PMUEvent(null, "0x27", "0,1,2,3", "0xf", "L2_WRITE.RFO.MESI", "100000", "All L2 demand store RFOs", null));
		eventMap.put("L2_WRITE.RFO.S_STATE", new PMUEvent(null, "0x27", "0,1,2,3", "0x2", "L2_WRITE.RFO.S_STATE", "100000", "L2 demand store RFOs in S state", null));
		eventMap.put("LONGEST_LAT_CACHE.MISS", new PMUEvent(null, "0x2E", "0,1,2,3", "0x41", "LONGEST_LAT_CACHE.MISS", "100000", "Longest latency cache miss", null));
		eventMap.put("LONGEST_LAT_CACHE.REFERENCE", new PMUEvent(null, "0x2E", "0,1,2,3", "0x4f", "LONGEST_LAT_CACHE.REFERENCE", "200000", "Longest latency cache reference", null));
		eventMap.put("MEM_INST_RETIRED.LOADS", new PMUEvent(null, "0xB", "0,1,2,3", "0x1", "MEM_INST_RETIRED.LOADS", "2000000", "Instructions retired which contains a load (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.STORES", new PMUEvent(null, "0xB", "0,1,2,3", "0x2", "MEM_INST_RETIRED.STORES", "2000000", "Instructions retired which contains a store (Precise Event)", null));
		eventMap.put("MEM_LOAD_RETIRED.HIT_LFB", new PMUEvent(null, "0xCB", "0,1,2,3", "0x40", "MEM_LOAD_RETIRED.HIT_LFB", "200000", "Retired loads that miss L1D and hit an previously allocated LFB (Precise Event)", null));
		eventMap.put("MEM_LOAD_RETIRED.L1D_HIT", new PMUEvent(null, "0xCB", "0,1,2,3", "0x1", "MEM_LOAD_RETIRED.L1D_HIT", "2000000", "Retired loads that hit the L1 data cache (Precise Event)", null));
		eventMap.put("MEM_LOAD_RETIRED.L2_HIT", new PMUEvent(null, "0xCB", "0,1,2,3", "0x2", "MEM_LOAD_RETIRED.L2_HIT", "200000", "Retired loads that hit the L2 cache (Precise Event)", null));
		eventMap.put("MEM_LOAD_RETIRED.LLC_MISS", new PMUEvent(null, "0xCB", "0,1,2,3", "0x10", "MEM_LOAD_RETIRED.LLC_MISS", "10000", "Retired loads that miss the LLC cache (Precise Event)", null));
		eventMap.put("MEM_LOAD_RETIRED.LLC_UNSHARED_HIT", new PMUEvent(null, "0xCB", "0,1,2,3", "0x4", "MEM_LOAD_RETIRED.LLC_UNSHARED_HIT", "40000", "Retired loads that hit valid versions in the LLC cache (Precise Event)", null));
		eventMap.put("MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM", new PMUEvent(null, "0xCB", "0,1,2,3", "0x8", "MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM", "40000", "Retired loads that hit sibling core's L2 in modified or unmodified states (Precise Event)", null));
		eventMap.put("OFFCORE_REQUESTS.ANY", new PMUEvent(null, "0xB0", "0,1,2,3", "0x80", "OFFCORE_REQUESTS.ANY", "100000", "All offcore requests", null));
		eventMap.put("OFFCORE_REQUESTS.ANY.READ", new PMUEvent(null, "0xB0", "0,1,2,3", "0x8", "OFFCORE_REQUESTS.ANY.READ", "100000", "Offcore read requests", null));
		eventMap.put("OFFCORE_REQUESTS.ANY.RFO", new PMUEvent(null, "0xB0", "0,1,2,3", "0x10", "OFFCORE_REQUESTS.ANY.RFO", "100000", "Offcore RFO requests", null));
		eventMap.put("OFFCORE_REQUESTS.DEMAND.READ_CODE", new PMUEvent(null, "0xB0", "0,1,2,3", "0x2", "OFFCORE_REQUESTS.DEMAND.READ_CODE", "100000", "Offcore demand code read requests", null));
		eventMap.put("OFFCORE_REQUESTS.DEMAND.READ_DATA", new PMUEvent(null, "0xB0", "0,1,2,3", "0x1", "OFFCORE_REQUESTS.DEMAND.READ_DATA", "100000", "Offcore demand data read requests", null));
		eventMap.put("OFFCORE_REQUESTS.DEMAND.RFO", new PMUEvent(null, "0xB0", "0,1,2,3", "0x4", "OFFCORE_REQUESTS.DEMAND.RFO", "100000", "Offcore demand RFO requests", null));
		eventMap.put("OFFCORE_REQUESTS.L1D_WRITEBACK", new PMUEvent(null, "0xB0", "0,1,2,3", "0x40", "OFFCORE_REQUESTS.L1D_WRITEBACK", "100000", "Offcore L1 data cache writebacks", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.ANY.READ", new PMUEvent(null, "0x60", null, "0x8", "OFFCORE_REQUESTS_OUTSTANDING.ANY.READ", "2000000", "Outstanding offcore reads", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.ANY.READ_NOT_EMPTY", new PMUEvent(null, "0x60", null, "0x8", "OFFCORE_REQUESTS_OUTSTANDING.ANY.READ_NOT_EMPTY", "2000000", "Cycles offcore reads busy", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE", new PMUEvent(null, "0x60", null, "0x2", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE", "2000000", "Outstanding offcore demand code reads", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE_NOT_EMPTY", new PMUEvent(null, "0x60", null, "0x2", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE_NOT_EMPTY", "2000000", "Cycles offcore demand code read busy", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA", new PMUEvent(null, "0x60", null, "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA", "2000000", "Outstanding offcore demand data reads", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA_NOT_EMPTY", new PMUEvent(null, "0x60", null, "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_DATA_NOT_EMPTY", "2000000", "Cycles offcore demand data read busy", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO", new PMUEvent(null, "0x60", null, "0x4", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO", "2000000", "Outstanding offcore demand RFOs", null));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO_NOT_EMPTY", new PMUEvent(null, "0x60", null, "0x4", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND.RFO_NOT_EMPTY", "2000000", "Cycles offcore demand RFOs busy", null));
		eventMap.put("OFFCORE_REQUESTS_SQ_FULL", new PMUEvent(null, "0xB2", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_SQ_FULL", "100000", "Offcore requests blocked due to Super Queue full", null));
		eventMap.put("SQ_MISC.LRU_HINTS", new PMUEvent(null, "0xF4", "0,1,2,3", "0x4", "SQ_MISC.LRU_HINTS", "2000000", "Super Queue LRU hints sent to LLC", null));
		eventMap.put("SQ_MISC.SPLIT_LOCK", new PMUEvent(null, "0xF4", "0,1,2,3", "0x10", "SQ_MISC.SPLIT_LOCK", "2000000", "Super Queue lock splits across a cache line", null));
		eventMap.put("STORE_BLOCKS.AT_RET", new PMUEvent(null, "0x6", "0,1,2,3", "0x4", "STORE_BLOCKS.AT_RET", "200000", "Loads delayed with at-Retirement block code", null));
		eventMap.put("STORE_BLOCKS.L1D_BLOCK", new PMUEvent(null, "0x6", "0,1,2,3", "0x8", "STORE_BLOCKS.L1D_BLOCK", "200000", "Cacheable loads delayed with L1D block code", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_0", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_0", "2000000", "Memory instructions retired above 0 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_1024", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_1024", "100", "Memory instructions retired above 1024 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_128", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_128", "1000", "Memory instructions retired above 128 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16", "10000", "Memory instructions retired above 16 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16384", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_16384", "5", "Memory instructions retired above 16384 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_2048", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_2048", "50", "Memory instructions retired above 2048 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_256", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_256", "500", "Memory instructions retired above 256 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32", "5000", "Memory instructions retired above 32 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32768", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_32768", "3", "Memory instructions retired above 32768 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4", "50000", "Memory instructions retired above 4 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4096", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_4096", "20", "Memory instructions retired above 4096 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_512", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_512", "200", "Memory instructions retired above 512 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_64", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_64", "2000", "Memory instructions retired above 64 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8", "20000", "Memory instructions retired above 8 clocks (Precise Event)", null));
		eventMap.put("MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8192", new PMUEvent(null, "0xB", "3", "0x10", "MEM_INST_RETIRED.LATENCY_ABOVE_THRESHOLD_8192", "10", "Memory instructions retired above 8192 clocks (Precise Event)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY_DATA read and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.ANY_CACHE_DRAM", "100000", "REQUEST = ANY_DATA read and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.ANY_LOCATION", "100000", "REQUEST = ANY_DATA read and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.IO_CSR_MMIO", "100000", "REQUEST = ANY_DATA read and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = ANY_DATA read and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = ANY_DATA read and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = ANY_DATA read and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.LOCAL_CACHE", "100000", "REQUEST = ANY_DATA read and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY_DATA read and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.REMOTE_CACHE_HITM", "100000", "REQUEST = ANY_DATA read and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY IFETCH and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.ANY_CACHE_DRAM", "100000", "REQUEST = ANY IFETCH and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.ANY_LOCATION", "100000", "REQUEST = ANY IFETCH and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.IO_CSR_MMIO", "100000", "REQUEST = ANY IFETCH and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = ANY IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = ANY IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = ANY IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.LOCAL_CACHE", "100000", "REQUEST = ANY IFETCH and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.REMOTE_CACHE_HITM", "100000", "REQUEST = ANY IFETCH and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY_REQUEST and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.ANY_CACHE_DRAM", "100000", "REQUEST = ANY_REQUEST and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.ANY_LOCATION", "100000", "REQUEST = ANY_REQUEST and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.IO_CSR_MMIO", "100000", "REQUEST = ANY_REQUEST and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = ANY_REQUEST and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = ANY_REQUEST and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = ANY_REQUEST and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.LOCAL_CACHE", "100000", "REQUEST = ANY_REQUEST and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY_REQUEST and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.REMOTE_CACHE_HITM", "100000", "REQUEST = ANY_REQUEST and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY RFO and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.ANY_CACHE_DRAM", "100000", "REQUEST = ANY RFO and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.ANY_LOCATION", "100000", "REQUEST = ANY RFO and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.IO_CSR_MMIO", "100000", "REQUEST = ANY RFO and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = ANY RFO and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = ANY RFO and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = ANY RFO and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.LOCAL_CACHE", "100000", "REQUEST = ANY RFO and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = ANY RFO and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.REMOTE_CACHE_HITM", "100000", "REQUEST = ANY RFO and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = CORE_WB and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_CACHE_DRAM", "100000", "REQUEST = CORE_WB and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_LOCATION", "100000", "REQUEST = CORE_WB and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.IO_CSR_MMIO", "100000", "REQUEST = CORE_WB and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = CORE_WB and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = CORE_WB and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = CORE_WB and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.LOCAL_CACHE", "100000", "REQUEST = CORE_WB and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = CORE_WB and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.REMOTE_CACHE_HITM", "100000", "REQUEST = CORE_WB and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DATA_IFETCH and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.ANY_CACHE_DRAM", "100000", "REQUEST = DATA_IFETCH and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.ANY_LOCATION", "100000", "REQUEST = DATA_IFETCH and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.IO_CSR_MMIO", "100000", "REQUEST = DATA_IFETCH and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = DATA_IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = DATA_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = DATA_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.LOCAL_CACHE", "100000", "REQUEST = DATA_IFETCH and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DATA_IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.REMOTE_CACHE_HITM", "100000", "REQUEST = DATA_IFETCH and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DATA_IN and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.ANY_CACHE_DRAM", "100000", "REQUEST = DATA_IN and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.ANY_LOCATION", "100000", "REQUEST = DATA_IN and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.IO_CSR_MMIO", "100000", "REQUEST = DATA_IN and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = DATA_IN and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = DATA_IN and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = DATA_IN and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.LOCAL_CACHE", "100000", "REQUEST = DATA_IN and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DATA_IN and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.REMOTE_CACHE_HITM", "100000", "REQUEST = DATA_IN and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_DATA and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.ANY_CACHE_DRAM", "100000", "REQUEST = DEMAND_DATA and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.ANY_LOCATION", "100000", "REQUEST = DEMAND_DATA and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.IO_CSR_MMIO", "100000", "REQUEST = DEMAND_DATA and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = DEMAND_DATA and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = DEMAND_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = DEMAND_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.LOCAL_CACHE", "100000", "REQUEST = DEMAND_DATA and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_DATA and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.REMOTE_CACHE_HITM", "100000", "REQUEST = DEMAND_DATA and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_CACHE_DRAM", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_LOCATION", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.IO_CSR_MMIO", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LOCAL_CACHE", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.REMOTE_CACHE_HITM", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_CACHE_DRAM", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_LOCATION", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.IO_CSR_MMIO", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.LOCAL_CACHE", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.REMOTE_CACHE_HITM", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_RFO and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_CACHE_DRAM", "100000", "REQUEST = DEMAND_RFO and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_LOCATION", "100000", "REQUEST = DEMAND_RFO and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.IO_CSR_MMIO", "100000", "REQUEST = DEMAND_RFO and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = DEMAND_RFO and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = DEMAND_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = DEMAND_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.LOCAL_CACHE", "100000", "REQUEST = DEMAND_RFO and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = DEMAND_RFO and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.REMOTE_CACHE_HITM", "100000", "REQUEST = DEMAND_RFO and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = OTHER and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.ANY_CACHE_DRAM", "100000", "REQUEST = OTHER and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.ANY_LOCATION", "100000", "REQUEST = OTHER and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.IO_CSR_MMIO", "100000", "REQUEST = OTHER and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = OTHER and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = OTHER and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = OTHER and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.LOCAL_CACHE", "100000", "REQUEST = OTHER and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = OTHER and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.REMOTE_CACHE_HITM", "100000", "REQUEST = OTHER and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_DATA and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.ANY_CACHE_DRAM", "100000", "REQUEST = PF_DATA and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.ANY_LOCATION", "100000", "REQUEST = PF_DATA and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.IO_CSR_MMIO", "100000", "REQUEST = PF_DATA and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = PF_DATA and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = PF_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = PF_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.LOCAL_CACHE", "100000", "REQUEST = PF_DATA and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_DATA and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.REMOTE_CACHE_HITM", "100000", "REQUEST = PF_DATA and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_DATA_RD and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.ANY_CACHE_DRAM", "100000", "REQUEST = PF_DATA_RD and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.ANY_LOCATION", "100000", "REQUEST = PF_DATA_RD and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.IO_CSR_MMIO", "100000", "REQUEST = PF_DATA_RD and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = PF_DATA_RD and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = PF_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = PF_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.LOCAL_CACHE", "100000", "REQUEST = PF_DATA_RD and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_DATA_RD and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.REMOTE_CACHE_HITM", "100000", "REQUEST = PF_DATA_RD and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_RFO and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.ANY_CACHE_DRAM", "100000", "REQUEST = PF_RFO and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.ANY_LOCATION", "100000", "REQUEST = PF_RFO and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.IO_CSR_MMIO", "100000", "REQUEST = PF_RFO and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = PF_RFO and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = PF_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = PF_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.LOCAL_CACHE", "100000", "REQUEST = PF_RFO and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_RFO and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.REMOTE_CACHE_HITM", "100000", "REQUEST = PF_RFO and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_IFETCH and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.ANY_CACHE_DRAM", "100000", "REQUEST = PF_IFETCH and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.ANY_LOCATION", "100000", "REQUEST = PF_IFETCH and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.IO_CSR_MMIO", "100000", "REQUEST = PF_IFETCH and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = PF_IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = PF_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = PF_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.LOCAL_CACHE", "100000", "REQUEST = PF_IFETCH and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PF_IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.REMOTE_CACHE_HITM", "100000", "REQUEST = PF_IFETCH and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.ALL_LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PREFETCH and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.ANY_CACHE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.ANY_CACHE_DRAM", "100000", "REQUEST = PREFETCH and RESPONSE = ANY_CACHE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.ANY_LOCATION", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.ANY_LOCATION", "100000", "REQUEST = PREFETCH and RESPONSE = ANY_LOCATION", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.IO_CSR_MMIO", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.IO_CSR_MMIO", "100000", "REQUEST = PREFETCH and RESPONSE = IO_CSR_MMIO", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.LLC_HIT_NO_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.LLC_HIT_NO_OTHER_CORE", "100000", "REQUEST = PREFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.LLC_HIT_OTHER_CORE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.LLC_HIT_OTHER_CORE_HIT", "100000", "REQUEST = PREFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.LLC_HIT_OTHER_CORE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.LLC_HIT_OTHER_CORE_HITM", "100000", "REQUEST = PREFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.LOCAL_CACHE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.LOCAL_CACHE", "100000", "REQUEST = PREFETCH and RESPONSE = LOCAL_CACHE", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT", "100000", "REQUEST = PREFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.REMOTE_CACHE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.REMOTE_CACHE_HITM", "100000", "REQUEST = PREFETCH and RESPONSE = REMOTE_CACHE_HITM", null));
		eventMap.put("FP_ASSIST.ALL", new PMUEvent(null, "0xF7", "0,1,2,3", "0x1", "FP_ASSIST.ALL", "20000", "X87 Floating point assists (Precise Event)", null));
		eventMap.put("FP_ASSIST.INPUT", new PMUEvent(null, "0xF7", "0,1,2,3", "0x4", "FP_ASSIST.INPUT", "20000", "X87 Floating poiint assists for invalid input value (Precise Event)", null));
		eventMap.put("FP_ASSIST.OUTPUT", new PMUEvent(null, "0xF7", "0,1,2,3", "0x2", "FP_ASSIST.OUTPUT", "20000", "X87 Floating point assists for invalid output value (Precise Event)", null));
		eventMap.put("FP_COMP_OPS_EXE.MMX", new PMUEvent(null, "0x10", "0,1,2,3", "0x2", "FP_COMP_OPS_EXE.MMX", "2000000", "MMX Uops", null));
		eventMap.put("FP_COMP_OPS_EXE.SSE_DOUBLE_PRECISION", new PMUEvent(null, "0x10", "0,1,2,3", "0x80", "FP_COMP_OPS_EXE.SSE_DOUBLE_PRECISION", "2000000", "SSE* FP double precision Uops", null));
		eventMap.put("FP_COMP_OPS_EXE.SSE_FP", new PMUEvent(null, "0x10", "0,1,2,3", "0x4", "FP_COMP_OPS_EXE.SSE_FP", "2000000", "SSE and SSE2 FP Uops", null));
		eventMap.put("FP_COMP_OPS_EXE.SSE_FP_PACKED", new PMUEvent(null, "0x10", "0,1,2,3", "0x10", "FP_COMP_OPS_EXE.SSE_FP_PACKED", "2000000", "SSE FP packed Uops", null));
		eventMap.put("FP_COMP_OPS_EXE.SSE_FP_SCALAR", new PMUEvent(null, "0x10", "0,1,2,3", "0x20", "FP_COMP_OPS_EXE.SSE_FP_SCALAR", "2000000", "SSE FP scalar Uops", null));
		eventMap.put("FP_COMP_OPS_EXE.SSE_SINGLE_PRECISION", new PMUEvent(null, "0x10", "0,1,2,3", "0x40", "FP_COMP_OPS_EXE.SSE_SINGLE_PRECISION", "2000000", "SSE* FP single precision Uops", null));
		eventMap.put("FP_COMP_OPS_EXE.SSE2_INTEGER", new PMUEvent(null, "0x10", "0,1,2,3", "0x8", "FP_COMP_OPS_EXE.SSE2_INTEGER", "2000000", "SSE2 integer Uops", null));
		eventMap.put("FP_COMP_OPS_EXE.X87", new PMUEvent(null, "0x10", "0,1,2,3", "0x1", "FP_COMP_OPS_EXE.X87", "2000000", "Computational floating-point operations executed", null));
		eventMap.put("FP_MMX_TRANS.ANY", new PMUEvent(null, "0xCC", "0,1,2,3", "0x3", "FP_MMX_TRANS.ANY", "2000000", "All Floating Point to and from MMX transitions", null));
		eventMap.put("FP_MMX_TRANS.TO_FP", new PMUEvent(null, "0xCC", "0,1,2,3", "0x1", "FP_MMX_TRANS.TO_FP", "2000000", "Transitions from MMX to Floating Point instructions", null));
		eventMap.put("FP_MMX_TRANS.TO_MMX", new PMUEvent(null, "0xCC", "0,1,2,3", "0x2", "FP_MMX_TRANS.TO_MMX", "2000000", "Transitions from Floating Point to MMX instructions", null));
		eventMap.put("SIMD_INT_128.PACK", new PMUEvent(null, "0x12", "0,1,2,3", "0x4", "SIMD_INT_128.PACK", "200000", "128 bit SIMD integer pack operations", null));
		eventMap.put("SIMD_INT_128.PACKED_ARITH", new PMUEvent(null, "0x12", "0,1,2,3", "0x20", "SIMD_INT_128.PACKED_ARITH", "200000", "128 bit SIMD integer arithmetic operations", null));
		eventMap.put("SIMD_INT_128.PACKED_LOGICAL", new PMUEvent(null, "0x12", "0,1,2,3", "0x10", "SIMD_INT_128.PACKED_LOGICAL", "200000", "128 bit SIMD integer logical operations", null));
		eventMap.put("SIMD_INT_128.PACKED_MPY", new PMUEvent(null, "0x12", "0,1,2,3", "0x1", "SIMD_INT_128.PACKED_MPY", "200000", "128 bit SIMD integer multiply operations", null));
		eventMap.put("SIMD_INT_128.PACKED_SHIFT", new PMUEvent(null, "0x12", "0,1,2,3", "0x2", "SIMD_INT_128.PACKED_SHIFT", "200000", "128 bit SIMD integer shift operations", null));
		eventMap.put("SIMD_INT_128.SHUFFLE_MOVE", new PMUEvent(null, "0x12", "0,1,2,3", "0x40", "SIMD_INT_128.SHUFFLE_MOVE", "200000", "128 bit SIMD integer shuffle/move operations", null));
		eventMap.put("SIMD_INT_128.UNPACK", new PMUEvent(null, "0x12", "0,1,2,3", "0x8", "SIMD_INT_128.UNPACK", "200000", "128 bit SIMD integer unpack operations", null));
		eventMap.put("SIMD_INT_64.PACK", new PMUEvent(null, "0xFD", "0,1,2,3", "0x4", "SIMD_INT_64.PACK", "200000", "SIMD integer 64 bit pack operations", null));
		eventMap.put("SIMD_INT_64.PACKED_ARITH", new PMUEvent(null, "0xFD", "0,1,2,3", "0x20", "SIMD_INT_64.PACKED_ARITH", "200000", "SIMD integer 64 bit arithmetic operations", null));
		eventMap.put("SIMD_INT_64.PACKED_LOGICAL", new PMUEvent(null, "0xFD", "0,1,2,3", "0x10", "SIMD_INT_64.PACKED_LOGICAL", "200000", "SIMD integer 64 bit logical operations", null));
		eventMap.put("SIMD_INT_64.PACKED_MPY", new PMUEvent(null, "0xFD", "0,1,2,3", "0x1", "SIMD_INT_64.PACKED_MPY", "200000", "SIMD integer 64 bit packed multiply operations", null));
		eventMap.put("SIMD_INT_64.PACKED_SHIFT", new PMUEvent(null, "0xFD", "0,1,2,3", "0x2", "SIMD_INT_64.PACKED_SHIFT", "200000", "SIMD integer 64 bit shift operations", null));
		eventMap.put("SIMD_INT_64.SHUFFLE_MOVE", new PMUEvent(null, "0xFD", "0,1,2,3", "0x40", "SIMD_INT_64.SHUFFLE_MOVE", "200000", "SIMD integer 64 bit shuffle/move operations", null));
		eventMap.put("SIMD_INT_64.UNPACK", new PMUEvent(null, "0xFD", "0,1,2,3", "0x8", "SIMD_INT_64.UNPACK", "200000", "SIMD integer 64 bit unpack operations", null));
		eventMap.put("MACRO_INSTS.DECODED", new PMUEvent(null, "0xD0", "0,1,2,3", "0x1", "MACRO_INSTS.DECODED", "2000000", "Instructions decoded", null));
		eventMap.put("MACRO_INSTS.FUSIONS_DECODED", new PMUEvent(null, "0xA6", "0,1,2,3", "0x1", "MACRO_INSTS.FUSIONS_DECODED", "2000000", "Macro-fused instructions decoded", null));
		eventMap.put("TWO_UOP_INSTS_DECODED", new PMUEvent(null, "0x19", "0,1,2,3", "0x1", "TWO_UOP_INSTS_DECODED", "2000000", "Two Uop instructions decoded", null));
		eventMap.put("MISALIGN_MEM_REF.STORE", new PMUEvent(null, "0x5", "0,1,2,3", "0x2", "MISALIGN_MEM_REF.STORE", "200000", "Misaligned store references", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = ANY_DATA read and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.ANY_LLC_MISS", "100000", "REQUEST = ANY_DATA read and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.OTHER_LOCAL_DRAM", "100000", "REQUEST = ANY_DATA read and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA.REMOTE_DRAM", "100000", "REQUEST = ANY_DATA read and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = ANY IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.ANY_LLC_MISS", "100000", "REQUEST = ANY IFETCH and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.OTHER_LOCAL_DRAM", "100000", "REQUEST = ANY IFETCH and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_IFETCH.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_IFETCH.REMOTE_DRAM", "100000", "REQUEST = ANY IFETCH and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = ANY_REQUEST and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.ANY_LLC_MISS", "100000", "REQUEST = ANY_REQUEST and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.OTHER_LOCAL_DRAM", "100000", "REQUEST = ANY_REQUEST and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.REMOTE_DRAM", "100000", "REQUEST = ANY_REQUEST and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = ANY RFO and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.ANY_LLC_MISS", "100000", "REQUEST = ANY RFO and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.OTHER_LOCAL_DRAM", "100000", "REQUEST = ANY RFO and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.REMOTE_DRAM", "100000", "REQUEST = ANY RFO and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = CORE_WB and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_LLC_MISS", "100000", "REQUEST = CORE_WB and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.OTHER_LOCAL_DRAM", "100000", "REQUEST = CORE_WB and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.REMOTE_DRAM", "100000", "REQUEST = CORE_WB and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = DATA_IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.ANY_LLC_MISS", "100000", "REQUEST = DATA_IFETCH and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.OTHER_LOCAL_DRAM", "100000", "REQUEST = DATA_IFETCH and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IFETCH.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IFETCH.REMOTE_DRAM", "100000", "REQUEST = DATA_IFETCH and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = DATA_IN and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.ANY_LLC_MISS", "100000", "REQUEST = DATA_IN and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.OTHER_LOCAL_DRAM", "100000", "REQUEST = DATA_IN and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DATA_IN.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DATA_IN.REMOTE_DRAM", "100000", "REQUEST = DATA_IN and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = DEMAND_DATA and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.ANY_LLC_MISS", "100000", "REQUEST = DEMAND_DATA and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.OTHER_LOCAL_DRAM", "100000", "REQUEST = DEMAND_DATA and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA.REMOTE_DRAM", "100000", "REQUEST = DEMAND_DATA and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_LLC_MISS", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.OTHER_LOCAL_DRAM", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.REMOTE_DRAM", "100000", "REQUEST = DEMAND_DATA_RD and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.ANY_LLC_MISS", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.OTHER_LOCAL_DRAM", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_IFETCH.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_IFETCH.REMOTE_DRAM", "100000", "REQUEST = DEMAND_IFETCH and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = DEMAND_RFO and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_LLC_MISS", "100000", "REQUEST = DEMAND_RFO and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.OTHER_LOCAL_DRAM", "100000", "REQUEST = DEMAND_RFO and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.REMOTE_DRAM", "100000", "REQUEST = DEMAND_RFO and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = OTHER and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.ANY_LLC_MISS", "100000", "REQUEST = OTHER and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.OTHER_LOCAL_DRAM", "100000", "REQUEST = OTHER and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.OTHER.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.REMOTE_DRAM", "100000", "REQUEST = OTHER and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = PF_DATA and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.ANY_LLC_MISS", "100000", "REQUEST = PF_DATA and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.OTHER_LOCAL_DRAM", "100000", "REQUEST = PF_DATA and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA.REMOTE_DRAM", "100000", "REQUEST = PF_DATA and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = PF_DATA_RD and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.ANY_LLC_MISS", "100000", "REQUEST = PF_DATA_RD and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.OTHER_LOCAL_DRAM", "100000", "REQUEST = PF_DATA_RD and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_DATA_RD.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_DATA_RD.REMOTE_DRAM", "100000", "REQUEST = PF_DATA_RD and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = PF_RFO and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.ANY_LLC_MISS", "100000", "REQUEST = PF_RFO and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.OTHER_LOCAL_DRAM", "100000", "REQUEST = PF_RFO and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_IFETCH.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_IFETCH.REMOTE_DRAM", "100000", "REQUEST = PF_RFO and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = PF_IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.ANY_LLC_MISS", "100000", "REQUEST = PF_IFETCH and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.OTHER_LOCAL_DRAM", "100000", "REQUEST = PF_IFETCH and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PF_RFO.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_RFO.REMOTE_DRAM", "100000", "REQUEST = PF_IFETCH and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.ANY_DRAM_AND_REMOTE_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.ANY_DRAM_AND_REMOTE_FWD", "100000", "REQUEST = PREFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.ANY_LLC_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.ANY_LLC_MISS", "100000", "REQUEST = PREFETCH and RESPONSE = ANY_LLC_MISS", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.OTHER_LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.OTHER_LOCAL_DRAM", "100000", "REQUEST = PREFETCH and RESPONSE = OTHER_LOCAL_DRAM", null));
		eventMap.put("OFFCORE_RESPONSE.PREFETCH.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PREFETCH.REMOTE_DRAM", "100000", "REQUEST = PREFETCH and RESPONSE = REMOTE_DRAM", null));
		eventMap.put("BPU_CLEARS.EARLY", new PMUEvent(null, "0xE8", "0,1,2,3", "0x1", "BPU_CLEARS.EARLY", "2000000", "Early Branch Prediciton Unit clears", null));
		eventMap.put("BPU_CLEARS.LATE", new PMUEvent(null, "0xE8", "0,1,2,3", "0x2", "BPU_CLEARS.LATE", "2000000", "Late Branch Prediction Unit clears", null));
		eventMap.put("BPU_MISSED_CALL_RET", new PMUEvent(null, "0xE5", "0,1,2,3", "0x1", "BPU_MISSED_CALL_RET", "2000000", "Branch prediction unit missed call or return", null));
		eventMap.put("ES_REG_RENAMES", new PMUEvent(null, "0xD5", "0,1,2,3", "0x1", "ES_REG_RENAMES", "2000000", "ES segment renames", null));
		eventMap.put("IO_TRANSACTIONS", new PMUEvent(null, "0x6C", "0,1,2,3", "0x1", "IO_TRANSACTIONS", "2000000", "I/O transactions", null));
		eventMap.put("L1I.CYCLES_STALLED", new PMUEvent(null, "0x80", "0,1,2,3", "0x4", "L1I.CYCLES_STALLED", "2000000", "L1I instruction fetch stall cycles", null));
		eventMap.put("L1I.HITS", new PMUEvent(null, "0x80", "0,1,2,3", "0x1", "L1I.HITS", "2000000", "L1I instruction fetch hits", null));
		eventMap.put("L1I.MISSES", new PMUEvent(null, "0x80", "0,1,2,3", "0x2", "L1I.MISSES", "2000000", "L1I instruction fetch misses", null));
		eventMap.put("L1I.READS", new PMUEvent(null, "0x80", "0,1,2,3", "0x3", "L1I.READS", "2000000", "L1I Instruction fetches", null));
		eventMap.put("LARGE_ITLB.HIT", new PMUEvent(null, "0x82", "0,1,2,3", "0x1", "LARGE_ITLB.HIT", "200000", "Large ITLB hit", null));
		eventMap.put("LOAD_BLOCK.OVERLAP_STORE", new PMUEvent(null, "0x3", "0,1,2,3", "0x2", "LOAD_BLOCK.OVERLAP_STORE", "200000", "Loads that partially overlap an earlier store", null));
		eventMap.put("LOAD_DISPATCH.ANY", new PMUEvent(null, "0x13", "0,1,2,3", "0x7", "LOAD_DISPATCH.ANY", "2000000", "All loads dispatched", null));
		eventMap.put("LOAD_DISPATCH.MOB", new PMUEvent(null, "0x13", "0,1,2,3", "0x4", "LOAD_DISPATCH.MOB", "2000000", "Loads dispatched from the MOB", null));
		eventMap.put("LOAD_DISPATCH.RS", new PMUEvent(null, "0x13", "0,1,2,3", "0x1", "LOAD_DISPATCH.RS", "2000000", "Loads dispatched that bypass the MOB", null));
		eventMap.put("LOAD_DISPATCH.RS_DELAYED", new PMUEvent(null, "0x13", "0,1,2,3", "0x2", "LOAD_DISPATCH.RS_DELAYED", "2000000", "Loads dispatched from stage 305", null));
		eventMap.put("PARTIAL_ADDRESS_ALIAS", new PMUEvent(null, "0x7", "0,1,2,3", "0x1", "PARTIAL_ADDRESS_ALIAS", "200000", "False dependencies due to partial address aliasing", null));
		eventMap.put("RAT_STALLS.ANY", new PMUEvent(null, "0xD2", "0,1,2,3", "0xf", "RAT_STALLS.ANY", "2000000", "All RAT stall cycles", null));
		eventMap.put("RAT_STALLS.FLAGS", new PMUEvent(null, "0xD2", "0,1,2,3", "0x1", "RAT_STALLS.FLAGS", "2000000", "Flag stall cycles", null));
		eventMap.put("RAT_STALLS.REGISTERS", new PMUEvent(null, "0xD2", "0,1,2,3", "0x2", "RAT_STALLS.REGISTERS", "2000000", "Partial register stall cycles", null));
		eventMap.put("RAT_STALLS.ROB_READ_PORT", new PMUEvent(null, "0xD2", "0,1,2,3", "0x4", "RAT_STALLS.ROB_READ_PORT", "2000000", "ROB read port stalls cycles", null));
		eventMap.put("RAT_STALLS.SCOREBOARD", new PMUEvent(null, "0xD2", "0,1,2,3", "0x8", "RAT_STALLS.SCOREBOARD", "2000000", "Scoreboard stall cycles", null));
		eventMap.put("SB_DRAIN.ANY", new PMUEvent(null, "0x4", "0,1,2,3", "0x7", "SB_DRAIN.ANY", "200000", "All Store buffer stall cycles", null));
		eventMap.put("SEG_RENAME_STALLS", new PMUEvent(null, "0xD4", "0,1,2,3", "0x1", "SEG_RENAME_STALLS", "2000000", "Segment rename stall cycles", null));
		eventMap.put("SNOOP_RESPONSE.HIT", new PMUEvent(null, "0xB8", "0,1,2,3", "0x1", "SNOOP_RESPONSE.HIT", "100000", "Thread responded HIT to snoop", null));
		eventMap.put("SNOOP_RESPONSE.HITE", new PMUEvent(null, "0xB8", "0,1,2,3", "0x2", "SNOOP_RESPONSE.HITE", "100000", "Thread responded HITE to snoop", null));
		eventMap.put("SNOOP_RESPONSE.HITM", new PMUEvent(null, "0xB8", "0,1,2,3", "0x4", "SNOOP_RESPONSE.HITM", "100000", "Thread responded HITM to snoop", null));
		eventMap.put("SNOOPQ_REQUESTS.CODE", new PMUEvent(null, "0xB4", "0,1,2,3", "0x4", "SNOOPQ_REQUESTS.CODE", "100000", "Snoop code requests", null));
		eventMap.put("SNOOPQ_REQUESTS.DATA", new PMUEvent(null, "0xB4", "0,1,2,3", "0x1", "SNOOPQ_REQUESTS.DATA", "100000", "Snoop data requests", null));
		eventMap.put("SNOOPQ_REQUESTS.INVALIDATE", new PMUEvent(null, "0xB4", "0,1,2,3", "0x2", "SNOOPQ_REQUESTS.INVALIDATE", "100000", "Snoop invalidate requests", null));
		eventMap.put("SNOOPQ_REQUESTS_OUTSTANDING.CODE", new PMUEvent(null, "0xB3", null, "0x4", "SNOOPQ_REQUESTS_OUTSTANDING.CODE", "2000000", "Outstanding snoop code requests", null));
		eventMap.put("SNOOPQ_REQUESTS_OUTSTANDING.CODE_NOT_EMPTY", new PMUEvent(null, "0xB3", null, "0x4", "SNOOPQ_REQUESTS_OUTSTANDING.CODE_NOT_EMPTY", "2000000", "Cycles snoop code requests queued", null));
		eventMap.put("SNOOPQ_REQUESTS_OUTSTANDING.DATA", new PMUEvent(null, "0xB3", null, "0x1", "SNOOPQ_REQUESTS_OUTSTANDING.DATA", "2000000", "Outstanding snoop data requests", null));
		eventMap.put("SNOOPQ_REQUESTS_OUTSTANDING.DATA_NOT_EMPTY", new PMUEvent(null, "0xB3", null, "0x1", "SNOOPQ_REQUESTS_OUTSTANDING.DATA_NOT_EMPTY", "2000000", "Cycles snoop data requests queued", null));
		eventMap.put("SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE", new PMUEvent(null, "0xB3", null, "0x2", "SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE", "2000000", "Outstanding snoop invalidate requests", null));
		eventMap.put("SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE_NOT_EMPTY", new PMUEvent(null, "0xB3", null, "0x2", "SNOOPQ_REQUESTS_OUTSTANDING.INVALIDATE_NOT_EMPTY", "2000000", "Cycles snoop invalidate requests queued", null));
		eventMap.put("SQ_FULL_STALL_CYCLES", new PMUEvent(null, "0xF6", "0,1,2,3", "0x1", "SQ_FULL_STALL_CYCLES", "2000000", "Super Queue full stall cycles", null));
		eventMap.put("ARITH.CYCLES_DIV_BUSY", new PMUEvent(null, "0x14", "0,1,2,3", "0x1", "ARITH.CYCLES_DIV_BUSY", "2000000", "Cycles the divider is busy", null));
		eventMap.put("ARITH.DIV", new PMUEvent(null, "0x14", "0,1,2,3", "0x1", "ARITH.DIV", "2000000", "Divide Operations executed", null));
		eventMap.put("ARITH.MUL", new PMUEvent(null, "0x14", "0,1,2,3", "0x2", "ARITH.MUL", "2000000", "Multiply operations executed", null));
		eventMap.put("BACLEAR.BAD_TARGET", new PMUEvent(null, "0xE6", "0,1,2,3", "0x2", "BACLEAR.BAD_TARGET", "2000000", "BACLEAR asserted with bad target address", null));
		eventMap.put("BACLEAR.CLEAR", new PMUEvent(null, "0xE6", "0,1,2,3", "0x1", "BACLEAR.CLEAR", "2000000", "BACLEAR asserted, regardless of cause ", null));
		eventMap.put("BACLEAR_FORCE_IQ", new PMUEvent(null, "0xA7", "0,1,2,3", "0x1", "BACLEAR_FORCE_IQ", "2000000", "Instruction queue forced BACLEAR", null));
		eventMap.put("BR_INST_DECODED", new PMUEvent(null, "0xE0", "0,1,2,3", "0x1", "BR_INST_DECODED", "2000000", "Branch instructions decoded", null));
		eventMap.put("BR_INST_EXEC.ANY", new PMUEvent(null, "0x88", "0,1,2,3", "0x7f", "BR_INST_EXEC.ANY", "200000", "Branch instructions executed", null));
		eventMap.put("BR_INST_EXEC.COND", new PMUEvent(null, "0x88", "0,1,2,3", "0x1", "BR_INST_EXEC.COND", "200000", "Conditional branch instructions executed", null));
		eventMap.put("BR_INST_EXEC.DIRECT", new PMUEvent(null, "0x88", "0,1,2,3", "0x2", "BR_INST_EXEC.DIRECT", "200000", "Unconditional branches executed", null));
		eventMap.put("BR_INST_EXEC.DIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0x10", "BR_INST_EXEC.DIRECT_NEAR_CALL", "20000", "Unconditional call branches executed", null));
		eventMap.put("BR_INST_EXEC.INDIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0x20", "BR_INST_EXEC.INDIRECT_NEAR_CALL", "20000", "Indirect call branches executed", null));
		eventMap.put("BR_INST_EXEC.INDIRECT_NON_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0x4", "BR_INST_EXEC.INDIRECT_NON_CALL", "20000", "Indirect non call branches executed", null));
		eventMap.put("BR_INST_EXEC.NEAR_CALLS", new PMUEvent(null, "0x88", "0,1,2,3", "0x30", "BR_INST_EXEC.NEAR_CALLS", "20000", "Call branches executed", null));
		eventMap.put("BR_INST_EXEC.NON_CALLS", new PMUEvent(null, "0x88", "0,1,2,3", "0x7", "BR_INST_EXEC.NON_CALLS", "200000", "All non call branches executed", null));
		eventMap.put("BR_INST_EXEC.RETURN_NEAR", new PMUEvent(null, "0x88", "0,1,2,3", "0x8", "BR_INST_EXEC.RETURN_NEAR", "20000", "Indirect return branches executed", null));
		eventMap.put("BR_INST_EXEC.TAKEN", new PMUEvent(null, "0x88", "0,1,2,3", "0x40", "BR_INST_EXEC.TAKEN", "200000", "Taken branches executed", null));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent(null, "0xC4", "0,1,2,3", "0x4", "BR_INST_RETIRED.ALL_BRANCHES", "200000", "Retired branch instructions (Precise Event)", null));
		eventMap.put("BR_INST_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x1", "BR_INST_RETIRED.CONDITIONAL", "200000", "Retired conditional branch instructions (Precise Event)", null));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL", "20000", "Retired near call instructions (Precise Event)", null));
		eventMap.put("BR_MISP_EXEC.ANY", new PMUEvent(null, "0x89", "0,1,2,3", "0x7f", "BR_MISP_EXEC.ANY", "20000", "Mispredicted branches executed", null));
		eventMap.put("BR_MISP_EXEC.COND", new PMUEvent(null, "0x89", "0,1,2,3", "0x1", "BR_MISP_EXEC.COND", "20000", "Mispredicted conditional branches executed", null));
		eventMap.put("BR_MISP_EXEC.DIRECT", new PMUEvent(null, "0x89", "0,1,2,3", "0x2", "BR_MISP_EXEC.DIRECT", "20000", "Mispredicted unconditional branches executed", null));
		eventMap.put("BR_MISP_EXEC.DIRECT_NEAR_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0x10", "BR_MISP_EXEC.DIRECT_NEAR_CALL", "2000", "Mispredicted non call branches executed", null));
		eventMap.put("BR_MISP_EXEC.INDIRECT_NEAR_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0x20", "BR_MISP_EXEC.INDIRECT_NEAR_CALL", "2000", "Mispredicted indirect call branches executed", null));
		eventMap.put("BR_MISP_EXEC.INDIRECT_NON_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0x4", "BR_MISP_EXEC.INDIRECT_NON_CALL", "2000", "Mispredicted indirect non call branches executed", null));
		eventMap.put("BR_MISP_EXEC.NEAR_CALLS", new PMUEvent(null, "0x89", "0,1,2,3", "0x30", "BR_MISP_EXEC.NEAR_CALLS", "2000", "Mispredicted call branches executed", null));
		eventMap.put("BR_MISP_EXEC.NON_CALLS", new PMUEvent(null, "0x89", "0,1,2,3", "0x7", "BR_MISP_EXEC.NON_CALLS", "20000", "Mispredicted non call branches executed", null));
		eventMap.put("BR_MISP_EXEC.RETURN_NEAR", new PMUEvent(null, "0x89", "0,1,2,3", "0x8", "BR_MISP_EXEC.RETURN_NEAR", "2000", "Mispredicted return branches executed", null));
		eventMap.put("BR_MISP_EXEC.TAKEN", new PMUEvent(null, "0x89", "0,1,2,3", "0x40", "BR_MISP_EXEC.TAKEN", "20000", "Mispredicted taken branches executed", null));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent(null, "0xC5", "0,1,2,3", "0x4", "BR_MISP_RETIRED.ALL_BRANCHES", "20000", "Mispredicted retired branch instructions (Precise Event)", null));
		eventMap.put("BR_MISP_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC5", "0,1,2,3", "0x1", "BR_MISP_RETIRED.CONDITIONAL", "20000", "Mispredicted conditional retired branches (Precise Event)", null));
		eventMap.put("BR_MISP_RETIRED.NEAR_CALL", new PMUEvent(null, "0xC5", "0,1,2,3", "0x2", "BR_MISP_RETIRED.NEAR_CALL", "2000", "Mispredicted near retired calls (Precise Event)", null));
		eventMap.put("CPU_CLK_UNHALTED.REF", new PMUEvent(null, "0x0", "Fixed counter 3", "0x0", "CPU_CLK_UNHALTED.REF", "2000000", "Reference cycles when thread is not halted (fixed counter)", null));
		eventMap.put("CPU_CLK_UNHALTED.REF_P", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_P", "100000", "Reference base clock (133 Mhz) cycles when thread is not halted (programmable counter)", null));
		eventMap.put("CPU_CLK_UNHALTED.THREAD", new PMUEvent(null, "0x0", "Fixed counter 2", "0x0", "CPU_CLK_UNHALTED.THREAD", "2000000", "Cycles when thread is not halted (fixed counter)", null));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P", new PMUEvent(null, "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P", "2000000", "Cycles when thread is not halted (programmable counter)", null));
		eventMap.put("CPU_CLK_UNHALTED.TOTAL_CYCLES", new PMUEvent(null, "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.TOTAL_CYCLES", "2000000", "Total CPU cycles", null));
		eventMap.put("ILD_STALL.ANY", new PMUEvent(null, "0x87", "0,1,2,3", "0xf", "ILD_STALL.ANY", "2000000", "Any Instruction Length Decoder stall cycles", null));
		eventMap.put("ILD_STALL.IQ_FULL", new PMUEvent(null, "0x87", "0,1,2,3", "0x4", "ILD_STALL.IQ_FULL", "2000000", "Instruction Queue full stall cycles", null));
		eventMap.put("ILD_STALL.LCP", new PMUEvent(null, "0x87", "0,1,2,3", "0x1", "ILD_STALL.LCP", "2000000", "Length Change Prefix stall cycles", null));
		eventMap.put("ILD_STALL.MRU", new PMUEvent(null, "0x87", "0,1,2,3", "0x2", "ILD_STALL.MRU", "2000000", "Stall cycles due to BPU MRU bypass", null));
		eventMap.put("ILD_STALL.REGEN", new PMUEvent(null, "0x87", "0,1,2,3", "0x8", "ILD_STALL.REGEN", "2000000", "Regen stall cycles", null));
		eventMap.put("INST_DECODED.DEC0", new PMUEvent(null, "0x18", "0,1,2,3", "0x1", "INST_DECODED.DEC0", "2000000", "Instructions that must be decoded by decoder 0", null));
		eventMap.put("INST_QUEUE_WRITE_CYCLES", new PMUEvent(null, "0x1E", "0,1,2,3", "0x1", "INST_QUEUE_WRITE_CYCLES", "2000000", "Cycles instructions are written to the instruction queue", null));
		eventMap.put("INST_QUEUE_WRITES", new PMUEvent(null, "0x17", "0,1,2,3", "0x1", "INST_QUEUE_WRITES", "2000000", "Instructions written to instruction queue.", null));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent(null, "0x0", "Fixed counter 1", "0x0", "INST_RETIRED.ANY", "2000000", "Instructions retired (fixed counter)", null));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent(null, "0xC0", "0,1,2,3", "0x1", "INST_RETIRED.ANY_P", "2000000", "Instructions retired (Programmable counter and Precise Event)", null));
		eventMap.put("INST_RETIRED.MMX", new PMUEvent(null, "0xC0", "0,1,2,3", "0x4", "INST_RETIRED.MMX", "2000000", "Retired MMX instructions (Precise Event)", null));
		eventMap.put("INST_RETIRED.TOTAL_CYCLES", new PMUEvent(null, "0xC0", "0,1,2,3", "0x1", "INST_RETIRED.TOTAL_CYCLES", "2000000", "Total cycles (Precise Event)", null));
		eventMap.put("INST_RETIRED.X87", new PMUEvent(null, "0xC0", "0,1,2,3", "0x2", "INST_RETIRED.X87", "2000000", "Retired floating-point operations (Precise Event)", null));
		eventMap.put("LOAD_HIT_PRE", new PMUEvent(null, "0x4C", "0,1", "0x1", "LOAD_HIT_PRE", "200000", "Load operations conflicting with software prefetches", null));
		eventMap.put("LSD.ACTIVE", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.ACTIVE", "2000000", "Cycles when uops were delivered by the LSD", null));
		eventMap.put("LSD.INACTIVE", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.INACTIVE", "2000000", "Cycles no uops were delivered by the LSD", null));
		eventMap.put("LSD_OVERFLOW", new PMUEvent(null, "0x20", "0,1,2,3", "0x1", "LSD_OVERFLOW", "2000000", "Loops that can't stream from the instruction queue", null));
		eventMap.put("MACHINE_CLEARS.CYCLES", new PMUEvent(null, "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.CYCLES", "20000", "Cycles machine clear asserted", null));
		eventMap.put("MACHINE_CLEARS.MEM_ORDER", new PMUEvent(null, "0xC3", "0,1,2,3", "0x2", "MACHINE_CLEARS.MEM_ORDER", "20000", "Execution pipeline restart due to Memory ordering conflicts", null));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent(null, "0xC3", "0,1,2,3", "0x4", "MACHINE_CLEARS.SMC", "20000", "Self-Modifying Code detected", null));
		eventMap.put("RESOURCE_STALLS.ANY", new PMUEvent(null, "0xA2", "0,1,2,3", "0x1", "RESOURCE_STALLS.ANY", "2000000", "Resource related stall cycles", null));
		eventMap.put("RESOURCE_STALLS.FPCW", new PMUEvent(null, "0xA2", "0,1,2,3", "0x20", "RESOURCE_STALLS.FPCW", "2000000", "FPU control word write stall cycles", null));
		eventMap.put("RESOURCE_STALLS.LOAD", new PMUEvent(null, "0xA2", "0,1,2,3", "0x2", "RESOURCE_STALLS.LOAD", "2000000", "Load buffer stall cycles", null));
		eventMap.put("RESOURCE_STALLS.MXCSR", new PMUEvent(null, "0xA2", "0,1,2,3", "0x40", "RESOURCE_STALLS.MXCSR", "2000000", "MXCSR rename stall cycles", null));
		eventMap.put("RESOURCE_STALLS.OTHER", new PMUEvent(null, "0xA2", "0,1,2,3", "0x80", "RESOURCE_STALLS.OTHER", "2000000", "Other Resource related stall cycles", null));
		eventMap.put("RESOURCE_STALLS.ROB_FULL", new PMUEvent(null, "0xA2", "0,1,2,3", "0x10", "RESOURCE_STALLS.ROB_FULL", "2000000", "ROB full stall cycles", null));
		eventMap.put("RESOURCE_STALLS.RS_FULL", new PMUEvent(null, "0xA2", "0,1,2,3", "0x4", "RESOURCE_STALLS.RS_FULL", "2000000", "Reservation Station full stall cycles", null));
		eventMap.put("RESOURCE_STALLS.STORE", new PMUEvent(null, "0xA2", "0,1,2,3", "0x8", "RESOURCE_STALLS.STORE", "2000000", "Store buffer stall cycles", null));
		eventMap.put("SSEX_UOPS_RETIRED.PACKED_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x4", "SSEX_UOPS_RETIRED.PACKED_DOUBLE", "200000", "SIMD Packed-Double Uops retired (Precise Event)", null));
		eventMap.put("SSEX_UOPS_RETIRED.PACKED_SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x1", "SSEX_UOPS_RETIRED.PACKED_SINGLE", "200000", "SIMD Packed-Single Uops retired (Precise Event)", null));
		eventMap.put("SSEX_UOPS_RETIRED.SCALAR_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x8", "SSEX_UOPS_RETIRED.SCALAR_DOUBLE", "200000", "SIMD Scalar-Double Uops retired (Precise Event)", null));
		eventMap.put("SSEX_UOPS_RETIRED.SCALAR_SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x2", "SSEX_UOPS_RETIRED.SCALAR_SINGLE", "200000", "SIMD Scalar-Single Uops retired (Precise Event)", null));
		eventMap.put("SSEX_UOPS_RETIRED.VECTOR_INTEGER", new PMUEvent(null, "0xC7", "0,1,2,3", "0x10", "SSEX_UOPS_RETIRED.VECTOR_INTEGER", "200000", "SIMD Vector Integer Uops retired (Precise Event)", null));
		eventMap.put("UOP_UNFUSION", new PMUEvent(null, "0xDB", "0,1,2,3", "0x1", "UOP_UNFUSION", "2000000", "Uop unfusions due to FP exceptions", null));
		eventMap.put("UOPS_DECODED.ESP_FOLDING", new PMUEvent(null, "0xD1", "0,1,2,3", "0x4", "UOPS_DECODED.ESP_FOLDING", "2000000", "Stack pointer instructions decoded", null));
		eventMap.put("UOPS_DECODED.ESP_SYNC", new PMUEvent(null, "0xD1", "0,1,2,3", "0x8", "UOPS_DECODED.ESP_SYNC", "2000000", "Stack pointer sync operations", null));
		eventMap.put("UOPS_DECODED.MS_CYCLES_ACTIVE", new PMUEvent(null, "0xD1", "0,1,2,3", "0x2", "UOPS_DECODED.MS_CYCLES_ACTIVE", "2000000", "Uops decoded by Microcode Sequencer", null));
		eventMap.put("UOPS_DECODED.STALL_CYCLES", new PMUEvent(null, "0xD1", "0,1,2,3", "0x1", "UOPS_DECODED.STALL_CYCLES", "2000000", "Cycles no Uops are decoded", null));
		eventMap.put("UOPS_EXECUTED.CORE_ACTIVE_CYCLES", new PMUEvent(null, "0xB1", "0,1,2,3", "0x3f", "UOPS_EXECUTED.CORE_ACTIVE_CYCLES", "2000000", "Cycles Uops executed on any port (core count)", null));
		eventMap.put("UOPS_EXECUTED.CORE_ACTIVE_CYCLES_NO_PORT5", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1f", "UOPS_EXECUTED.CORE_ACTIVE_CYCLES_NO_PORT5", "2000000", "Cycles Uops executed on ports 0-4 (core count)", null));
		eventMap.put("UOPS_EXECUTED.CORE_STALL_COUNT", new PMUEvent(null, "0xB1", "0,1,2,3", "0x3f", "UOPS_EXECUTED.CORE_STALL_COUNT", "2000000", "Uops executed on any port (core count)", null));
		eventMap.put("UOPS_EXECUTED.CORE_STALL_COUNT_NO_PORT5", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1f", "UOPS_EXECUTED.CORE_STALL_COUNT_NO_PORT5", "2000000", "Uops executed on ports 0-4 (core count)", null));
		eventMap.put("UOPS_EXECUTED.CORE_STALL_CYCLES", new PMUEvent(null, "0xB1", "0,1,2,3", "0x3f", "UOPS_EXECUTED.CORE_STALL_CYCLES", "2000000", "Cycles no Uops issued on any port (core count)", null));
		eventMap.put("UOPS_EXECUTED.CORE_STALL_CYCLES_NO_PORT5", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1f", "UOPS_EXECUTED.CORE_STALL_CYCLES_NO_PORT5", "2000000", "Cycles no Uops issued on ports 0-4 (core count)", null));
		eventMap.put("UOPS_EXECUTED.PORT0", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.PORT0", "2000000", "Uops executed on port 0", null));
		eventMap.put("UOPS_EXECUTED.PORT015", new PMUEvent(null, "0xB1", "0,1,2,3", "0x40", "UOPS_EXECUTED.PORT015", "2000000", "Uops issued on ports 0, 1 or 5", null));
		eventMap.put("UOPS_EXECUTED.PORT015_STALL_CYCLES", new PMUEvent(null, "0xB1", "0,1,2,3", "0x40", "UOPS_EXECUTED.PORT015_STALL_CYCLES", "2000000", "Cycles no Uops issued on ports 0, 1 or 5", null));
		eventMap.put("UOPS_EXECUTED.PORT1", new PMUEvent(null, "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.PORT1", "2000000", "Uops executed on port 1", null));
		eventMap.put("UOPS_EXECUTED.PORT2_CORE", new PMUEvent(null, "0xB1", "0,1,2,3", "0x4", "UOPS_EXECUTED.PORT2_CORE", "2000000", "Uops executed on port 2 (core count)", null));
		eventMap.put("UOPS_EXECUTED.PORT234_CORE", new PMUEvent(null, "0xB1", "0,1,2,3", "0x80", "UOPS_EXECUTED.PORT234_CORE", "2000000", "Uops issued on ports 2, 3 or 4", null));
		eventMap.put("UOPS_EXECUTED.PORT3_CORE", new PMUEvent(null, "0xB1", "0,1,2,3", "0x8", "UOPS_EXECUTED.PORT3_CORE", "2000000", "Uops executed on port 3 (core count)", null));
		eventMap.put("UOPS_EXECUTED.PORT4_CORE", new PMUEvent(null, "0xB1", "0,1,2,3", "0x10", "UOPS_EXECUTED.PORT4_CORE", "2000000", "Uops executed on port 4 (core count)", null));
		eventMap.put("UOPS_EXECUTED.PORT5", new PMUEvent(null, "0xB1", "0,1,2,3", "0x20", "UOPS_EXECUTED.PORT5", "2000000", "Uops executed on port 5", null));
		eventMap.put("UOPS_ISSUED.ANY", new PMUEvent(null, "0xE", "0,1,2,3", "0x1", "UOPS_ISSUED.ANY", "2000000", "Uops issued", null));
		eventMap.put("UOPS_ISSUED.CORE_STALL_CYCLES", new PMUEvent(null, "0xE", "0,1,2,3", "0x1", "UOPS_ISSUED.CORE_STALL_CYCLES", "2000000", "Cycles no Uops were issued on any thread", null));
		eventMap.put("UOPS_ISSUED.CYCLES_ALL_THREADS", new PMUEvent(null, "0xE", "0,1,2,3", "0x1", "UOPS_ISSUED.CYCLES_ALL_THREADS", "2000000", "Cycles Uops were issued on either thread", null));
		eventMap.put("UOPS_ISSUED.FUSED", new PMUEvent(null, "0xE", "0,1,2,3", "0x2", "UOPS_ISSUED.FUSED", "2000000", "Fused Uops issued", null));
		eventMap.put("UOPS_ISSUED.STALL_CYCLES", new PMUEvent(null, "0xE", "0,1,2,3", "0x1", "UOPS_ISSUED.STALL_CYCLES", "2000000", "Cycles no Uops were issued", null));
		eventMap.put("UOPS_RETIRED.ACTIVE_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.ACTIVE_CYCLES", "2000000", "Cycles Uops are being retired", null));
		eventMap.put("UOPS_RETIRED.ANY", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.ANY", "2000000", "Uops retired (Precise Event)", null));
		eventMap.put("UOPS_RETIRED.MACRO_FUSED", new PMUEvent(null, "0xC2", "0,1,2,3", "0x4", "UOPS_RETIRED.MACRO_FUSED", "2000000", "Macro-fused Uops retired (Precise Event)", null));
		eventMap.put("UOPS_RETIRED.RETIRE_SLOTS", new PMUEvent(null, "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.RETIRE_SLOTS", "2000000", "Retirement slots used (Precise Event)", null));
		eventMap.put("UOPS_RETIRED.STALL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.STALL_CYCLES", "2000000", "Cycles Uops are not retiring (Precise Event)", null));
		eventMap.put("UOPS_RETIRED.TOTAL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.TOTAL_CYCLES", "2000000", "Total cycles using precise uop retired event (Precise Event)", null));
		eventMap.put("INST_RETIRED.TOTAL_CYCLES_PS", new PMUEvent(null, "0xC0", "0,1,2,3", "0x1", "INST_RETIRED.TOTAL_CYCLES_PS", "2000000", "Total cycles (Precise Event)", null));
		eventMap.put("DTLB_LOAD_MISSES.ANY", new PMUEvent(null, "0x8", "0,1,2,3", "0x1", "DTLB_LOAD_MISSES.ANY", "200000", "DTLB load misses", null));
		eventMap.put("DTLB_LOAD_MISSES.LARGE_WALK_COMPLETED", new PMUEvent(null, "0x8", "0,1,2,3", "0x80", "DTLB_LOAD_MISSES.LARGE_WALK_COMPLETED", "200000", "DTLB load miss large page walks", null));
		eventMap.put("DTLB_LOAD_MISSES.PDE_MISS", new PMUEvent(null, "0x8", "0,1,2,3", "0x20", "DTLB_LOAD_MISSES.PDE_MISS", "200000", "DTLB load miss caused by low part of address", null));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT", new PMUEvent(null, "0x8", "0,1,2,3", "0x10", "DTLB_LOAD_MISSES.STLB_HIT", "2000000", "DTLB second level hit", null));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x8", "0,1,2,3", "0x2", "DTLB_LOAD_MISSES.WALK_COMPLETED", "200000", "DTLB load miss page walks complete", null));
		eventMap.put("DTLB_LOAD_MISSES.WALK_CYCLES", new PMUEvent(null, "0x8", "0,1,2,3", "0x4", "DTLB_LOAD_MISSES.WALK_CYCLES", "200000", "DTLB load miss page walk cycles", null));
		eventMap.put("DTLB_MISSES.ANY", new PMUEvent(null, "0x49", "0,1,2,3", "0x1", "DTLB_MISSES.ANY", "200000", "DTLB misses", null));
		eventMap.put("DTLB_MISSES.LARGE_WALK_COMPLETED", new PMUEvent(null, "0x49", "0,1,2,3", "0x80", "DTLB_MISSES.LARGE_WALK_COMPLETED", "200000", "DTLB miss large page walks", null));
		eventMap.put("DTLB_MISSES.PDE_MISS", new PMUEvent(null, "0x49", "0,1,2,3", "0x20", "DTLB_MISSES.PDE_MISS", "200000", "DTLB misses casued by low part of address", null));
		eventMap.put("DTLB_MISSES.STLB_HIT", new PMUEvent(null, "0x49", "0,1,2,3", "0x10", "DTLB_MISSES.STLB_HIT", "200000", "DTLB first level misses but second level hit", null));
		eventMap.put("DTLB_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x49", "0,1,2,3", "0x2", "DTLB_MISSES.WALK_COMPLETED", "200000", "DTLB miss page walks", null));
		eventMap.put("DTLB_MISSES.WALK_CYCLES", new PMUEvent(null, "0x49", "0,1,2,3", "0x4", "DTLB_MISSES.WALK_CYCLES", "2000000", "DTLB miss page walk cycles", null));
		eventMap.put("EPT.WALK_CYCLES", new PMUEvent(null, "0x4F", "0,1,2,3", "0x10", "EPT.WALK_CYCLES", "2000000", "Extended Page Table walk cycles", null));
		eventMap.put("ITLB_FLUSH", new PMUEvent(null, "0xAE", "0,1,2,3", "0x1", "ITLB_FLUSH", "2000000", "ITLB flushes", null));
		eventMap.put("ITLB_MISS_RETIRED", new PMUEvent(null, "0xC8", "0,1,2,3", "0x20", "ITLB_MISS_RETIRED", "200000", "Retired instructions that missed the ITLB (Precise Event)", null));
		eventMap.put("ITLB_MISSES.ANY", new PMUEvent(null, "0x85", "0,1,2,3", "0x1", "ITLB_MISSES.ANY", "200000", "ITLB miss", null));
		eventMap.put("ITLB_MISSES.LARGE_WALK_COMPLETED", new PMUEvent(null, "0x85", "0,1,2,3", "0x80", "ITLB_MISSES.LARGE_WALK_COMPLETED", "200000", "ITLB miss large page walks", null));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x85", "0,1,2,3", "0x2", "ITLB_MISSES.WALK_COMPLETED", "200000", "ITLB miss page walks", null));
		eventMap.put("ITLB_MISSES.WALK_CYCLES", new PMUEvent(null, "0x85", "0,1,2,3", "0x4", "ITLB_MISSES.WALK_CYCLES", "2000000", "ITLB miss page walk cycles", null));
		eventMap.put("MEM_LOAD_RETIRED.DTLB_MISS", new PMUEvent(null, "0xCB", "0,1,2,3", "0x80", "MEM_LOAD_RETIRED.DTLB_MISS", "200000", "Retired loads that miss the DTLB (Precise Event)", null));
		eventMap.put("MEM_STORE_RETIRED.DTLB_MISS", new PMUEvent(null, "0xC", "0,1,2,3", "0x1", "MEM_STORE_RETIRED.DTLB_MISS", "200000", "Retired stores that miss the DTLB (Precise Event)", null));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}