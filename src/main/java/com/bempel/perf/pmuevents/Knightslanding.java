package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Knightslanding implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Knightslanding());
    }

    {
		eventMap.put("L2_REQUESTS_REJECT.ALL", new PMUEvent(null, "0x30", "0,1", "0x0", "L2_REQUESTS_REJECT.ALL", "200003", "Counts the number of MEC requests from the L2Q that reference a cache line (cacheable requests) exlcuding SW prefetches filling only to L2 cache and L1 evictions (automatically exlcudes L2HWP, UC, WC) that were rejected - Multiple repeated rejects should be counted multiple times", null));
		eventMap.put("CORE_REJECT_L2Q.ALL", new PMUEvent(null, "0x31", "0,1", "0x0", "CORE_REJECT_L2Q.ALL", "200003", "Counts the number of MEC requests that were not accepted into the L2Q because of any L2  queue reject condition. There is no concept of at-ret here. It might include requests due to instructions in the speculative path.", null));
		eventMap.put("L2_REQUESTS.REFERENCE", new PMUEvent(null, "0x2E", "0,1", "0x4f", "L2_REQUESTS.REFERENCE", "200003", "Counts the total number of L2 cache references.", null));
		eventMap.put("L2_REQUESTS.MISS", new PMUEvent(null, "0x2E", "0,1", "0x41", "L2_REQUESTS.MISS", "200003", "Counts the number of L2 cache misses", null));
		eventMap.put("FETCH_STALL.ICACHE_FILL_PENDING_CYCLES", new PMUEvent("This event counts the number of core cycles the fetch stalls because of an icache miss. This is a cumulative count of cycles the NIP stalled for all icache misses. ", "0x86", "0,1", "0x4", "FETCH_STALL.ICACHE_FILL_PENDING_CYCLES", "200003", "Counts the number of core cycles the fetch stalls because of an icache miss. This is a cummulative count of core cycles the fetch stalled for all icache misses. ", null));
		eventMap.put("MEM_UOPS_RETIRED.L1_MISS_LOADS", new PMUEvent("This event counts the number of load micro-ops retired that miss in L1 Data cache. Note that prefetch misses will not be counted. ", "0x04", "0,1", "0x1", "MEM_UOPS_RETIRED.L1_MISS_LOADS", "200003", "Counts the number of load micro-ops retired that miss in L1 D cache", null));
		eventMap.put("MEM_UOPS_RETIRED.L2_HIT_LOADS", new PMUEvent(null, "0x04", "0,1", "0x2", "MEM_UOPS_RETIRED.L2_HIT_LOADS", "200003", "Counts the number of load micro-ops retired that hit in the L2", null));
		eventMap.put("MEM_UOPS_RETIRED.L2_MISS_LOADS", new PMUEvent(null, "0x04", "0,1", "0x4", "MEM_UOPS_RETIRED.L2_MISS_LOADS", "100007", "Counts the number of load micro-ops retired that miss in the L2", null));
		eventMap.put("MEM_UOPS_RETIRED.UTLB_MISS_LOADS", new PMUEvent(null, "0x04", "0,1", "0x10", "MEM_UOPS_RETIRED.UTLB_MISS_LOADS", "200003", "Counts the number of load micro-ops retired that caused micro TLB miss", null));
		eventMap.put("MEM_UOPS_RETIRED.HITM", new PMUEvent(null, "0x04", "0,1", "0x20", "MEM_UOPS_RETIRED.HITM", "200003", "Counts the loads retired that get the data from the other core in the same tile in M state", null));
		eventMap.put("MEM_UOPS_RETIRED.ALL_LOADS", new PMUEvent("This event counts the number of load micro-ops retired.", "0x04", "0,1", "0x40", "MEM_UOPS_RETIRED.ALL_LOADS", "200003", "Counts all the load micro-ops retired", null));
		eventMap.put("MEM_UOPS_RETIRED.ALL_STORES", new PMUEvent("This event counts the number of store micro-ops retired.", "0x04", "0,1", "0x80", "MEM_UOPS_RETIRED.ALL_STORES", "200003", "Counts all the store micro-ops retired", null));
		eventMap.put("OFFCORE_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE", "100007", "Counts the matrix events specified by MSR_OFFCORE_RESPx", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.OUTSTANDING", "100007", "Counts any Prefetch requests that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_FAR_TILE_M", "100007", "Counts any Prefetch requests that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_FAR_TILE_E_F", "100007", "Counts any Prefetch requests that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_NEAR_TILE_M", "100007", "Counts any Prefetch requests that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_NEAR_TILE_E_F", "100007", "Counts any Prefetch requests that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.ANY_RESPONSE", "100007", "Counts any Prefetch requests that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.OUTSTANDING", "100007", "Counts any Read request  that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_FAR_TILE_M", "100007", "Counts any Read request  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_FAR_TILE_E_F", "100007", "Counts any Read request  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_NEAR_TILE_M", "100007", "Counts any Read request  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_NEAR_TILE_E_F", "100007", "Counts any Read request  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.ANY_RESPONSE", "100007", "Counts any Read request  that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.OUTSTANDING", "100007", "Counts Demand code reads and prefetch code read requests  that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_FAR_TILE_M", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_FAR_TILE_E_F", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_NEAR_TILE_M", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.ANY_RESPONSE", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.OUTSTANDING", "100007", "Counts Demand cacheable data write requests  that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_FAR_TILE_M", "100007", "Counts Demand cacheable data write requests  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_FAR_TILE_E_F", "100007", "Counts Demand cacheable data write requests  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_NEAR_TILE_M", "100007", "Counts Demand cacheable data write requests  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Demand cacheable data write requests  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.ANY_RESPONSE", "100007", "Counts Demand cacheable data write requests  that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.OUTSTANDING", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_FAR_TILE_M", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_FAR_TILE_E_F", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_NEAR_TILE_M", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.ANY_RESPONSE", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.OUTSTANDING", "100007", "Counts any request that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_FAR_TILE_M", "100007", "Counts any request that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_FAR_TILE_E_F", "100007", "Counts any request that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_NEAR_TILE_M", "100007", "Counts any request that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_NEAR_TILE_E_F", "100007", "Counts any request that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.ANY_RESPONSE", "100007", "Counts any request that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", "100007", "Counts all streaming stores (WC and should be programmed on PMC1) that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.ANY_RESPONSE", "100007", "Counts Partial streaming stores (WC and should be programmed on PMC1) that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.OUTSTANDING", "100007", "Counts L1 data HW prefetches that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_FAR_TILE_M", "100007", "Counts L1 data HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_FAR_TILE_E_F", "100007", "Counts L1 data HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_NEAR_TILE_M", "100007", "Counts L1 data HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_NEAR_TILE_E_F", "100007", "Counts L1 data HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.ANY_RESPONSE", "100007", "Counts L1 data HW prefetches that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.OUTSTANDING", "100007", "Counts Software Prefetches that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_FAR_TILE_M", "100007", "Counts Software Prefetches that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_FAR_TILE_E_F", "100007", "Counts Software Prefetches that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_NEAR_TILE_M", "100007", "Counts Software Prefetches that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Software Prefetches that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.ANY_RESPONSE", "100007", "Counts Software Prefetches that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.ANY_RESPONSE", "100007", "Counts Full streaming stores (WC and should be programmed on PMC1) that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.OUTSTANDING", "100007", "Counts Bus locks and split lock requests that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_FAR_TILE_M", "100007", "Counts Bus locks and split lock requests that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_FAR_TILE_E_F", "100007", "Counts Bus locks and split lock requests that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_NEAR_TILE_M", "100007", "Counts Bus locks and split lock requests that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Bus locks and split lock requests that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.ANY_RESPONSE", "100007", "Counts Bus locks and split lock requests that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.OUTSTANDING", "100007", "Counts UC code reads (valid only for Outstanding response type)  that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_FAR_TILE_M", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_FAR_TILE_E_F", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_NEAR_TILE_M", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_NEAR_TILE_E_F", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.ANY_RESPONSE", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_FAR_TILE_M", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_FAR_TILE_E_F", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_NEAR_TILE_M", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.ANY_RESPONSE", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.OUTSTANDING", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_FAR_TILE_M", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_FAR_TILE_E_F", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_NEAR_TILE_M", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.ANY_RESPONSE", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.OUTSTANDING", "100007", "Counts L2 code HW prefetches that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_FAR_TILE_M", "100007", "Counts L2 code HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_FAR_TILE_E_F", "100007", "Counts L2 code HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_NEAR_TILE_M", "100007", "Counts L2 code HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_NEAR_TILE_E_F", "100007", "Counts L2 code HW prefetches that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.ANY_RESPONSE", "100007", "Counts L2 code HW prefetches that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_FAR_TILE_M", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_FAR_TILE_E_F", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_NEAR_TILE_M", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_NEAR_TILE_E_F", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.SUPPLIER_NONE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.SUPPLIER_NONE", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that provides no supplier details", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.ANY_RESPONSE", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.OUTSTANDING", "100007", "Counts demand code reads and prefetch code reads that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_FAR_TILE_M", "100007", "Counts demand code reads and prefetch code reads that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_FAR_TILE_E_F", "100007", "Counts demand code reads and prefetch code reads that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_NEAR_TILE_M", "100007", "Counts demand code reads and prefetch code reads that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_NEAR_TILE_E_F", "100007", "Counts demand code reads and prefetch code reads that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", "100007", "Counts demand code reads and prefetch code reads that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.OUTSTANDING", "100007", "Counts Demand cacheable data writes that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_FAR_TILE_M", "100007", "Counts Demand cacheable data writes that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_FAR_TILE_E_F", "100007", "Counts Demand cacheable data writes that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_NEAR_TILE_M", "100007", "Counts Demand cacheable data writes that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_NEAR_TILE_E_F", "100007", "Counts Demand cacheable data writes that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", "100007", "Counts Demand cacheable data writes that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.OUTSTANDING", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.OUTSTANDING", "100007", "Counts demand cacheable data and L1 prefetch data reads that are outstanding, per weighted cycle, from the time of the request to when any response is received. The oustanding response should be programmed only on PMC0. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_FAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_FAR_TILE_M", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_FAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_FAR_TILE_E_F", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses from a snoop request hit with data forwarded from its Far(not in the same quadrant as the request)-other tile's L2 in E/F state. Valid only for SNC4 cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_NEAR_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_NEAR_TILE_M", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in M state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_NEAR_TILE_E_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_NEAR_TILE_E_F", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses from a snoop request hit with data forwarded from its Near-other tile's L2 in E/F state. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for any response", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_M", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_M", "100007", "Counts Demand cacheable data writes that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_M", "100007", "Counts demand code reads and prefetch code reads that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_M", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_M", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_M", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_M", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_M", "100007", "Counts Bus locks and split lock requests that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_M", "100007", "Counts Software Prefetches that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_M", "100007", "Counts L1 data HW prefetches that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_M", "100007", "Counts any request that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_M", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_M", "100007", "Counts Demand cacheable data write requests  that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_M", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_M", "100007", "Counts any Read request  that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_THIS_TILE_M", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_THIS_TILE_M", "100007", "Counts any Prefetch requests that accounts for responses which hit its own tile's L2 with data in M state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_E", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_E", "100007", "Counts Demand cacheable data writes that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_E", "100007", "Counts demand code reads and prefetch code reads that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_E", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_THIS_TILE_E", "100007", "Counts L2 code HW prefetches that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_E", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_E", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_E", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_E", "100007", "Counts Bus locks and split lock requests that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_E", "100007", "Counts Software Prefetches that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_E", "100007", "Counts L1 data HW prefetches that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_E", "100007", "Counts any request that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_E", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_E", "100007", "Counts Demand cacheable data write requests  that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_E", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_E", "100007", "Counts any Read request  that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_THIS_TILE_E", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_THIS_TILE_E", "100007", "Counts any Prefetch requests that accounts for responses which hit its own tile's L2 with data in E state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_S", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_S", "100007", "Counts Demand cacheable data writes that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_S", "100007", "Counts demand code reads and prefetch code reads that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_S", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_S", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_S", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_S", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_S", "100007", "Counts Bus locks and split lock requests that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_S", "100007", "Counts Software Prefetches that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_S", "100007", "Counts L1 data HW prefetches that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_S", "100007", "Counts any request that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_S", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_S", "100007", "Counts Demand cacheable data write requests  that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_S", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_S", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_S", "100007", "Counts any Read request  that accounts for responses which hit its own tile's L2 with data in S state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT_THIS_TILE_F", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_THIS_TILE_F", "100007", "Counts Demand cacheable data writes that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_THIS_TILE_F", "100007", "Counts demand code reads and prefetch code reads that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_THIS_TILE_F", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_THIS_TILE_F", "100007", "Counts L2 code HW prefetches that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_THIS_TILE_F", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_THIS_TILE_F", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_THIS_TILE_F", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_THIS_TILE_F", "100007", "Counts Bus locks and split lock requests that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_THIS_TILE_F", "100007", "Counts Software Prefetches that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_THIS_TILE_F", "100007", "Counts L1 data HW prefetches that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_THIS_TILE_F", "100007", "Counts any request that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_THIS_TILE_F", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_THIS_TILE_F", "100007", "Counts Demand cacheable data write requests  that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_THIS_TILE_F", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_THIS_TILE_F", "100007", "Counts any Read request  that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_THIS_TILE_F", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_THIS_TILE_F", "100007", "Counts any Prefetch requests that accounts for responses which hit its own tile's L2 with data in F state ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_NEAR_TILE", "100007", "Counts Demand cacheable data writes that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_NEAR_TILE", "100007", "Counts demand code reads and prefetch code reads that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT_NEAR_TILE", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_NEAR_TILE", "100007", "Counts L2 code HW prefetches that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_NEAR_TILE", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_NEAR_TILE", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.L2_HIT_NEAR_TILE", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_NEAR_TILE", "100007", "Counts Bus locks and split lock requests that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_NEAR_TILE", "100007", "Counts Software Prefetches that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_NEAR_TILE", "100007", "Counts L1 data HW prefetches that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_NEAR_TILE", "100007", "Counts any request that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_NEAR_TILE", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_NEAR_TILE", "100007", "Counts Demand cacheable data write requests  that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_NEAR_TILE", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_NEAR_TILE", "100007", "Counts any Read request  that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_NEAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_NEAR_TILE", "100007", "Counts any Prefetch requests that accounts for reponses from snoop request hit with data forwarded from its Near-other tile L2 in E/F/M state", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT_FAR_TILE", "100007", "Counts Demand cacheable data writes that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT_FAR_TILE", "100007", "Counts demand code reads and prefetch code reads that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L2_HIT_FAR_TILE", "100007", "Counts L2 code HW prefetches that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT_FAR_TILE", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT_FAR_TILE", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT_FAR_TILE", "100007", "Counts Bus locks and split lock requests that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.L2_HIT_FAR_TILE", "100007", "Counts Software Prefetches that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT_FAR_TILE", "100007", "Counts L1 data HW prefetches that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT_FAR_TILE", "100007", "Counts any request that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT_FAR_TILE", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT_FAR_TILE", "100007", "Counts Demand cacheable data write requests  that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.L2_HIT_FAR_TILE", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT_FAR_TILE", "100007", "Counts any Read request  that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_FAR_TILE", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.L2_HIT_FAR_TILE", "100007", "Counts any Prefetch requests that accounts for reponses from snoop request hit with data forwarded from it Far(not in the same quadrant as the request)-other tile L2 in E/F/M state. Valid only in SNC4 Cluster mode.", null));
		eventMap.put("ICACHE.ACCESSES", new PMUEvent(null, "0x80", "0,1", "0x3", "ICACHE.ACCESSES", "200003", "Counts all instruction fetches, including uncacheable fetches.", null));
		eventMap.put("ICACHE.HIT", new PMUEvent(null, "0x80", "0,1", "0x1", "ICACHE.HIT", "200003", "Counts all instruction fetches that hit the instruction cache.", null));
		eventMap.put("ICACHE.MISSES", new PMUEvent(null, "0x80", "0,1", "0x2", "ICACHE.MISSES", "200003", "Counts all instruction fetches that miss the instruction cache or produce memory requests. An instruction fetch miss is counted only once and not once for every cycle it is outstanding.", null));
		eventMap.put("MS_DECODED.MS_ENTRY", new PMUEvent(null, "0xE7", "0,1", "0x1", "MS_DECODED.MS_ENTRY", "200003", "Counts the number of times the MSROM starts a flow of uops.", null));
		eventMap.put("MACHINE_CLEARS.MEMORY_ORDERING", new PMUEvent(null, "0xC3", "0,1", "0x2", "MACHINE_CLEARS.MEMORY_ORDERING", "200003", "Counts the number of times the machine clears due to memory ordering hazards", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.MCDRAM_FAR", "100007", "Counts any Prefetch requests that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.MCDRAM_NEAR", "100007", "Counts any Prefetch requests that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.DDR_FAR", "100007", "Counts any Prefetch requests that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.DDR_NEAR", "100007", "Counts any Prefetch requests that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.MCDRAM_FAR", "100007", "Counts any Read request  that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.MCDRAM_NEAR", "100007", "Counts any Read request  that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.DDR_FAR", "100007", "Counts any Read request  that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.DDR_NEAR", "100007", "Counts any Read request  that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.MCDRAM_FAR", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.MCDRAM_NEAR", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.DDR_FAR", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.DDR_NEAR", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.MCDRAM_FAR", "100007", "Counts Demand cacheable data write requests  that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.MCDRAM_NEAR", "100007", "Counts Demand cacheable data write requests  that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.DDR_FAR", "100007", "Counts Demand cacheable data write requests  that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.DDR_NEAR", "100007", "Counts Demand cacheable data write requests  that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.MCDRAM_FAR", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.MCDRAM_NEAR", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.DDR_FAR", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.DDR_NEAR", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.MCDRAM_FAR", "100007", "Counts any request that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.MCDRAM_NEAR", "100007", "Counts any request that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.DDR_FAR", "100007", "Counts any request that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.DDR_NEAR", "100007", "Counts any request that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.MCDRAM_FAR", "100007", "Counts L1 data HW prefetches that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.MCDRAM_NEAR", "100007", "Counts L1 data HW prefetches that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.DDR_FAR", "100007", "Counts L1 data HW prefetches that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.DDR_NEAR", "100007", "Counts L1 data HW prefetches that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.MCDRAM_FAR", "100007", "Counts Software Prefetches that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.MCDRAM_NEAR", "100007", "Counts Software Prefetches that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.DDR_FAR", "100007", "Counts Software Prefetches that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.DDR_NEAR", "100007", "Counts Software Prefetches that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.MCDRAM_FAR", "100007", "Counts Bus locks and split lock requests that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.MCDRAM_NEAR", "100007", "Counts Bus locks and split lock requests that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.DDR_FAR", "100007", "Counts Bus locks and split lock requests that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.DDR_NEAR", "100007", "Counts Bus locks and split lock requests that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.MCDRAM_FAR", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.MCDRAM_NEAR", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.DDR_FAR", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.DDR_NEAR", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.MCDRAM_FAR", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.MCDRAM_NEAR", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.DDR_FAR", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.DDR_NEAR", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.NON_DRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.NON_DRAM", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses from any NON_DRAM system address. This includes MMIO transactions", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.MCDRAM_FAR", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.MCDRAM_NEAR", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.DDR_FAR", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.DDR_NEAR", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.MCDRAM_FAR", "100007", "Counts L2 code HW prefetches that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.MCDRAM_NEAR", "100007", "Counts L2 code HW prefetches that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.DDR_FAR", "100007", "Counts L2 code HW prefetches that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.DDR_NEAR", "100007", "Counts L2 code HW prefetches that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.NON_DRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.NON_DRAM", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses from any NON_DRAM system address. This includes MMIO transactions", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.MCDRAM_FAR", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.MCDRAM_NEAR", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.DDR_FAR", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.DDR_NEAR", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.MCDRAM_FAR", "100007", "Counts demand code reads and prefetch code reads that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.MCDRAM_NEAR", "100007", "Counts demand code reads and prefetch code reads that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.DDR_FAR", "100007", "Counts demand code reads and prefetch code reads that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.DDR_NEAR", "100007", "Counts demand code reads and prefetch code reads that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.MCDRAM_FAR", "100007", "Counts Demand cacheable data writes that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.MCDRAM_NEAR", "100007", "Counts Demand cacheable data writes that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.DDR_FAR", "100007", "Counts Demand cacheable data writes that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.DDR_NEAR", "100007", "Counts Demand cacheable data writes that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.MCDRAM_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.MCDRAM_FAR", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for data responses from MCDRAM Far or Other tile L2 hit far. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.MCDRAM_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.MCDRAM_NEAR", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for data responses from MCDRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.DDR_FAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.DDR_FAR", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for data responses from DRAM Far. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.DDR_NEAR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.DDR_NEAR", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for data responses from DRAM Local.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.MCDRAM", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.MCDRAM", "100007", "Counts Demand cacheable data writes that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.MCDRAM", "100007", "Counts demand code reads and prefetch code reads that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.MCDRAM", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.MCDRAM", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.MCDRAM", "100007", "Counts Partial writes (UC or WT or WP and should be programmed on PMC1) that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.MCDRAM", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.MCDRAM", "100007", "Counts Bus locks and split lock requests that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.MCDRAM", "100007", "Counts Software Prefetches that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.MCDRAM", "100007", "Counts any request that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.MCDRAM", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.MCDRAM", "100007", "Counts Demand cacheable data write requests  that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.MCDRAM", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.MCDRAM", "100007", "Counts any Read request  that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_L2.MCDRAM", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_PF_L2.MCDRAM", "100007", "Counts any Prefetch requests that accounts for responses from MCDRAM (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.DDR", "100007", "Counts demand cacheable data and L1 prefetch data reads that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.DDR", "100007", "Counts Demand cacheable data writes that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.DDR", "100007", "Counts demand code reads and prefetch code reads that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.DDR", "100007", "Counts L2 data RFO prefetches (includes PREFETCHW instruction) that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.DDR", "100007", "Counts L2 code HW prefetches that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.DDR", "100007", "Counts Partial reads (UC or WC and is valid only for Outstanding response type).  that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_READS.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.UC_CODE_READS.DDR", "100007", "Counts UC code reads (valid only for Outstanding response type)  that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.DDR", "100007", "Counts Bus locks and split lock requests that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PF_SOFTWARE.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_SOFTWARE.DDR", "100007", "Counts Software Prefetches that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.DDR", "100007", "Counts L1 data HW prefetches that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.DDR", "100007", "Counts any request that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.DDR", "100007", "Counts Demand cacheable data and L1 prefetch data read requests  that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_RFO.DDR", "100007", "Counts Demand cacheable data write requests  that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_CODE_RD.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_CODE_RD.DDR", "100007", "Counts Demand code reads and prefetch code read requests  that accounts for responses from DDR (local and far)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.DDR", new PMUEvent(null, "0xB7", "0,1", "0x1", "OFFCORE_RESPONSE.ANY_READ.DDR", "100007", "Counts any Read request  that accounts for responses from DDR (local and far)", null));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent(null, "0xC4", "0,1", "0x0", "BR_INST_RETIRED.ALL_BRANCHES", "200003", "Counts the number of branch instructions retired", null));
		eventMap.put("BR_INST_RETIRED.JCC", new PMUEvent(null, "0xC4", "0,1", "0x7e", "BR_INST_RETIRED.JCC", "200003", "Counts the number of branch instructions retired that were conditional jumps.", null));
		eventMap.put("BR_INST_RETIRED.TAKEN_JCC", new PMUEvent(null, "0xC4", "0,1", "0xfe", "BR_INST_RETIRED.TAKEN_JCC", "200003", "Counts the number of branch instructions retired that were conditional jumps and predicted taken.", null));
		eventMap.put("BR_INST_RETIRED.CALL", new PMUEvent(null, "0xC4", "0,1", "0xf9", "BR_INST_RETIRED.CALL", "200003", "Counts the number of near CALL branch instructions retired.", null));
		eventMap.put("BR_INST_RETIRED.REL_CALL", new PMUEvent(null, "0xC4", "0,1", "0xfd", "BR_INST_RETIRED.REL_CALL", "200003", "Counts the number of near relative CALL branch instructions retired.", null));
		eventMap.put("BR_INST_RETIRED.IND_CALL", new PMUEvent(null, "0xC4", "0,1", "0xfb", "BR_INST_RETIRED.IND_CALL", "200003", "Counts the number of near indirect CALL branch instructions retired.", null));
		eventMap.put("BR_INST_RETIRED.RETURN", new PMUEvent(null, "0xC4", "0,1", "0xf7", "BR_INST_RETIRED.RETURN", "200003", "Counts the number of near RET branch instructions retired.", null));
		eventMap.put("BR_INST_RETIRED.NON_RETURN_IND", new PMUEvent(null, "0xC4", "0,1", "0xeb", "BR_INST_RETIRED.NON_RETURN_IND", "200003", "Counts the number of branch instructions retired that were near indirect CALL or near indirect JMP.", null));
		eventMap.put("BR_INST_RETIRED.FAR_BRANCH", new PMUEvent(null, "0xC4", "0,1", "0xbf", "BR_INST_RETIRED.FAR_BRANCH", "200003", "Counts the number of far branch instructions retired.", null));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent(null, "0xC5", "0,1", "0x0", "BR_MISP_RETIRED.ALL_BRANCHES", "200003", "Counts the number of mispredicted branch instructions retired", null));
		eventMap.put("BR_MISP_RETIRED.JCC", new PMUEvent(null, "0xC5", "0,1", "0x7e", "BR_MISP_RETIRED.JCC", "200003", "Counts the number of mispredicted branch instructions retired that were conditional jumps.", null));
		eventMap.put("BR_MISP_RETIRED.TAKEN_JCC", new PMUEvent(null, "0xC5", "0,1", "0xfe", "BR_MISP_RETIRED.TAKEN_JCC", "200003", "Counts the number of mispredicted branch instructions retired that were conditional jumps and predicted taken.", null));
		eventMap.put("BR_MISP_RETIRED.IND_CALL", new PMUEvent(null, "0xC5", "0,1", "0xfb", "BR_MISP_RETIRED.IND_CALL", "200003", "Counts the number of mispredicted near indirect CALL branch instructions retired.", null));
		eventMap.put("BR_MISP_RETIRED.RETURN", new PMUEvent(null, "0xC5", "0,1", "0xf7", "BR_MISP_RETIRED.RETURN", "200003", "Counts the number of mispredicted near RET branch instructions retired.", null));
		eventMap.put("BR_MISP_RETIRED.NON_RETURN_IND", new PMUEvent(null, "0xC5", "0,1", "0xeb", "BR_MISP_RETIRED.NON_RETURN_IND", "200003", "Counts the number of mispredicted branch instructions retired that were near indirect CALL or near indirect JMP.", null));
		eventMap.put("UOPS_RETIRED.MS", new PMUEvent("This event counts the number of micro-ops retired that were supplied from MSROM.", "0xC2", "0,1", "0x1", "UOPS_RETIRED.MS", "2000003", "Counts the number of micro-ops retired that are from the complex flows issued by the micro-sequencer (MS).", null));
		eventMap.put("UOPS_RETIRED.ALL", new PMUEvent("This event counts the number of micro-ops (uops) retired. The processor decodes complex macro instructions into a sequence of simpler uops. Most instructions are composed of one or two uops. Some instructions are decoded into longer sequences such as repeat instructions, floating point transcendental instructions, and assists. ", "0xC2", "0,1", "0x10", "UOPS_RETIRED.ALL", "2000003", "Counts the number of micro-ops retired", null));
		eventMap.put("UOPS_RETIRED.SCALAR_SIMD", new PMUEvent("This event counts the number of scalar SSE, AVX, AVX2, AVX-512 micro-ops retired (floating point, integer and store) except for loads (memory-to-register mov-type micro ops), division, sqrt.", "0xC2", "0,1", "0x20", "UOPS_RETIRED.SCALAR_SIMD", "200003", "Counts the number of scalar SSE, AVX, AVX2, AVX-512 micro-ops retired. More specifically, it counts scalar SSE, AVX, AVX2, AVX-512 micro-ops except for loads (memory-to-register mov-type micro ops), division, sqrt.", null));
		eventMap.put("UOPS_RETIRED.PACKED_SIMD", new PMUEvent("This event counts the number of packed vector SSE, AVX, AVX2, and AVX-512 micro-ops retired (floating point, integer and store) except for loads (memory-to-register mov-type micro-ops), packed byte and word multiplies.", "0xC2", "0,1", "0x40", "UOPS_RETIRED.PACKED_SIMD", "200003", "Counts the number of vector SSE, AVX, AVX2, AVX-512 micro-ops retired. More specifically, it counts packed SSE, AVX, AVX2, AVX-512 micro-ops (both floating point and integer) except for loads (memory-to-register mov-type micro-ops), packed byte and word multiplies.", null));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent(null, "0xC3", "0,1", "0x1", "MACHINE_CLEARS.SMC", "200003", "Counts the number of times that the machine clears due to program modifying data within 1K of a recently fetched code page", null));
		eventMap.put("MACHINE_CLEARS.FP_ASSIST", new PMUEvent("This event counts the number of times that the pipeline stalled due to FP operations needing assists.", "0xC3", "0,1", "0x4", "MACHINE_CLEARS.FP_ASSIST", "200003", "Counts the number of floating operations retired that required microcode assists", null));
		eventMap.put("MACHINE_CLEARS.ALL", new PMUEvent(null, "0xC3", "0,1", "0x8", "MACHINE_CLEARS.ALL", "200003", "Counts all nukes", null));
		eventMap.put("NO_ALLOC_CYCLES.ROB_FULL", new PMUEvent(null, "0xCA", "0,1", "0x1", "NO_ALLOC_CYCLES.ROB_FULL", "200003", "Counts the number of core cycles when no micro-ops are allocated and the ROB is full", null));
		eventMap.put("NO_ALLOC_CYCLES.MISPREDICTS", new PMUEvent("This event counts the number of core cycles when no uops are allocated and the alloc pipe is stalled waiting for a mispredicted branch to retire.", "0xCA", "0,1", "0x4", "NO_ALLOC_CYCLES.MISPREDICTS", "200003", "Counts the number of core cycles when no micro-ops are allocated and the alloc pipe is stalled waiting for a mispredicted branch to retire.", null));
		eventMap.put("NO_ALLOC_CYCLES.RAT_STALL", new PMUEvent(null, "0xCA", "0,1", "0x20", "NO_ALLOC_CYCLES.RAT_STALL", "200003", "Counts the number of core cycles when no micro-ops are allocated and a RATstall (caused by reservation station full) is asserted.  ", null));
		eventMap.put("NO_ALLOC_CYCLES.NOT_DELIVERED", new PMUEvent("This event counts the number of core cycles when no uops are allocated, the instruction queue is empty and the alloc pipe is stalled waiting for instructions to be fetched.", "0xCA", "0,1", "0x90", "NO_ALLOC_CYCLES.NOT_DELIVERED", "200003", "Counts the number of core cycles when no micro-ops are allocated, the IQ is empty, and no other condition is blocking allocation.", null));
		eventMap.put("NO_ALLOC_CYCLES.ALL", new PMUEvent(null, "0xCA", "0,1", "0x7f", "NO_ALLOC_CYCLES.ALL", "200003", "Counts the total number of core cycles when no micro-ops are allocated for any reason.", null));
		eventMap.put("RS_FULL_STALL.MEC", new PMUEvent(null, "0xCB", "0,1", "0x1", "RS_FULL_STALL.MEC", "200003", "Counts the number of core cycles when allocation pipeline is stalled and is waiting for a free MEC reservation station entry.", null));
		eventMap.put("RS_FULL_STALL.ALL", new PMUEvent(null, "0xCB", "0,1", "0x1f", "RS_FULL_STALL.ALL", "200003", "Counts the total number of core cycles the Alloc pipeline is stalled when any one of the reservation stations is full. ", null));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent(null, "0xC0", "0,1", "0x0", "INST_RETIRED.ANY_P", "2000003", "Counts the total number of instructions retired", null));
		eventMap.put("CYCLES_DIV_BUSY.ALL", new PMUEvent("This event counts cycles when the divider is busy. More specifically cycles when the divide unit is unable to accept a new divide uop because it is busy processing a previously dispatched uop. The cycles will be counted irrespective of whether or not another divide uop is waiting to enter the divide unit (from the RS). This event counts integer divides, x87 divides, divss, divsd, sqrtss, sqrtsd event and does not count vector divides.", "0xCD", "0,1", "0x1", "CYCLES_DIV_BUSY.ALL", "2000003", "Cycles the number of core cycles when divider is busy.  Does not imply a stall waiting for the divider.  ", null));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent("This event counts the number of instructions that retire.  For instructions that consist of multiple micro-ops, this event counts exactly once, as the last micro-op of the instruction retires.  The event continues counting while instructions retire, including during interrupt service routines caused by hardware interrupts, faults or traps.", "0x00", "Fixed counter 1", "0x1", "INST_RETIRED.ANY", "2000003", "Fixed Counter: Counts the number of instructions retired", null));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P", new PMUEvent(null, "0x3C", "0,1", "0x0", "CPU_CLK_UNHALTED.THREAD_P", "2000003", "Counts the number of unhalted core clock cycles", null));
		eventMap.put("CPU_CLK_UNHALTED.REF", new PMUEvent(null, "0x3C", "0,1", "0x1", "CPU_CLK_UNHALTED.REF", "2000003", "Counts the number of unhalted reference clock cycles", null));
		eventMap.put("CPU_CLK_UNHALTED.THREAD", new PMUEvent("This event counts the number of core cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. This event is a component in many key event ratios. The core frequency may change from time to time due to transitions associated with Enhanced Intel SpeedStep Technology or TM2. For this reason this event may have a changing ratio with regards to time. When the core frequency is constant, this event can approximate elapsed time while the core was not in the halt state. It is counted on a dedicated fixed counter", "0x00", "Fixed counter 2", "0x2", "CPU_CLK_UNHALTED.THREAD", "2000003", "Fixed Counter: Counts the number of unhalted core clock cycles", null));
		eventMap.put("CPU_CLK_UNHALTED.REF_TSC", new PMUEvent(null, "0x00", "Fixed counter 3", "0x3", "CPU_CLK_UNHALTED.REF_TSC", "2000003", "Fixed Counter: Counts the number of unhalted reference clock cycles", null));
		eventMap.put("BACLEARS.ALL", new PMUEvent(null, "0xE6", "0,1", "0x1", "BACLEARS.ALL", "200003", "Counts the number of times the front end resteers for any branch as a result of another branch handling mechanism in the front end.", null));
		eventMap.put("BACLEARS.RETURN", new PMUEvent(null, "0xE6", "0,1", "0x8", "BACLEARS.RETURN", "200003", "Counts the number of times the front end resteers for RET branches as a result of another branch handling mechanism in the front end.", null));
		eventMap.put("BACLEARS.COND", new PMUEvent(null, "0xE6", "0,1", "0x10", "BACLEARS.COND", "200003", "Counts the number of times the front end resteers for conditional branches as a result of another branch handling mechanism in the front end.", null));
		eventMap.put("RECYCLEQ.LD_BLOCK_ST_FORWARD", new PMUEvent(null, "0x03", "0,1", "0x1", "RECYCLEQ.LD_BLOCK_ST_FORWARD", "200003", "Counts the number of occurences a retired load gets blocked because its address partially overlaps with a store ", null));
		eventMap.put("RECYCLEQ.LD_BLOCK_STD_NOTREADY", new PMUEvent(null, "0x03", "0,1", "0x2", "RECYCLEQ.LD_BLOCK_STD_NOTREADY", "200003", "Counts the number of occurences a retired load gets blocked because its address overlaps with a store whose data is not ready", null));
		eventMap.put("RECYCLEQ.ST_SPLITS", new PMUEvent("This event counts the number of retired store that experienced a cache line boundary split(Precise Event). Note that each spilt should be counted only once.", "0x03", "0,1", "0x4", "RECYCLEQ.ST_SPLITS", "200003", "Counts the number of occurences a retired store that is a cache line split. Each split should be counted only once.", null));
		eventMap.put("RECYCLEQ.LD_SPLITS", new PMUEvent(null, "0x03", "0,1", "0x8", "RECYCLEQ.LD_SPLITS", "200003", "Counts the number of occurences a retired load that is a cache line split. Each split should be counted only once.", null));
		eventMap.put("RECYCLEQ.LOCK", new PMUEvent(null, "0x03", "0,1", "0x10", "RECYCLEQ.LOCK", "200003", "Counts all the retired locked loads. It does not include stores because we would double count if we count stores", null));
		eventMap.put("RECYCLEQ.STA_FULL", new PMUEvent(null, "0x03", "0,1", "0x20", "RECYCLEQ.STA_FULL", "200003", "Counts the store micro-ops retired that were pushed in the rehad queue because the store address buffer is full", null));
		eventMap.put("RECYCLEQ.ANY_LD", new PMUEvent(null, "0x03", "0,1", "0x40", "RECYCLEQ.ANY_LD", "200003", "Counts any retired load that was pushed into the recycle queue for any reason.", null));
		eventMap.put("RECYCLEQ.ANY_ST", new PMUEvent(null, "0x03", "0,1", "0x80", "RECYCLEQ.ANY_ST", "200003", "Counts any retired store that was pushed into the recycle queue for any reason.", null));
		eventMap.put("BR_MISP_RETIRED.CALL", new PMUEvent(null, "0xC5", "0,1", "0xf9", "BR_MISP_RETIRED.CALL", "200003", "Counts the number of mispredicted near CALL branch instructions retired.", null));
		eventMap.put("BR_MISP_RETIRED.REL_CALL", new PMUEvent(null, "0xC5", "0,1", "0xfd", "BR_MISP_RETIRED.REL_CALL", "200003", "Counts the number of mispredicted near relative CALL branch instructions retired.", null));
		eventMap.put("BR_MISP_RETIRED.FAR_BRANCH", new PMUEvent(null, "0xC5", "0,1", "0xbf", "BR_MISP_RETIRED.FAR_BRANCH", "200003", "Counts the number of mispredicted far branch instructions retired.", null));
		eventMap.put("UNC_M_CAS_COUNT.RD", new PMUEvent(null, "0x03", "0,1,2,3", "0x01", "UNC_M_CAS_COUNT.RD", null, "ddr bandwidth read (CPU traffic only) (MB/sec). ", null));
		eventMap.put("UNC_M_CAS_COUNT.WR", new PMUEvent(null, "0x03", "0,1,2,3", "0x02", "UNC_M_CAS_COUNT.WR", null, "ddr bandwidth write (CPU traffic only) (MB/sec). ", null));
		eventMap.put("UNC_E_RPQ_INSERTS", new PMUEvent(null, "0x01", "0,1,2,3", "0x01", "UNC_E_RPQ_INSERTS", null, "mcdram bandwidth read (CPU traffic only) (MB/sec). ", null));
		eventMap.put("UNC_E_WPQ_INSERTS", new PMUEvent(null, "0x02", "0,1,2,3", "0x01", "UNC_E_WPQ_INSERTS", null, "mcdram bandwidth write (CPU traffic only) (MB/sec). ", null));
		eventMap.put("MEM_UOPS_RETIRED.DTLB_MISS_LOADS", new PMUEvent(null, "0x04", "0,1", "0x8", "MEM_UOPS_RETIRED.DTLB_MISS_LOADS", "200003", "Counts the number of load micro-ops retired that cause a DTLB miss", null));
		eventMap.put("PAGE_WALKS.D_SIDE_WALKS", new PMUEvent(null, "0x05", "0,1", "0x1", "PAGE_WALKS.D_SIDE_WALKS", "100003", "Counts the total D-side page walks that are completed or started. The page walks started in the speculative path will also be counted", null));
		eventMap.put("PAGE_WALKS.D_SIDE_CYCLES", new PMUEvent(null, "0x05", "0,1", "0x1", "PAGE_WALKS.D_SIDE_CYCLES", "200003", "Counts the total number of core cycles for all the D-side page walks. The cycles for page walks started in speculative path will also be included.", null));
		eventMap.put("PAGE_WALKS.I_SIDE_WALKS", new PMUEvent(null, "0x05", "0,1", "0x2", "PAGE_WALKS.I_SIDE_WALKS", "100003", "Counts the total I-side page walks that are completed.", null));
		eventMap.put("PAGE_WALKS.I_SIDE_CYCLES", new PMUEvent("This event counts every cycle when an I-side (walks due to an instruction fetch) page walk is in progress. ", "0x05", "0,1", "0x2", "PAGE_WALKS.I_SIDE_CYCLES", "200003", "Counts the total number of core cycles for all the I-side page walks. The cycles for page walks started in speculative path will also be included.", null));
		eventMap.put("PAGE_WALKS.WALKS", new PMUEvent(null, "0x05", "0,1", "0x3", "PAGE_WALKS.WALKS", "100003", "Counts the total page walks that are completed (I-side and D-side)", null));
		eventMap.put("PAGE_WALKS.CYCLES", new PMUEvent("This event counts every cycle when a data (D) page walk or instruction (I) page walk is in progress.", "0x05", "0,1", "0x3", "PAGE_WALKS.CYCLES", "200003", "Counts the total number of core cycles for all the page walks. The cycles for page walks started in speculative path will also be included.", null));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}