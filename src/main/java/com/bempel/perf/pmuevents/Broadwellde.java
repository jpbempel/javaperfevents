package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Broadwellde implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Broadwellde());
    }

    {
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_MISS", new PMUEvent("This event counts the number of demand Data Read requests that miss L2 cache. Only not rejected loads are counted.", "0x24", "0,1,2,3", "0x21", "L2_RQSTS.DEMAND_DATA_RD_MISS", "200003", "Demand Data Read miss L2, no rejects", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x22", "L2_RQSTS.RFO_MISS", "200003", "RFO requests that miss L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x24", "L2_RQSTS.CODE_RD_MISS", "200003", "L2 cache misses when fetching instructions.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x27", "L2_RQSTS.ALL_DEMAND_MISS", "200003", "Demand requests that miss L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.L2_PF_MISS", new PMUEvent("This event counts the number of requests from the L2 hardware prefetchers that miss L2 cache.", "0x24", "0,1,2,3", "0x30", "L2_RQSTS.L2_PF_MISS", "200003", "L2 prefetch requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.MISS", new PMUEvent(null, "0x24", "0,1,2,3", "0x3f", "L2_RQSTS.MISS", "200003", "All requests that miss L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_HIT", new PMUEvent("This event counts the number of demand Data Read requests that hit L2 cache. Only not rejected loads are counted.", "0x24", "0,1,2,3", "0x41", "L2_RQSTS.DEMAND_DATA_RD_HIT", "200003", "Demand Data Read requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x42", "L2_RQSTS.RFO_HIT", "200003", "RFO requests that hit L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_HIT", new PMUEvent(null, "0x24", "0,1,2,3", "0x44", "L2_RQSTS.CODE_RD_HIT", "200003", "L2 cache hits when fetching instructions, code reads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.L2_PF_HIT", new PMUEvent("This event counts the number of requests from the L2 hardware prefetchers that hit L2 cache. L3 prefetch new types.", "0x24", "0,1,2,3", "0x50", "L2_RQSTS.L2_PF_HIT", "200003", "L2 prefetch requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_DATA_RD", new PMUEvent("This event counts the number of demand Data Read requests (including requests from L1D hardware prefetchers). These loads may hit or miss L2 cache. Only non rejected loads are counted.", "0x24", "0,1,2,3", "0xe1", "L2_RQSTS.ALL_DEMAND_DATA_RD", "200003", "Demand Data Read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_RFO", new PMUEvent("This event counts the total number of RFO (read for ownership) requests to L2 cache. L2 RFO requests include both L1D demand RFO misses as well as L1D RFO prefetches.", "0x24", "0,1,2,3", "0xe2", "L2_RQSTS.ALL_RFO", "200003", "RFO requests to L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_CODE_RD", new PMUEvent("This event counts the total number of L2 code requests.", "0x24", "0,1,2,3", "0xe4", "L2_RQSTS.ALL_CODE_RD", "200003", "L2 code requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_REFERENCES", new PMUEvent(null, "0x24", "0,1,2,3", "0xe7", "L2_RQSTS.ALL_DEMAND_REFERENCES", "200003", "Demand requests to L2 cache.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_PF", new PMUEvent("This event counts the total number of requests from the L2 hardware prefetchers.", "0x24", "0,1,2,3", "0xf8", "L2_RQSTS.ALL_PF", "200003", "Requests from L2 hardware prefetchers", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.REFERENCES", new PMUEvent(null, "0x24", "0,1,2,3", "0xff", "L2_RQSTS.REFERENCES", "200003", "All L2 requests.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_DEMAND_RQSTS.WB_HIT", new PMUEvent("This event counts the number of WB requests that hit L2 cache.", "0x27", "0,1,2,3", "0x50", "L2_DEMAND_RQSTS.WB_HIT", "200003", "Not rejected writebacks that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.MISS", new PMUEvent("This event counts core-originated cacheable demand requests that miss the last level cache (LLC). Demand requests include loads, RFOs, and hardware prefetches from L1D, and instruction fetches from IFU.", "0x2E", "0,1,2,3", "0x41", "LONGEST_LAT_CACHE.MISS", "100003", "Core-originated cacheable demand requests missed L3", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.REFERENCE", new PMUEvent("This event counts core-originated cacheable demand requests that refer to the last level cache (LLC). Demand requests include loads, RFOs, and hardware prefetches from L1D, and instruction fetches from IFU.", "0x2E", "0,1,2,3", "0x4f", "LONGEST_LAT_CACHE.REFERENCE", "100003", "Core-originated cacheable demand requests that refer to L3", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING", new PMUEvent("This event counts duration of L1D miss outstanding, that is each cycle number of Fill Buffers (FB) outstanding required by Demand Reads. FB either is held by demand loads, or it is held by non-demand loads and gets hit at least once by demand. The valid outstanding interval is defined until the FB deallocation by one of the following ways: from FB allocation, if FB is allocated by demand; from the demand Hit FB, if it is allocated by hardware or software prefetch.Note: In the L1D, a Demand Read contains cacheable or noncacheable demand loads, including ones causing cache-line splits and reads due to page walks resulted from any request type.", "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING", "2000003", "L1D miss oustandings duration in cycles", "2"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES", new PMUEvent("This event counts duration of L1D miss outstanding in cycles.", "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES", "2000003", "Cycles with L1D load Misses outstanding.", "2"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES_ANY", new PMUEvent(null, "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES_ANY", "2000003", "Cycles with L1D load Misses outstanding from any thread on physical core.", "2"));
		eventMap.put("L1D_PEND_MISS.FB_FULL", new PMUEvent(null, "0x48", "0,1,2,3", "0x2", "L1D_PEND_MISS.FB_FULL", "2000003", "Cycles a demand request was blocked due to Fill Buffers inavailability.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D.REPLACEMENT", new PMUEvent("This event counts L1D data line replacements including opportunistic replacements, and replacements that require stall-for-replace or block-for-replace.", "0x51", "0,1,2,3", "0x1", "L1D.REPLACEMENT", "2000003", "L1D data line replacements", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", new PMUEvent("This event counts the number of offcore outstanding Demand Data Read transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor. See the corresponding Umask under OFFCORE_REQUESTS.Note: A prefetch promoted to Demand is counted from the promotion point.", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", "2000003", "Offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", new PMUEvent("This event counts cycles when offcore outstanding Demand Data Read transactions are present in the super queue (SQ). A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation).", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", "2000003", "Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", new PMUEvent(null, "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", "2000003", "Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", new PMUEvent("This event counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The Offcore outstanding state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x2", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", "2000003", "Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", new PMUEvent("This event counts the number of offcore outstanding RFO (store) transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", "2000003", "Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", new PMUEvent("This event counts the number of offcore outstanding demand rfo Reads transactions in the super queue every cycle. The Offcore outstanding state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", "2000003", "Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", new PMUEvent("This event counts the number of offcore outstanding cacheable Core Data Read transactions in the super queue every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", "2000003", "Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", new PMUEvent("This event counts cycles when offcore outstanding cacheable Core Data Read transactions are present in the super queue. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.", "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", "2000003", "Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOCK_CYCLES.CACHE_LOCK_DURATION", new PMUEvent("This event counts the number of cycles when the L1D is locked. It is a superset of the 0x1 mask (BUS_LOCK_CLOCKS.BUS_LOCK_DURATION).", "0x63", "0,1,2,3", "0x2", "LOCK_CYCLES.CACHE_LOCK_DURATION", "2000003", "Cycles when L1D is locked", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_DATA_RD", new PMUEvent("This event counts the Demand Data Read requests sent to uncore. Use it in conjunction with OFFCORE_REQUESTS_OUTSTANDING to determine average latency in the uncore.", "0xB0", "0,1,2,3", "0x1", "OFFCORE_REQUESTS.DEMAND_DATA_RD", "100003", "Demand Data Read requests sent to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_CODE_RD", new PMUEvent("This event counts both cacheable and noncachaeble code read requests.", "0xB0", "0,1,2,3", "0x2", "OFFCORE_REQUESTS.DEMAND_CODE_RD", "100003", "Cacheable and noncachaeble code read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_RFO", new PMUEvent("This event counts the demand RFO (read for ownership) requests including regular RFOs, locks, ItoM.", "0xB0", "0,1,2,3", "0x4", "OFFCORE_REQUESTS.DEMAND_RFO", "100003", "Demand RFO requests including regular RFOs, locks, ItoM", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.ALL_DATA_RD", new PMUEvent("This event counts the demand and prefetch data reads. All Core Data Reads include cacheable Demands and L2 prefetchers (not L3 prefetchers). Counting also covers reads due to page walks resulted from any request type.", "0xB0", "0,1,2,3", "0x8", "OFFCORE_REQUESTS.ALL_DATA_RD", "100003", "Demand and prefetch data reads", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_BUFFER.SQ_FULL", new PMUEvent("This event counts the number of cases when the offcore requests buffer cannot take more entries for the core. This can happen when the superqueue does not contain eligible entries, or when L1D writeback pending FIFO requests is full.Note: Writeback pending FIFO has six entries.", "0xb2", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_BUFFER.SQ_FULL", "2000003", "Offcore requests buffer cannot take more entries for this thread core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE", "100003", "Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_LOADS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts load uops with true STLB miss retired to the architected path. True STLB miss is an uop triggering page walk that gets completed without blocks, and later gets retired. This page walk can end up with or without a fault.", "0xD0", "0,1,2,3", "0x11", "MEM_UOPS_RETIRED.STLB_MISS_LOADS", "100003", "Retired load uops that miss the STLB. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_STORES", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts store uops true STLB miss retired to the architected path. True STLB miss is an uop triggering page walk that gets completed without blocks, and later gets retired. This page walk can end up with or without a fault.", "0xD0", "0,1,2,3", "0x12", "MEM_UOPS_RETIRED.STLB_MISS_STORES", "100003", "Retired store uops that miss the STLB. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.LOCK_LOADS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts load uops with locked access retired to the architected path.", "0xD0", "0,1,2,3", "0x21", "MEM_UOPS_RETIRED.LOCK_LOADS", "100007", "Retired load uops with locked access. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_LOADS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts line-splitted load uops retired to the architected path. A line split is across 64B cache-line which includes a page split (4K).", "0xD0", "0,1,2,3", "0x41", "MEM_UOPS_RETIRED.SPLIT_LOADS", "100003", "Retired load uops that split across a cacheline boundary.(Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_STORES", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts line-splitted store uops retired to the architected path. A line split is across 64B cache-line which includes a page split (4K).", "0xD0", "0,1,2,3", "0x42", "MEM_UOPS_RETIRED.SPLIT_STORES", "100003", "Retired store uops that split across a cacheline boundary. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_LOADS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts load uops retired to the architected path with a filter on bits 0 and 1 applied.Note: This event ?ounts AVX-256bit load/store double-pump memory uops as a single uop at retirement. This event also counts SW prefetches.", "0xD0", "0,1,2,3", "0x81", "MEM_UOPS_RETIRED.ALL_LOADS", "2000003", "All retired load uops. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_STORES", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts store uops retired to the architected path with a filter on bits 0 and 1 applied.Note: This event ?ounts AVX-256bit load/store double-pump memory uops as a single uop at retirement.", "0xD0", "0,1,2,3", "0x82", "MEM_UOPS_RETIRED.ALL_STORES", "2000003", "Retired store uops that split across a cacheline boundary. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_HIT", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data source were hits in the nearest-level (L1) cache.Note: Only two data-sources of L1/FB are applicable for AVX-256bit  even though the corresponding AVX load could be serviced by a deeper level in the memory hierarchy. Data source is reported for the Low-half load. This event also counts SW prefetches independent of the actual data source.", "0xD1", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_RETIRED.L1_HIT", "2000003", "Retired load uops with L1 cache hits as data sources. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_HIT", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were hits in the mid-level (L2) cache.", "0xD1", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_RETIRED.L2_HIT", "100003", "Retired load uops with L2 cache hits as data sources. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L3_HIT", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were data hits in the last-level (L3) cache without snoops required.", "0xD1", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_RETIRED.L3_HIT", "50021", "Hit in last-level (L3) cache. Excludes Unknown data-source. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_MISS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were misses in the nearest-level (L1) cache. Counting excludes unknown and UC data source.", "0xD1", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_RETIRED.L1_MISS", "100003", "Retired load uops misses in L1 cache as data sources. Uses PEBS.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_MISS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were misses in the mid-level (L2) cache. Counting excludes unknown and UC data source.", "0xD1", "0,1,2,3", "0x10", "MEM_LOAD_UOPS_RETIRED.L2_MISS", "50021", "Retired load uops with L2 cache misses as data sources. Uses PEBS.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L3_MISS", new PMUEvent(null, "0xD1", "0,1,2,3", "0x20", "MEM_LOAD_UOPS_RETIRED.L3_MISS", "100007", "Miss in last-level (L3) cache. Excludes Unknown data-source. (Precise Event - PEBS).", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.HIT_LFB", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were load uops missed L1 but hit a fill buffer due to a preceding miss to the same cache line with the data not ready.Note: Only two data-sources of L1/FB are applicable for AVX-256bit  even though the corresponding AVX load could be serviced by a deeper level in the memory hierarchy. Data source is reported for the Low-half load.", "0xD1", "0,1,2,3", "0x40", "MEM_LOAD_UOPS_RETIRED.HIT_LFB", "100003", "Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were L3 Hit and a cross-core snoop missed in the on-pkg core cache.", "0xD2", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS", "20011", "Retired load uops which data sources were L3 hit and cross-core snoop missed in on-pkg core cache. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were L3 hit and a cross-core snoop hit in the on-pkg core cache.", "0xD2", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT", "20011", "Retired load uops which data sources were L3 and cross-core snoop hits in on-pkg core cache. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were HitM responses from a core on same socket (shared L3).", "0xD2", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM", "20011", "Retired load uops which data sources were HitM responses from shared L3. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_NONE", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts retired load uops which data sources were hits in the last-level (L3) cache without snoops required.", "0xD2", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_NONE", "100003", "Retired load uops which data sources were hits in L3 without snoops required. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM", new PMUEvent("This event counts retired load uops where the data came from local DRAM. This does not include hardware prefetches. This is a precise event.", "0xD3", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM", "100007", null, "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_DRAM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_DRAM", "100007", "Retired load uop whose Data Source was: remote DRAM either Snoop not needed or Snoop Miss (RspI) (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_HITM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x10", "MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_HITM", "100007", "Retired load uop whose Data Source was: Remote cache HITM (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_FWD", new PMUEvent(null, "0xD3", "0,1,2,3", "0x20", "MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_FWD", "100007", "Retired load uop whose Data Source was: forwarded from remote cache (Precise Event)", "0,1,2,3"));
		eventMap.put("L2_TRANS.DEMAND_DATA_RD", new PMUEvent("This event counts Demand Data Read requests that access L2 cache, including rejects.", "0xF0", "0,1,2,3", "0x1", "L2_TRANS.DEMAND_DATA_RD", "200003", "Demand Data Read requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.RFO", new PMUEvent("This event counts Read for Ownership (RFO) requests that access L2 cache.", "0xF0", "0,1,2,3", "0x2", "L2_TRANS.RFO", "200003", "RFO requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.CODE_RD", new PMUEvent("This event counts the number of L2 cache accesses when fetching instructions.", "0xF0", "0,1,2,3", "0x4", "L2_TRANS.CODE_RD", "200003", "L2 cache accesses when fetching instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_PF", new PMUEvent("This event counts L2 or L3 HW prefetches that access L2 cache including rejects.", "0xF0", "0,1,2,3", "0x8", "L2_TRANS.ALL_PF", "200003", "L2 or L3 HW prefetches that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L1D_WB", new PMUEvent("This event counts L1D writebacks that access L2 cache.", "0xF0", "0,1,2,3", "0x10", "L2_TRANS.L1D_WB", "200003", "L1D writebacks that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_FILL", new PMUEvent("This event counts L2 fill requests that access L2 cache.", "0xF0", "0,1,2,3", "0x20", "L2_TRANS.L2_FILL", "200003", "L2 fill requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_WB", new PMUEvent("This event counts L2 writebacks that access L2 cache.", "0xF0", "0,1,2,3", "0x40", "L2_TRANS.L2_WB", "200003", "L2 writebacks that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_REQUESTS", new PMUEvent("This event counts transactions that access the L2 pipe including snoops, pagewalks, and so on.", "0xF0", "0,1,2,3", "0x80", "L2_TRANS.ALL_REQUESTS", "200003", "Transactions accessing L2 pipe", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.I", new PMUEvent("This event counts the number of L2 cache lines in the Invalidate state filling the L2. Counting does not cover rejects.", "0xF1", "0,1,2,3", "0x1", "L2_LINES_IN.I", "100003", "L2 cache lines in I state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.S", new PMUEvent("This event counts the number of L2 cache lines in the Shared state filling the L2. Counting does not cover rejects.", "0xF1", "0,1,2,3", "0x2", "L2_LINES_IN.S", "100003", "L2 cache lines in S state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.E", new PMUEvent("This event counts the number of L2 cache lines in the Exclusive state filling the L2. Counting does not cover rejects.", "0xF1", "0,1,2,3", "0x4", "L2_LINES_IN.E", "100003", "L2 cache lines in E state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.ALL", new PMUEvent("This event counts the number of L2 cache lines filling the L2. Counting does not cover rejects.", "0xF1", "0,1,2,3", "0x7", "L2_LINES_IN.ALL", "100003", "L2 cache lines filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DEMAND_CLEAN", new PMUEvent(null, "0xF2", "0,1,2,3", "0x5", "L2_LINES_OUT.DEMAND_CLEAN", "100003", "Clean L2 cache lines evicted by demand.", "0,1,2,3,4,5,6,7"));
		eventMap.put("SQ_MISC.SPLIT_LOCK", new PMUEvent("This event counts the number of split locks in the super queue.", "0xf4", "0,1,2,3", "0x10", "SQ_MISC.SPLIT_LOCK", "100003", "Split locks in SQ", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.AVX_TO_SSE", new PMUEvent("This event counts the number of transitions from AVX-256 to legacy SSE when penalty is applicable.", "0xC1", "0,1,2,3", "0x8", "OTHER_ASSISTS.AVX_TO_SSE", "100003", "Number of transitions from AVX-256 to legacy SSE when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.SSE_TO_AVX", new PMUEvent("This event counts the number of transitions from legacy SSE to AVX-256 when penalty is applicable.", "0xC1", "0,1,2,3", "0x10", "OTHER_ASSISTS.SSE_TO_AVX", "100003", "Number of transitions from SSE to AVX-256 when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ARITH_INST_RETIRED.SCALAR_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x1", "FP_ARITH_INST_RETIRED.SCALAR_DOUBLE", "2000003", "Number of SSE/AVX computational scalar double precision floating-point instructions retired.  Each count represents 1 computation. Applies to SSE* and AVX* scalar double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.SCALAR_SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x2", "FP_ARITH_INST_RETIRED.SCALAR_SINGLE", "2000003", "Number of SSE/AVX computational scalar single precision floating-point instructions retired.  Each count represents 1 computation. Applies to SSE* and AVX* scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.SCALAR", new PMUEvent(null, "0xC7", "0,1,2,3", "0x3", "FP_ARITH_INST_RETIRED.SCALAR", "2000003", "Number of SSE/AVX computational scalar floating-point instructions retired. Applies to SSE* and AVX* scalar, double and single precision floating-point: ADD SUB MUL DIV MIN MAX RSQRT RCP SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x4", "FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE", "2000003", "Number of SSE/AVX computational 128-bit packed double precision floating-point instructions retired.  Each count represents 2 computations. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x8", "FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE", "2000003", "Number of SSE/AVX computational 128-bit packed single precision floating-point instructions retired.  Each count represents 4 computations. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x10", "FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE", "2000003", "Number of SSE/AVX computational 256-bit packed double precision floating-point instructions retired.  Each count represents 4 computations. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.DOUBLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x15", "FP_ARITH_INST_RETIRED.DOUBLE", "2000006", "Number of SSE/AVX computational double precision floating-point instructions retired. Applies to SSE* and AVX*scalar, double and single precision floating-point: ADD SUB MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.  ?.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE", new PMUEvent(null, "0xc7", "0,1,2,3", "0x20", "FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE", "2000003", "Number of SSE/AVX computational 256-bit packed single precision floating-point instructions retired.  Each count represents 8 computations. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.SINGLE", new PMUEvent(null, "0xC7", "0,1,2,3", "0x2a", "FP_ARITH_INST_RETIRED.SINGLE", "2000005", "Number of SSE/AVX computational single precision floating-point instructions retired. Applies to SSE* and AVX*scalar, double and single precision floating-point: ADD SUB MUL DIV MIN MAX RCP RSQRT SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element. ?.", "0,1,2,3"));
		eventMap.put("FP_ARITH_INST_RETIRED.PACKED", new PMUEvent(null, "0xC7", "0,1,2,3", "0x3c", "FP_ARITH_INST_RETIRED.PACKED", "2000004", "Number of SSE/AVX computational packed floating-point instructions retired. Applies to SSE* and AVX*, packed, double and single precision floating-point: ADD SUB MUL DIV MIN MAX RSQRT RCP SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they perform multiple calculations per element.", "0,1,2,3"));
		eventMap.put("FP_ASSIST.X87_OUTPUT", new PMUEvent("This event counts the number of x87 floating point (FP) micro-code assist (numeric overflow/underflow, inexact result) when the output value (destination register) is invalid.", "0xCA", "0,1,2,3", "0x2", "FP_ASSIST.X87_OUTPUT", "100003", "Number of X87 assists due to output value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.X87_INPUT", new PMUEvent("This event counts x87 floating point (FP) micro-code assist (invalid operation, denormal operand, SNaN operand) when the input value (one of the source operands to an FP instruction) is invalid.", "0xCA", "0,1,2,3", "0x4", "FP_ASSIST.X87_INPUT", "100003", "Number of X87 assists due to input value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_OUTPUT", new PMUEvent("This event counts the number of SSE* floating point (FP) micro-code assist (numeric overflow/underflow) when the output value (destination register) is invalid. Counting covers only cases involving penalties that require micro-code assist intervention.", "0xCA", "0,1,2,3", "0x8", "FP_ASSIST.SIMD_OUTPUT", "100003", "Number of SIMD FP assists due to Output values", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_INPUT", new PMUEvent("This event counts any input SSE* FP assist - invalid operation, denormal operand, dividing by zero, SNaN operand. Counting includes only cases involving penalties that required micro-code assist intervention.", "0xCA", "0,1,2,3", "0x10", "FP_ASSIST.SIMD_INPUT", "100003", "Number of SIMD FP assists due to input values", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.ANY", new PMUEvent("This event counts cycles with any input and output SSE or x87 FP assist. If an input and output assist are detected on the same cycle the event increments by 1.", "0xCA", "0,1,2,3", "0x1e", "FP_ASSIST.ANY", "100003", "Cycles with any input/output SSE or FP assist", "0,1,2,3"));
		eventMap.put("IDQ.EMPTY", new PMUEvent("This counts the number of cycles that the instruction decoder queue is empty and can indicate that the application may be bound in the front end.  It does not determine whether there are uops being delivered to the Alloc stage since uops can be delivered by bypass skipping the Instruction Decode Queue (IDQ) when it is empty.", "0x79", "0,1,2,3", "0x2", "IDQ.EMPTY", "2000003", "Instruction Decode Queue (IDQ) empty cycles", "0,1,2,3"));
		eventMap.put("IDQ.MITE_UOPS", new PMUEvent("This event counts the number of uops delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may bypass the IDQ. This also means that uops are not being delivered from the Decode Stream Buffer (DSB).", "0x79", "0,1,2,3", "0x4", "IDQ.MITE_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_CYCLES", new PMUEvent("This event counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x4", "IDQ.MITE_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_UOPS", new PMUEvent("This event counts the number of uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x8", "IDQ.DSB_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_CYCLES", new PMUEvent("This event counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x8", "IDQ.DSB_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_UOPS", new PMUEvent("This event counts the number of uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_UOPS", "2000003", "Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_CYCLES", new PMUEvent("This event counts cycles during which uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_CYCLES", "2000003", "Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_OCCUR", new PMUEvent("This event counts the number of deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while the Microcode Sequencer (MS) is busy. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_OCCUR", "2000003", "Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_4_UOPS", new PMUEvent("This event counts the number of cycles 4  uops were  delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_4_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_ANY_UOPS", new PMUEvent("This event counts the number of cycles  uops were  delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_ANY_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_MITE_UOPS", new PMUEvent("This event counts the number of uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while the Microcode Sequenser (MS) is busy. Counting includes uops that may bypass the IDQ.", "0x79", "0,1,2,3", "0x20", "IDQ.MS_MITE_UOPS", "2000003", "Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_4_UOPS", new PMUEvent("This event counts the number of cycles 4  uops were  delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may bypass the IDQ. This also means that uops are not being delivered from the Decode Stream Buffer (DSB).", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_4_UOPS", "2000003", "Cycles MITE is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_ANY_UOPS", new PMUEvent("This event counts the number of cycles  uops were delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may bypass the IDQ. This also means that uops are not being delivered from the Decode Stream Buffer (DSB).", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_ANY_UOPS", "2000003", "Cycles MITE is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_UOPS", new PMUEvent("This event counts the total number of uops delivered to Instruction Decode Queue (IDQ) while the Microcode Sequenser (MS) is busy. Counting includes uops that may bypass the IDQ. Uops maybe initiated by Decode Stream Buffer (DSB) or MITE.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_CYCLES", new PMUEvent("This event counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequenser (MS) is busy. Counting includes uops that may bypass the IDQ. Uops maybe initiated by Decode Stream Buffer (DSB) or MITE.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_SWITCHES", new PMUEvent(null, "0x79", "0,1,2,3", "0x30", "IDQ.MS_SWITCHES", "2000003", "Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_ALL_UOPS", new PMUEvent("This event counts the number of uops delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may bypass the IDQ. This also means that uops are not being delivered from the Decode Stream Buffer (DSB).", "0x79", "0,1,2,3", "0x3c", "IDQ.MITE_ALL_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.HIT", new PMUEvent("This event counts the number of both cacheable and noncacheable Instruction Cache, Streaming Buffer and Victim Cache Reads including UC fetches.", "0x80", "0,1,2,3", "0x1", "ICACHE.HIT", "2000003", "Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.MISSES", new PMUEvent("This event counts the number of instruction cache, streaming buffer and victim cache misses. Counting includes UC accesses.", "0x80", "0,1,2,3", "0x2", "ICACHE.MISSES", "200003", "Number of Instruction Cache, Streaming Buffer and Victim Cache Misses. Includes Uncacheable accesses.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.IFDATA_STALL", new PMUEvent("This event counts cycles during which the demand fetch waits for data (wfdM104H) from L2 or iSB (opportunistic hit).", "0x80", "0,1,2,3", "0x4", "ICACHE.IFDATA_STALL", "2000003", "Cycles where a code fetch is stalled due to L1 instruction-cache miss.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CORE", new PMUEvent("This event counts the number of uops not delivered to Resource Allocation Table (RAT) per thread adding 4  x when Resource Allocation Table (RAT) is not stalled and Instruction Decode Queue (IDQ) delivers x uops to Resource Allocation Table (RAT) (where x belongs to {0,1,2,3}). Counting does not cover cases when: a. IDQ-Resource Allocation Table (RAT) pipe serves the other thread; b. Resource Allocation Table (RAT) is stalled for the thread (including uop drops and clear BE conditions);  c. Instruction Decode Queue (IDQ) delivers four uops.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CORE", "2000003", "Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", new PMUEvent("This event counts, on the per-thread basis, cycles when no uops are delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core =4.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", "2000003", "Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", new PMUEvent("This event counts, on the per-thread basis, cycles when less than 1 uop is  delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core >=3.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", "2000003", "Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", "2000003", "Cycles with less than 2 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", "2000003", "Cycles with less than 3 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", "2000003", "Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.", "0,1,2,3"));
		eventMap.put("DSB2MITE_SWITCHES.PENALTY_CYCLES", new PMUEvent("This event counts Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles. These cycles do not include uops routed through because of the switch itself, for example, when Instruction Decode Queue (IDQ) pre-allocation is unavailable, or Instruction Decode Queue (IDQ) is full. SBD-to-MITE switch true penalty cycles happen after the merge mux (MM) receives Decode Stream Buffer (DSB) Sync-indication until receiving the first MITE uop. MM is placed before Instruction Decode Queue (IDQ) to merge uops being fed from the MITE and Decode Stream Buffer (DSB) paths. Decode Stream Buffer (DSB) inserts the Sync-indication whenever a Decode Stream Buffer (DSB)-to-MITE switch occurs.Penalty: A Decode Stream Buffer (DSB) hit followed by a Decode Stream Buffer (DSB) miss can cost up to six cycles in which no uops are delivered to the IDQ. Most often, such switches from the Decode Stream Buffer (DSB) to the legacy pipeline cost 02 cycles.", "0xAB", "0,1,2,3", "0x2", "DSB2MITE_SWITCHES.PENALTY_CYCLES", "2000003", "Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MISALIGN_MEM_REF.LOADS", new PMUEvent("This event counts speculative cache-line split load uops dispatched to the L1 cache.", "0x05", "0,1,2,3", "0x1", "MISALIGN_MEM_REF.LOADS", "2000003", "Speculative cache line split load uops dispatched to L1 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("MISALIGN_MEM_REF.STORES", new PMUEvent("This event counts speculative cache line split store-address (STA) uops dispatched to the L1 cache.", "0x05", "0,1,2,3", "0x2", "MISALIGN_MEM_REF.STORES", "2000003", "Speculative cache line split STA uops dispatched to L1 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_CONFLICT", new PMUEvent("Number of times a TSX line had a cache conflict.", "0x54", "0,1,2,3", "0x1", "TX_MEM.ABORT_CONFLICT", "2000003", "Number of times a TSX line had a cache conflict", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_CAPACITY_WRITE", new PMUEvent("Number of times a TSX Abort was triggered due to an evicted line caused by a transaction overflow.", "0x54", "0,1,2,3", "0x2", "TX_MEM.ABORT_CAPACITY_WRITE", "2000003", "Number of times a TSX Abort was triggered due to an evicted line caused by a transaction overflow", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK", new PMUEvent("Number of times a TSX Abort was triggered due to a non-release/commit store to lock.", "0x54", "0,1,2,3", "0x4", "TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK", "2000003", "Number of times a TSX Abort was triggered due to a non-release/commit store to lock", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY", new PMUEvent("Number of times a TSX Abort was triggered due to commit but Lock Buffer not empty.", "0x54", "0,1,2,3", "0x8", "TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY", "2000003", "Number of times a TSX Abort was triggered due to commit but Lock Buffer not empty", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH", new PMUEvent("Number of times a TSX Abort was triggered due to release/commit but data and address mismatch.", "0x54", "0,1,2,3", "0x10", "TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH", "2000003", "Number of times a TSX Abort was triggered due to release/commit but data and address mismatch", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT", new PMUEvent("Number of times a TSX Abort was triggered due to attempting an unsupported alignment from Lock Buffer.", "0x54", "0,1,2,3", "0x20", "TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT", "2000003", "Number of times a TSX Abort was triggered due to attempting an unsupported alignment from Lock Buffer", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.HLE_ELISION_BUFFER_FULL", new PMUEvent("Number of times we could not allocate Lock Buffer.", "0x54", "0,1,2,3", "0x40", "TX_MEM.HLE_ELISION_BUFFER_FULL", "2000003", "Number of times we could not allocate Lock Buffer", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC1", new PMUEvent(null, "0x5d", "0,1,2,3", "0x1", "TX_EXEC.MISC1", "2000003", "Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC2", new PMUEvent("Unfriendly TSX abort triggered by  a vzeroupper instruction.", "0x5d", "0,1,2,3", "0x2", "TX_EXEC.MISC2", "2000003", "Counts the number of times a class of instructions (e.g., vzeroupper) that may cause a transactional abort was executed inside a transactional region", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC3", new PMUEvent("Unfriendly TSX abort triggered by a nest count that is too deep.", "0x5d", "0,1,2,3", "0x4", "TX_EXEC.MISC3", "2000003", "Counts the number of times an instruction execution caused the transactional nest count supported to be exceeded", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC4", new PMUEvent("RTM region detected inside HLE.", "0x5d", "0,1,2,3", "0x8", "TX_EXEC.MISC4", "2000003", "Counts the number of times a XBEGIN instruction was executed inside an HLE transactional region.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC5", new PMUEvent(null, "0x5d", "0,1,2,3", "0x10", "TX_EXEC.MISC5", "2000003", "Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MEMORY_ORDERING", new PMUEvent("This event counts the number of memory ordering Machine Clears detected. Memory Ordering Machine Clears can result from one of the following:1. memory disambiguation,2. external snoop, or3. cross SMT-HW-thread snoop (stores) hitting load buffer.", "0xC3", "0,1,2,3", "0x2", "MACHINE_CLEARS.MEMORY_ORDERING", "100003", "Counts the number of machine clears due to memory order conflicts.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.START", new PMUEvent("Number of times we entered an HLE region does not count nested transactions.", "0xc8", "0,1,2,3", "0x1", "HLE_RETIRED.START", "2000003", "Number of times we entered an HLE region; does not count nested transactions", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.COMMIT", new PMUEvent("Number of times HLE commit succeeded.", "0xc8", "0,1,2,3", "0x2", "HLE_RETIRED.COMMIT", "2000003", "Number of times HLE commit succeeded", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED", new PMUEvent("Number of times HLE abort was triggered (PEBS).", "0xc8", "0,1,2,3", "0x4", "HLE_RETIRED.ABORTED", "2000003", "Number of times HLE abort was triggered (PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC1", new PMUEvent("Number of times an HLE abort was attributed to a Memory condition (See TSX_Memory event for additional details).", "0xc8", "0,1,2,3", "0x8", "HLE_RETIRED.ABORTED_MISC1", "2000003", "Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts).", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC2", new PMUEvent("Number of times the TSX watchdog signaled an HLE abort.", "0xc8", "0,1,2,3", "0x10", "HLE_RETIRED.ABORTED_MISC2", "2000003", "Number of times an HLE execution aborted due to uncommon conditions", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC3", new PMUEvent("Number of times a disallowed operation caused an HLE abort.", "0xc8", "0,1,2,3", "0x20", "HLE_RETIRED.ABORTED_MISC3", "2000003", "Number of times an HLE execution aborted due to HLE-unfriendly instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC4", new PMUEvent("Number of times HLE caused a fault.", "0xc8", "0,1,2,3", "0x40", "HLE_RETIRED.ABORTED_MISC4", "2000003", "Number of times an HLE execution aborted due to incompatible memory type", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC5", new PMUEvent("Number of times HLE aborted and was not due to the abort conditions in subevents 3-6.", "0xc8", "0,1,2,3", "0x80", "HLE_RETIRED.ABORTED_MISC5", "2000003", "Number of times an HLE execution aborted due to none of the previous 4 categories (e.g. interrupts)", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.START", new PMUEvent("Number of times we entered an RTM region does not count nested transactions.", "0xc9", "0,1,2,3", "0x1", "RTM_RETIRED.START", "2000003", "Number of times we entered an RTM region; does not count nested transactions", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.COMMIT", new PMUEvent("Number of times RTM commit succeeded.", "0xc9", "0,1,2,3", "0x2", "RTM_RETIRED.COMMIT", "2000003", "Number of times RTM commit succeeded", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED", new PMUEvent("Number of times RTM abort was triggered (PEBS).", "0xc9", "0,1,2,3", "0x4", "RTM_RETIRED.ABORTED", "2000003", "Number of times RTM abort was triggered (PEBS)", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC1", new PMUEvent("Number of times an RTM abort was attributed to a Memory condition (See TSX_Memory event for additional details).", "0xc9", "0,1,2,3", "0x8", "RTM_RETIRED.ABORTED_MISC1", "2000003", "Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts)", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC2", new PMUEvent("Number of times the TSX watchdog signaled an RTM abort.", "0xc9", "0,1,2,3", "0x10", "RTM_RETIRED.ABORTED_MISC2", "2000003", "Number of times an RTM execution aborted due to various memory events (e.g., read/write capacity and conflicts).", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC3", new PMUEvent("Number of times a disallowed operation caused an RTM abort.", "0xc9", "0,1,2,3", "0x20", "RTM_RETIRED.ABORTED_MISC3", "2000003", "Number of times an RTM execution aborted due to HLE-unfriendly instructions", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC4", new PMUEvent("Number of times a RTM caused a fault.", "0xc9", "0,1,2,3", "0x40", "RTM_RETIRED.ABORTED_MISC4", "2000003", "Number of times an RTM execution aborted due to incompatible memory type", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC5", new PMUEvent("Number of times RTM aborted and was not due to the abort conditions in subevents 3-6.", "0xc9", "0,1,2,3", "0x80", "RTM_RETIRED.ABORTED_MISC5", "2000003", "Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt)", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", new PMUEvent("This event counts loads with latency value being above four.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", "100003", "Loads with latency value being above 4", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", new PMUEvent("This event counts loads with latency value being above eight.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", "50021", "Loads with latency value being above 8", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", new PMUEvent("This event counts loads with latency value being above 16.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", "20011", "Loads with latency value being above 16", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", new PMUEvent("This event counts loads with latency value being above 32.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", "100007", "Loads with latency value being above 32", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", new PMUEvent("This event counts loads with latency value being above 64.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", "2003", "Loads with latency value being above 64", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", new PMUEvent("This event counts loads with latency value being above 128.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", "1009", "Loads with latency value being above 128", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", new PMUEvent("This event counts loads with latency value being above 256.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", "503", "Loads with latency value being above 256", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", new PMUEvent("This event counts loads with latency value being above 512.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", "101", "Loads with latency value being above 512", "3"));
		eventMap.put("CPL_CYCLES.RING0", new PMUEvent("This event counts the unhalted core cycles during which the thread is in the ring 0 privileged mode.", "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0", "2000003", "Unhalted core cycles when the thread is in ring 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING0_TRANS", new PMUEvent("This event counts when there is a transition from ring 1,2 or 3 to ring0.", "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0_TRANS", "100007", "Number of intervals between processor halts while thread is in ring 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING123", new PMUEvent("This event counts unhalted core cycles during which the thread is in rings 1, 2, or 3.", "0x5C", "0,1,2,3", "0x2", "CPL_CYCLES.RING123", "2000003", "Unhalted core cycles when thread is in rings 1, 2, or 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", new PMUEvent("This event counts cycles in which the L1 and L2 are locked due to a UC lock or split lock. A lock is asserted in case of locked memory access, due to noncacheable memory, locked operation that spans two cache lines, or a page walk from the noncacheable page table. L1D and L2 locks have a very high performance penalty and it is highly recommended to avoid such access.", "0x63", "0,1,2,3", "0x1", "LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", "2000003", "Cycles when L1 and L2 are locked due to UC or split lock", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent("This event counts the number of instructions retired from execution. For instructions that consist of multiple micro-ops, this event counts the retirement of the last micro-op of the instruction. Counting continues during hardware interrupts, traps, and inside interrupt handlers. Notes: INST_RETIRED.ANY is counted by a designated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. INST_RETIRED.ANY_P is counted by a programmable counter and it is an architectural performance event. Counting: Faulting executions of GETSEC/VM entry/VM Exit/MWait will not count as retired instructions.", "0x00", "Fixed counter 0", "0x1", "INST_RETIRED.ANY", "2000003", "Instructions retired from execution.", "Fixed counter 0"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD", new PMUEvent("This event counts the number of core cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. This event is a component in many key event ratios. The core frequency may change from time to time due to transitions associated with Enhanced Intel SpeedStep Technology or TM2. For this reason this event may have a changing ratio with regards to time. When the core frequency is constant, this event can approximate elapsed time while the core was not in the halt state. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events.", "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD", "2000003", "Core cycles when the thread is not in halt state", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_ANY", new PMUEvent(null, "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.REF_TSC", new PMUEvent("This event counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state. This event has a constant ratio with the CPU_CLK_UNHALTED.REF_XCLK event. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. Note: On all current platforms this event stops counting during 'throttling (TM)' states duty off periods the processor is 'halted'.  This event is clocked by base clock (100 Mhz) on Sandy Bridge. The counter update is done at a lower clock rate then the core clock the overflow status bit for this counter may appear 'sticky'.  After the counter has overflowed and software clears the overflow status bit and resets the counter to less than MAX. The reset value to the counter is not clocked immediately so the overflow status bit will flip 'high (1)' and generate another PMI (if enabled) after which the reset value gets clocked into the counter. Therefore, software will get the interrupt, read the overflow status bit '1 for bit 34 while the counter value is less than MAX. Software should ignore this case.", "0x00", "Fixed counter 2", "0x3", "CPU_CLK_UNHALTED.REF_TSC", "2000003", "Reference cycles when the core is not in halt state.", "Fixed counter 2"));
		eventMap.put("LD_BLOCKS.STORE_FORWARD", new PMUEvent("This event counts how many times the load operation got the true Block-on-Store blocking code preventing store forwarding. This includes cases when: - preceding store conflicts with the load (incomplete overlap); - store forwarding is impossible due to u-arch limitations; - preceding lock RMW operations are not forwarded; - store has the no-forward bit set (uncacheable/page-split/masked stores); - all-blocking stores are used (mostly, fences and port I/O);and others.The most common case is a load blocked due to its address range overlapping with a preceding smaller uncompleted store. Note: This event does not take into account cases of out-of-SW-control (for example, SbTailHit), unknown physical STA, and cases of blocking loads on store due to being non-WB memory type or a lock. These cases are covered by other events.See the table of not supported store forwards in the Optimization Guide.", "0x03", "0,1,2,3", "0x2", "LD_BLOCKS.STORE_FORWARD", "100003", "Cases when loads get true Block-on-Store blocking code preventing store forwarding", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.NO_SR", new PMUEvent(null, "0x03", "0,1,2,3", "0x8", "LD_BLOCKS.NO_SR", "100003", "This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", new PMUEvent("This event counts false dependencies in MOB when the partial comparison upon loose net check and dependency was resolved by the Enhanced Loose net mechanism. This may not result in high performance penalties. Loose net checks can fail when loads and stores are 4k aliased.", "0x07", "0,1,2,3", "0x1", "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", "100003", "False dependencies in MOB due to partial compare", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES", new PMUEvent("Cycles checkpoints in Resource Allocation Table (RAT) are recovering from JEClear or machine clear.", "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for this thread (e.g. misprediction or memory nuke)", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES_ANY", new PMUEvent(null, "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES_ANY", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke).", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RAT_STALL_CYCLES", new PMUEvent("This event counts the number of cycles during which Resource Allocation Table (RAT) external stall is sent to Instruction Decode Queue (IDQ) for the current thread. This also includes the cycles during which the Allocator is serving another thread.", "0x0D", "0,1,2,3", "0x8", "INT_MISC.RAT_STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) external stall is sent to Instruction Decode Queue (IDQ) for the thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.ANY", new PMUEvent("This event counts the number of Uops issued by the Resource Allocation Table (RAT) to the reservation station (RS).", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.ANY", "2000003", "Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.STALL_CYCLES", new PMUEvent("This event counts cycles during which the Resource Allocation Table (RAT) does not issue any Uops to the reservation station (RS) for the current thread.", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread", "0,1,2,3"));
		eventMap.put("UOPS_ISSUED.FLAGS_MERGE", new PMUEvent("Number of flags-merge uops being allocated. Such uops considered perf sensitive added by GSR u-arch.", "0x0E", "0,1,2,3", "0x10", "UOPS_ISSUED.FLAGS_MERGE", "2000003", "Number of flags-merge uops being allocated. Such uops considered perf sensitive; added by GSR u-arch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.SLOW_LEA", new PMUEvent(null, "0x0E", "0,1,2,3", "0x20", "UOPS_ISSUED.SLOW_LEA", "2000003", "Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.SINGLE_MUL", new PMUEvent(null, "0x0E", "0,1,2,3", "0x40", "UOPS_ISSUED.SINGLE_MUL", "2000003", "Number of Multiply packed/scalar single precision uops allocated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ARITH.FPU_DIV_ACTIVE", new PMUEvent("This event counts the number of the divide operations executed. Uses edge-detect and a cmask value of 1 on ARITH.FPU_DIV_ACTIVE to get the number of the divide operations executed.", "0x14", "0,1,2,3", "0x1", "ARITH.FPU_DIV_ACTIVE", "2000003", "Cycles when divider is busy executing divide operations", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P", new PMUEvent("This is an architectural event that counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling. For this reason, this event may have a changing ratio with regards to wall clock time.", "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P", "2000003", "Thread cycles when thread is not in halt state", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK", new PMUEvent("This is a fixed-frequency event programmed to general counters. It counts when the core is unhalted at 100 Mhz.", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate).", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK", new PMUEvent("Reference cycles when the thread is unhalted (counts at 100 MHz rate).", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate).", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3c", "0,1,2,3", "0x2", "CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other thread is halted.", "0,1,2,3"));
		eventMap.put("CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other thread is halted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.SW_PF", new PMUEvent("This event counts all not software-prefetch load dispatches that hit the fill buffer (FB) allocated for the software prefetch. It can also be incremented by some lock instructions. So it should only be used with profiling so that the locks can be excluded by asm inspection of the nearby instructions.", "0x4c", "0,1,2,3", "0x1", "LOAD_HIT_PRE.SW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for software prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.HW_PF", new PMUEvent("This event counts all not software-prefetch load dispatches that hit the fill buffer (FB) allocated for the hardware prefetch.", "0x4C", "0,1,2,3", "0x2", "LOAD_HIT_PRE.HW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for hardware prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.INT_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x1", "MOVE_ELIMINATION.INT_ELIMINATED", "1000003", "Number of integer Move Elimination candidate uops that were eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.SIMD_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x2", "MOVE_ELIMINATION.SIMD_ELIMINATED", "1000003", "Number of SIMD Move Elimination candidate uops that were eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.INT_NOT_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x4", "MOVE_ELIMINATION.INT_NOT_ELIMINATED", "1000003", "Number of integer Move Elimination candidate uops that were not eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.SIMD_NOT_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x8", "MOVE_ELIMINATION.SIMD_NOT_ELIMINATED", "1000003", "Number of SIMD Move Elimination candidate uops that were not eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_CYCLES", new PMUEvent("This event counts cycles during which the reservation station (RS) is empty for the thread.Note: In ST-mode, not active thread should drive 0. This is usually caused by severely costly branch mispredictions, or allocator/FE issues.", "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_CYCLES", "2000003", "Cycles when Reservation Station (RS) is empty for the thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_END", new PMUEvent(null, "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_END", "200003", "Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.LCP", new PMUEvent("This event counts stalls occured due to changing prefix length (66, 67 or REX.W when they change the length of the decoded instruction). Occurrences counting is proportional to the number of prefixes in a 16B-line. This may result in the following penalties: three-cycle penalty for each LCP in a 16-byte chunk.", "0x87", "0,1,2,3", "0x1", "ILD_STALL.LCP", "2000003", "Stalls caused by changing prefix length of the instruction.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent("This event counts not taken macro-conditional branch instructions.", "0x88", "0,1,2,3", "0x41", "BR_INST_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken macro-conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_CONDITIONAL", new PMUEvent("This event counts taken speculative and retired macro-conditional branch instructions.", "0x88", "0,1,2,3", "0x81", "BR_INST_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired macro-conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_JUMP", new PMUEvent("This event counts taken speculative and retired macro-conditional branch instructions excluding calls and indirect branches.", "0x88", "0,1,2,3", "0x82", "BR_INST_EXEC.TAKEN_DIRECT_JUMP", "200003", "Taken speculative and retired macro-conditional branch instructions excluding calls and indirects", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("This event counts taken speculative and retired indirect branches excluding calls and return branches.", "0x88", "0,1,2,3", "0x84", "BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", new PMUEvent("This event counts taken speculative and retired indirect branches that have a return mnemonic.", "0x88", "0,1,2,3", "0x88", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", "200003", "Taken speculative and retired indirect branches with return mnemonic", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", new PMUEvent("This event counts taken speculative and retired direct near calls.", "0x88", "0,1,2,3", "0x90", "BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", "200003", "Taken speculative and retired direct near calls", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent("This event counts taken speculative and retired indirect calls including both register and memory indirect.", "0x88", "0,1,2,3", "0xa0", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired indirect calls", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_CONDITIONAL", new PMUEvent("This event counts both taken and not taken speculative and retired macro-conditional branch instructions.", "0x88", "0,1,2,3", "0xc1", "BR_INST_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired macro-conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_JMP", new PMUEvent("This event counts both taken and not taken speculative and retired macro-unconditional branch instructions, excluding calls and indirects.", "0x88", "0,1,2,3", "0xc2", "BR_INST_EXEC.ALL_DIRECT_JMP", "200003", "Speculative and retired macro-unconditional branches excluding calls and indirects", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("This event counts both taken and not taken speculative and retired indirect branches excluding calls and return branches.", "0x88", "0,1,2,3", "0xc4", "BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Speculative and retired indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", new PMUEvent("This event counts both taken and not taken speculative and retired indirect branches that have a return mnemonic.", "0x88", "0,1,2,3", "0xc8", "BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", "200003", "Speculative and retired indirect return branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", new PMUEvent("This event counts both taken and not taken speculative and retired direct near calls.", "0x88", "0,1,2,3", "0xd0", "BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", "200003", "Speculative and retired direct near calls", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_BRANCHES", new PMUEvent("This event counts both taken and not taken speculative and retired branch instructions.", "0x88", "0,1,2,3", "0xff", "BR_INST_EXEC.ALL_BRANCHES", "200003", "Speculative and retired  branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent("This event counts not taken speculative and retired mispredicted macro conditional branch instructions.", "0x89", "0,1,2,3", "0x41", "BR_MISP_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_CONDITIONAL", new PMUEvent("This event counts taken speculative and retired mispredicted macro conditional branch instructions.", "0x89", "0,1,2,3", "0x81", "BR_MISP_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("This event counts taken speculative and retired mispredicted indirect branches excluding calls and returns.", "0x89", "0,1,2,3", "0x84", "BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired mispredicted indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_RETURN_NEAR", new PMUEvent("This event counts taken speculative and retired mispredicted indirect branches that have a return mnemonic.", "0x89", "0,1,2,3", "0x88", "BR_MISP_EXEC.TAKEN_RETURN_NEAR", "200003", "Taken speculative and retired mispredicted indirect branches with return mnemonic", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0xa0", "BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired mispredicted indirect calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_CONDITIONAL", new PMUEvent("This event counts both taken and not taken speculative and retired mispredicted macro conditional branch instructions.", "0x89", "0,1,2,3", "0xc1", "BR_MISP_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("This event counts both taken and not taken mispredicted indirect branches excluding calls and returns.", "0x89", "0,1,2,3", "0xc4", "BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Mispredicted indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_BRANCHES", new PMUEvent("This event counts both taken and not taken speculative and retired mispredicted branch instructions.", "0x89", "0,1,2,3", "0xff", "BR_MISP_EXEC.ALL_BRANCHES", "200003", "Speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOP_DISPATCHES_CANCELLED.SIMD_PRF", new PMUEvent("This event counts the number of micro-operations cancelled after they were dispatched from the scheduler to the execution units when the total number of physical register read ports across all dispatch ports exceeds the read bandwidth of the physical register file.  The SIMD_PRF subevent applies to the following instructions: VDPPS, DPPS, VPCMPESTRI, PCMPESTRI, VPCMPESTRM, PCMPESTRM, VFMADD*, VFMADDSUB*, VFMSUB*, VMSUBADD*, VFNMADD*, VFNMSUB*.  See the Broadwell Optimization Guide for more information.", "0xA0", "0,1,2,3", "0x3", "UOP_DISPATCHES_CANCELLED.SIMD_PRF", "2000003", "Micro-op dispatches cancelled due to insufficient SIMD physical register file read ports", "0,1,2,3"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_0", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 0.", "0xA1", "0,1,2,3", "0x1", "UOPS_DISPATCHED_PORT.PORT_0", "2000003", "Cycles per thread when uops are executed in port 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_0_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x1", "UOPS_EXECUTED_PORT.PORT_0_CORE", "2000003", "Cycles per core when uops are exectuted in port 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_0", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 0.", "0xA1", "0,1,2,3", "0x1", "UOPS_EXECUTED_PORT.PORT_0", "2000003", "Cycles per thread when uops are executed in port 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_1", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 1.", "0xA1", "0,1,2,3", "0x2", "UOPS_DISPATCHED_PORT.PORT_1", "2000003", "Cycles per thread when uops are executed in port 1", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_1_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x2", "UOPS_EXECUTED_PORT.PORT_1_CORE", "2000003", "Cycles per core when uops are exectuted in port 1.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_1", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 1.", "0xA1", "0,1,2,3", "0x2", "UOPS_EXECUTED_PORT.PORT_1", "2000003", "Cycles per thread when uops are executed in port 1", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_2", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 2.", "0xA1", "0,1,2,3", "0x4", "UOPS_DISPATCHED_PORT.PORT_2", "2000003", "Cycles per thread when uops are executed in port 2", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_2_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x4", "UOPS_EXECUTED_PORT.PORT_2_CORE", "2000003", "Cycles per core when uops are dispatched to port 2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_2", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 2.", "0xA1", "0,1,2,3", "0x4", "UOPS_EXECUTED_PORT.PORT_2", "2000003", "Cycles per thread when uops are executed in port 2", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_3", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 3.", "0xA1", "0,1,2,3", "0x8", "UOPS_DISPATCHED_PORT.PORT_3", "2000003", "Cycles per thread when uops are executed in port 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_3_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x8", "UOPS_EXECUTED_PORT.PORT_3_CORE", "2000003", "Cycles per core when uops are dispatched to port 3.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_3", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 3.", "0xA1", "0,1,2,3", "0x8", "UOPS_EXECUTED_PORT.PORT_3", "2000003", "Cycles per thread when uops are executed in port 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_4", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 4.", "0xA1", "0,1,2,3", "0x10", "UOPS_DISPATCHED_PORT.PORT_4", "2000003", "Cycles per thread when uops are executed in port 4", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_4_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x10", "UOPS_EXECUTED_PORT.PORT_4_CORE", "2000003", "Cycles per core when uops are exectuted in port 4.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_4", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 4.", "0xA1", "0,1,2,3", "0x10", "UOPS_EXECUTED_PORT.PORT_4", "2000003", "Cycles per thread when uops are executed in port 4", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_5", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 5.", "0xA1", "0,1,2,3", "0x20", "UOPS_DISPATCHED_PORT.PORT_5", "2000003", "Cycles per thread when uops are executed in port 5", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_5_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x20", "UOPS_EXECUTED_PORT.PORT_5_CORE", "2000003", "Cycles per core when uops are exectuted in port 5.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_5", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 5.", "0xA1", "0,1,2,3", "0x20", "UOPS_EXECUTED_PORT.PORT_5", "2000003", "Cycles per thread when uops are executed in port 5", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_6", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 6.", "0xA1", "0,1,2,3", "0x40", "UOPS_DISPATCHED_PORT.PORT_6", "2000003", "Cycles per thread when uops are executed in port 6", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_6_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x40", "UOPS_EXECUTED_PORT.PORT_6_CORE", "2000003", "Cycles per core when uops are exectuted in port 6.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_6", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 6.", "0xA1", "0,1,2,3", "0x40", "UOPS_EXECUTED_PORT.PORT_6", "2000003", "Cycles per thread when uops are executed in port 6", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_7", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 7.", "0xA1", "0,1,2,3", "0x80", "UOPS_DISPATCHED_PORT.PORT_7", "2000003", "Cycles per thread when uops are executed in port 7", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_7_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x80", "UOPS_EXECUTED_PORT.PORT_7_CORE", "2000003", "Cycles per core when uops are dispatched to port 7.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_7", new PMUEvent("This event counts, on the per-thread basis, cycles during which uops are dispatched from the Reservation Station (RS) to port 7.", "0xA1", "0,1,2,3", "0x80", "UOPS_EXECUTED_PORT.PORT_7", "2000003", "Cycles per thread when uops are executed in port 7", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ANY", new PMUEvent("This event counts resource-related stall cycles. Reasons for stalls can be as follows: - *any* u-arch structure got full (LB, SB, RS, ROB, BOB, LM, Physical Register Reclaim Table (PRRT), or Physical History Table (PHT) slots) - *any* u-arch structure got empty (like INT/SIMD FreeLists) - FPU control word (FPCW), MXCSRand others. This counts cycles that the pipeline backend blocked uop delivery from the front end.", "0xA2", "0,1,2,3", "0x1", "RESOURCE_STALLS.ANY", "2000003", "Resource-related stall cycles", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.RS", new PMUEvent("This event counts stall cycles caused by absence of eligible entries in the reservation station (RS). This may result from RS overflow, or from RS deallocation because of the RS array Write Port allocation scheme (each RS entry has two write ports instead of four. As a result, empty entries could not be used, although RS is not really full). This counts cycles that the pipeline backend blocked uop delivery from the front end.", "0xA2", "0,1,2,3", "0x4", "RESOURCE_STALLS.RS", "2000003", "Cycles stalled due to no eligible RS entry available.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.SB", new PMUEvent("This event counts stall cycles caused by the store buffer (SB) overflow (excluding draining from synch). This counts cycles that the pipeline backend blocked uop delivery from the front end.", "0xA2", "0,1,2,3", "0x8", "RESOURCE_STALLS.SB", "2000003", "Cycles stalled due to no store buffers available. (not including draining form sync).", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ROB", new PMUEvent("This event counts ROB full stall cycles. This counts cycles that the pipeline backend blocked uop delivery from the front end.", "0xA2", "0,1,2,3", "0x10", "RESOURCE_STALLS.ROB", "2000003", "Cycles stalled due to re-order buffer full.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L2_PENDING", new PMUEvent("Counts number of cycles the CPU has at least one pending  demand* load request missing the L2 cache.", "0xA3", "0,1,2,3", "0x1", "CYCLE_ACTIVITY.CYCLES_L2_PENDING", "2000003", "Cycles while L2 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L2_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x1", "CYCLE_ACTIVITY.CYCLES_L2_MISS", "2000003", "Cycles while L2 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_LDM_PENDING", new PMUEvent("Counts number of cycles the CPU has at least one pending  demand load request (that is cycles with non-completed load waiting for its data from memory subsystem).", "0xA3", "0,1,2,3", "0x2", "CYCLE_ACTIVITY.CYCLES_LDM_PENDING", "2000003", "Cycles while memory subsystem has an outstanding load.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_MEM_ANY", new PMUEvent(null, "0xA3", "0,1,2,3", "0x2", "CYCLE_ACTIVITY.CYCLES_MEM_ANY", "2000003", "Cycles while memory subsystem has an outstanding load.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_NO_EXECUTE", new PMUEvent("Counts number of cycles nothing is executed on any execution port.", "0xA3", "0,1,2,3", "0x4", "CYCLE_ACTIVITY.CYCLES_NO_EXECUTE", "2000003", "This event increments by 1 for every cycle where there was no execute for this thread.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_TOTAL", new PMUEvent(null, "0xA3", "0,1,2,3", "0x4", "CYCLE_ACTIVITY.STALLS_TOTAL", "2000003", "Total execution stalls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L2_PENDING", new PMUEvent("Counts number of cycles nothing is executed on any execution port, while there was at least one pending demand* load request missing the L2 cache.(as a footprint) * includes also L1 HW prefetch requests that may or may not be required by demands.", "0xA3", "0,1,2,3", "0x5", "CYCLE_ACTIVITY.STALLS_L2_PENDING", "2000003", "Execution stalls while L2 cache miss demand load is outstanding.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L2_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x5", "CYCLE_ACTIVITY.STALLS_L2_MISS", "2000003", "Execution stalls while L2 cache miss demand load is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_LDM_PENDING", new PMUEvent("Counts number of cycles nothing is executed on any execution port, while there was at least one pending demand load request.", "0xA3", "0,1,2,3", "0x6", "CYCLE_ACTIVITY.STALLS_LDM_PENDING", "2000003", "Execution stalls while memory subsystem has an outstanding load.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_MEM_ANY", new PMUEvent(null, "0xA3", "0,1,2,3", "0x6", "CYCLE_ACTIVITY.STALLS_MEM_ANY", "2000003", "Execution stalls while memory subsystem has an outstanding load.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L1D_PENDING", new PMUEvent("Counts number of cycles the CPU has at least one pending  demand load request missing the L1 data cache.", "0xA3", "2", "0x8", "CYCLE_ACTIVITY.CYCLES_L1D_PENDING", "2000003", "Cycles while L1 cache miss demand load is outstanding.", "2"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L1D_MISS", new PMUEvent(null, "0xA3", "2", "0x8", "CYCLE_ACTIVITY.CYCLES_L1D_MISS", "2000003", "Cycles while L1 cache miss demand load is outstanding.", "2"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L1D_PENDING", new PMUEvent("Counts number of cycles nothing is executed on any execution port, while there was at least one pending demand load request missing the L1 data cache.", "0xA3", "2", "0xc", "CYCLE_ACTIVITY.STALLS_L1D_PENDING", "2000003", "Execution stalls while L1 cache miss demand load is outstanding.", "2"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L1D_MISS", new PMUEvent(null, "0xA3", "2", "0xc", "CYCLE_ACTIVITY.STALLS_L1D_MISS", "2000003", "Execution stalls while L1 cache miss demand load is outstanding.", "2"));
		eventMap.put("LSD.UOPS", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.UOPS", "2000003", "Number of Uops delivered by the LSD.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_4_UOPS", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_4_UOPS", "2000003", "Cycles 4 Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_ACTIVE", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_ACTIVE", "2000003", "Cycles Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.THREAD", new PMUEvent("Number of uops to be executed per-thread each cycle.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.THREAD", "2000003", "Counts the number of uops to be executed per-thread each cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.STALL_CYCLES", new PMUEvent("This event counts cycles during which no uops were dispatched from the Reservation Station (RS) per thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.STALL_CYCLES", "2000003", "Counts number of cycles no uops were dispatched to be executed on this thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", "2000003", "Cycles where at least 1 uop was executed per-thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", "2000003", "Cycles where at least 2 uops were executed per-thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", "2000003", "Cycles where at least 3 uops were executed per-thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", "2000003", "Cycles where at least 4 uops were executed per-thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CORE", new PMUEvent("Number of uops executed from any thread.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE", "2000003", "Number of uops executed on the core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_1", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_1", "2000003", "Cycles at least 1 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_2", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_2", "2000003", "Cycles at least 2 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_3", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_3", "2000003", "Cycles at least 3 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_4", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_4", "2000003", "Cycles at least 4 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_NONE", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_NONE", "2000003", "Cycles with no micro-ops executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent("This event counts the number of instructions (EOMs) retired. Counting covers macro-fused instructions individually (that is, increments by two).", "0xC0", "0,1,2,3", "0x0", "INST_RETIRED.ANY_P", "2000003", "Number of instructions retired. General Counter   - architectural event", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.PREC_DIST", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts instructions retired.", "0xC0", "1", "0x1", "INST_RETIRED.PREC_DIST", "2000003", "Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution", "1"));
		eventMap.put("INST_RETIRED.X87", new PMUEvent("This event counts FP operations retired. For X87 FP operations that have no exceptions counting also includes flows that have several X87, or flows that use X87 uops in the exception handling.", "0xC0", "0,1,2,3", "0x2", "INST_RETIRED.X87", "2000003", "FP operations  retired. X87 FP operations that have no exceptions:", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.ANY_WB_ASSIST", new PMUEvent(null, "0xC1", "0,1,2,3", "0x40", "OTHER_ASSISTS.ANY_WB_ASSIST", "100003", "Number of times any microcode assist is invoked by HW upon uop writeback.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.ALL", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts all actually retired uops. Counting increments by two for micro-fused uops, and by one for macro-fused and other uops. Maximal increment value for one cycle is eight.", "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.ALL", "2000003", "Actually retired uops. (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.STALL_CYCLES", new PMUEvent("This event counts cycles without actually retired uops.", "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.TOTAL_CYCLES", new PMUEvent("Number of cycles using always true condition (uops_ret < 16) applied to non PEBS uops retired event.", "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.TOTAL_CYCLES", "2000003", "Cycles with less than 10 actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.RETIRE_SLOTS", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts the number of retirement slots used.", "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.RETIRE_SLOTS", "2000003", "Retirement slots used. (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.CYCLES", new PMUEvent("This event counts both thread-specific (TS) and all-thread (AT) nukes.", "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.CYCLES", "2000003", "Cycles there was a Nuke. Account for both thread-specific and All Thread Nukes.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.COUNT", new PMUEvent(null, "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.COUNT", "100003", "Number of machine clears (nukes) of any type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent("This event counts self-modifying code (SMC) detected, which causes a machine clear.", "0xC3", "0,1,2,3", "0x4", "MACHINE_CLEARS.SMC", "100003", "Self-modifying code (SMC) detected.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MASKMOV", new PMUEvent("Maskmov false fault - counts number of time ucode passes through Maskmov flow due to instruction's mask being 0 while the flow was completed without raising a fault.", "0xC3", "0,1,2,3", "0x20", "MACHINE_CLEARS.MASKMOV", "100003", "This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent("This event counts all (macro) branch instructions retired.", "0xC4", "0,1,2,3", "0x0", "BR_INST_RETIRED.ALL_BRANCHES", "400009", "All (macro) branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.CONDITIONAL", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts conditional branch instructions retired.", "0xC4", "0,1,2,3", "0x1", "BR_INST_RETIRED.CONDITIONAL", "400009", "Conditional branch instructions retired. (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts both direct and indirect near call instructions retired.", "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL", "100007", "Direct and indirect near call instructions retired. (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL_R3", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts both direct and indirect macro near call instructions retired (captured in ring 3).", "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL_R3", "100007", "Direct and indirect macro near call instructions retired (captured in ring 3). (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent("This is a precise version of BR_INST_RETIRED.ALL_BRANCHES that counts all (macro) branch instructions retired.", "0xC4", "0,1,2,3", "0x4", "BR_INST_RETIRED.ALL_BRANCHES_PEBS", "400009", "All (macro) branch instructions retired. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("BR_INST_RETIRED.NEAR_RETURN", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts return instructions retired.", "0xC4", "0,1,2,3", "0x8", "BR_INST_RETIRED.NEAR_RETURN", "100007", "Return instructions retired. (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NOT_TAKEN", new PMUEvent("This event counts not taken branch instructions retired.", "0xC4", "0,1,2,3", "0x10", "BR_INST_RETIRED.NOT_TAKEN", "400009", "Not taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_TAKEN", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts taken branch instructions retired.", "0xC4", "0,1,2,3", "0x20", "BR_INST_RETIRED.NEAR_TAKEN", "400009", "Taken branch instructions retired. (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.FAR_BRANCH", new PMUEvent("This event counts far branch instructions retired.", "0xC4", "0,1,2,3", "0x40", "BR_INST_RETIRED.FAR_BRANCH", "100007", "Far branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent("This event counts all mispredicted macro branch instructions retired.", "0xC5", "0,1,2,3", "0x0", "BR_MISP_RETIRED.ALL_BRANCHES", "400009", "All mispredicted macro branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.CONDITIONAL", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts mispredicted conditional branch instructions retired.", "0xC5", "0,1,2,3", "0x1", "BR_MISP_RETIRED.CONDITIONAL", "400009", "Mispredicted conditional branch instructions retired. (Precise Event - PEBS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent("This is a precise version of BR_MISP_RETIRED.ALL_BRANCHES that counts all mispredicted macro branch instructions retired.", "0xC5", "0,1,2,3", "0x4", "BR_MISP_RETIRED.ALL_BRANCHES_PEBS", "400009", "Mispredicted macro branch instructions retired. (Precise Event - PEBS)", "0,1,2,3"));
		eventMap.put("BR_MISP_RETIRED.RET", new PMUEvent("This is a precise version (that is, uses PEBS) of the event that counts mispredicted return instructions retired.", "0xC5", "0,1,2,3", "0x8", "BR_MISP_RETIRED.RET", "100007", "This event counts the number of mispredicted ret instructions retired.(Precise Event)", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.NEAR_TAKEN", new PMUEvent("Number of near branch instructions retired that were mispredicted and taken. (Precise Event - PEBS).", "0xC5", "0,1,2,3", "0x20", "BR_MISP_RETIRED.NEAR_TAKEN", "400009", "number of near branch instructions retired that were mispredicted and taken. (Precise Event - PEBS).", "0,1,2,3,4,5,6,7"));
		eventMap.put("ROB_MISC_EVENTS.LBR_INSERTS", new PMUEvent("This event counts cases of saving new LBR records by hardware. This assumes proper enabling of LBRs and takes into account LBR filtering done by the LBR_SELECT register.", "0xCC", "0,1,2,3", "0x20", "ROB_MISC_EVENTS.LBR_INSERTS", "2000003", "Count cases of saving new LBR", "0,1,2,3,4,5,6,7"));
		eventMap.put("BACLEARS.ANY", new PMUEvent(null, "0xe6", "0,1,2,3", "0x1f", "BACLEARS.ANY", "100003", "Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UNC_C_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_C_CLOCKTICKS", null, "Uncore cache clock ticks", null));
		eventMap.put("UNC_C_LLC_LOOKUP.ANY", new PMUEvent(null, "0x34", "0,1,2,3", "0x11", "UNC_C_LLC_LOOKUP.ANY", null, "All LLC Misses (code+ data rd + data wr - including demand and prefetch)", null));
		eventMap.put("UNC_C_LLC_VICTIMS.M_STATE", new PMUEvent(null, "0x37", "0,1,2,3", "0x1", "UNC_C_LLC_VICTIMS.M_STATE", null, "M line evictions from LLC (writebacks to memory)", null));
		eventMap.put("LLC_MISSES.DATA_READ", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.DATA_READ", null, "LLC misses - demand and prefetch data reads - excludes LLC prefetches. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.UNCACHEABLE", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.UNCACHEABLE", null, "LLC misses - Uncacheable reads (from cpu) . Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.MMIO_READ", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.MMIO_READ", null, "MMIO reads. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.MMIO_WRITE", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.MMIO_WRITE", null, "MMIO writes. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.RFO_LLC_PREFETCH", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.RFO_LLC_PREFETCH", null, "LLC prefetch misses for RFO. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.CODE_LLC_PREFETCH", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.CODE_LLC_PREFETCH", null, "LLC prefetch misses for code reads. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.DATA_LLC_PREFETCH", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.DATA_LLC_PREFETCH", null, "LLC prefetch misses for data reads. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.PCIE_READ", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.PCIE_READ", null, "LLC misses for PCIe read current. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.PCIE_WRITE", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.PCIE_WRITE", null, "ItoM write misses (as part of fast string memcpy stores) + PCIe full line writes. Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_MISSES.PCIE_NON_SNOOP_WRITE", new PMUEvent(null, "0x35", "0,1,2,3", "0x3", "LLC_MISSES.PCIE_NON_SNOOP_WRITE", null, "PCIe write misses (full cache line). Derived from unc_c_tor_inserts.miss_opcode", null));
		eventMap.put("LLC_REFERENCES.PCIE_NS_PARTIAL_WRITE", new PMUEvent(null, "0x35", "0,1,2,3", "0x1", "LLC_REFERENCES.PCIE_NS_PARTIAL_WRITE", null, "PCIe writes (partial cache line). Derived from unc_c_tor_inserts.opcode", null));
		eventMap.put("LLC_REFERENCES.CODE_LLC_PREFETCH", new PMUEvent(null, "0x35", "0,1,2,3", "0x1", "LLC_REFERENCES.CODE_LLC_PREFETCH", null, "L2 demand and L2 prefetch code references to LLC. Derived from unc_c_tor_inserts.opcode", null));
		eventMap.put("LLC_REFERENCES.STREAMING_FULL", new PMUEvent(null, "0x35", "0,1,2,3", "0x1", "LLC_REFERENCES.STREAMING_FULL", null, "Streaming stores (full cache line). Derived from unc_c_tor_inserts.opcode", null));
		eventMap.put("LLC_REFERENCES.STREAMING_PARTIAL", new PMUEvent(null, "0x35", "0,1,2,3", "0x1", "LLC_REFERENCES.STREAMING_PARTIAL", null, "Streaming stores (partial cache line). Derived from unc_c_tor_inserts.opcode", null));
		eventMap.put("LLC_REFERENCES.PCIE_READ", new PMUEvent(null, "0x35", "0,1,2,3", "0x1", "LLC_REFERENCES.PCIE_READ", null, "PCIe read current. Derived from unc_c_tor_inserts.opcode", null));
		eventMap.put("LLC_REFERENCES.PCIE_WRITE", new PMUEvent(null, "0x35", "0,1,2,3", "0x1", "LLC_REFERENCES.PCIE_WRITE", null, "PCIe write references (full cache line). Derived from unc_c_tor_inserts.opcode", null));
		eventMap.put("UNC_C_TOR_OCCUPANCY.LLC_DATA_READ", new PMUEvent(null, "0x36", null, "0x3", "UNC_C_TOR_OCCUPANCY.LLC_DATA_READ", null, "Occupancy counter for LLC data reads (demand and L2 prefetch). Derived from unc_c_tor_occupancy.miss_opcode", null));
		eventMap.put("UNC_H_REQUESTS.READS", new PMUEvent(null, "0x1", "0,1,2,3", "0x3", "UNC_H_REQUESTS.READS", null, "read requests to home agent", null));
		eventMap.put("UNC_H_REQUESTS.READS_LOCAL", new PMUEvent(null, "0x1", "0,1,2,3", "0x1", "UNC_H_REQUESTS.READS_LOCAL", null, "read requests to local home agent", null));
		eventMap.put("UNC_H_REQUESTS.READS_REMOTE", new PMUEvent(null, "0x1", "0,1,2,3", "0x2", "UNC_H_REQUESTS.READS_REMOTE", null, "read requests to remote home agent", null));
		eventMap.put("UNC_H_REQUESTS.WRITES", new PMUEvent(null, "0x1", "0,1,2,3", "0xC", "UNC_H_REQUESTS.WRITES", null, "write requests to home agent", null));
		eventMap.put("UNC_H_REQUESTS.WRITES_LOCAL", new PMUEvent(null, "0x1", "0,1,2,3", "0x4", "UNC_H_REQUESTS.WRITES_LOCAL", null, "write requests to local home agent", null));
		eventMap.put("UNC_H_REQUESTS.WRITES_REMOTE", new PMUEvent(null, "0x1", "0,1,2,3", "0x8", "UNC_H_REQUESTS.WRITES_REMOTE", null, "write requests to remote home agent", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSPCNFLCT", new PMUEvent(null, "0x21", "0,1,2,3", "0x40", "UNC_H_SNOOP_RESP.RSPCNFLCT", null, "Conflict requests (requests for same address from multiple agents simultaneously)", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSP_FWD_WB", new PMUEvent(null, "0x21", "0,1,2,3", "0x20", "UNC_H_SNOOP_RESP.RSP_FWD_WB", null, "M line forwarded from remote cache along with writeback to memory", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSPIFWD", new PMUEvent(null, "0x21", "0,1,2,3", "0x4", "UNC_H_SNOOP_RESP.RSPIFWD", null, "M line forwarded from remote cache with no writeback to memory", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSPS", new PMUEvent(null, "0x21", "0,1,2,3", "0x2", "UNC_H_SNOOP_RESP.RSPS", null, "Shared line response from remote cache", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSPSFWD", new PMUEvent(null, "0x21", "0,1,2,3", "0x8", "UNC_H_SNOOP_RESP.RSPSFWD", null, "Shared line forwarded from remote cache", null));
		eventMap.put("LLC_MISSES.MEM_READ", new PMUEvent(null, "0x4", "0,1,2,3", "0x3", "LLC_MISSES.MEM_READ", null, "read requests to memory controller. Derived from unc_m_cas_count.rd", null));
		eventMap.put("LLC_MISSES.MEM_WRITE", new PMUEvent(null, "0x4", "0,1,2,3", "0xC", "LLC_MISSES.MEM_WRITE", null, "write requests to memory controller. Derived from unc_m_cas_count.wr", null));
		eventMap.put("UNC_M_DCLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_M_DCLOCKTICKS", null, "Memory controller clock ticks", null));
		eventMap.put("UNC_M_POWER_CHANNEL_PPD", new PMUEvent(null, "0x85", "0,1,2,3", null, "UNC_M_POWER_CHANNEL_PPD", null, "Cycles where DRAM ranks are in power down (CKE) mode", null));
		eventMap.put("UNC_M_POWER_CRITICAL_THROTTLE_CYCLES", new PMUEvent(null, "0x86", "0,1,2,3", null, "UNC_M_POWER_CRITICAL_THROTTLE_CYCLES", null, "Cycles all ranks are in critical thermal throttle", null));
		eventMap.put("UNC_M_POWER_SELF_REFRESH", new PMUEvent(null, "0x43", "0,1,2,3", null, "UNC_M_POWER_SELF_REFRESH", null, "Cycles Memory is in self refresh power mode", null));
		eventMap.put("UNC_M_PRE_COUNT.PAGE_MISS", new PMUEvent(null, "0x2", "0,1,2,3", "0x1", "UNC_M_PRE_COUNT.PAGE_MISS", null, "Pre-charges due to page misses", null));
		eventMap.put("UNC_M_PRE_COUNT.RD", new PMUEvent(null, "0x2", "0,1,2,3", "0x4", "UNC_M_PRE_COUNT.RD", null, "Pre-charge for reads", null));
		eventMap.put("UNC_M_PRE_COUNT.WR", new PMUEvent(null, "0x2", "0,1,2,3", "0x8", "UNC_M_PRE_COUNT.WR", null, "Pre-charge for writes", null));
		eventMap.put("UNC_P_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_P_CLOCKTICKS", null, "PCU clock ticks. Use to get percentages of PCU cycles events", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C0", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C0", null, "This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C3", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C3", null, "This is an occupancy event that tracks the number of cores that are in C3.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C6", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C6", null, "This is an occupancy event that tracks the number of cores that are in C6.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events ", null));
		eventMap.put("UNC_P_PROCHOT_EXTERNAL_CYCLES", new PMUEvent(null, "0xA", "0,1,2,3", null, "UNC_P_PROCHOT_EXTERNAL_CYCLES", null, "Counts the number of cycles that we are in external PROCHOT mode.  This mode is triggered when a sensor off the die determines that something off-die (like DRAM) is too hot and must throttle to avoid damaging the chip", null));
		eventMap.put("UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES", new PMUEvent(null, "0x4", "0,1,2,3", null, "UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES", null, "Counts the number of cycles when temperature is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_OS_CYCLES", new PMUEvent(null, "0x6", "0,1,2,3", null, "UNC_P_FREQ_MAX_OS_CYCLES", null, "Counts the number of cycles when the OS is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_POWER_CYCLES", new PMUEvent(null, "0x5", "0,1,2,3", null, "UNC_P_FREQ_MAX_POWER_CYCLES", null, "Counts the number of cycles when power is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_TRANS_CYCLES", new PMUEvent(null, "0x74", "0,1,2,3", null, "UNC_P_FREQ_TRANS_CYCLES", null, "Counts the number of cycles when current is the upper limit on frequency", null));
		eventMap.put("DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("This event counts load misses in all DTLB levels that cause page walks of any page size (4K/2M/4M/1G).", "0x08", "0,1,2,3", "0x1", "DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", "100003", "Load misses in all DTLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_4K", new PMUEvent("This event counts load misses in all DTLB levels that cause a completed page walk (4K page size). The page walk can end with or without a fault.", "0x08", "0,1,2,3", "0x2", "DTLB_LOAD_MISSES.WALK_COMPLETED_4K", "2000003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (4K).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("This event counts load misses in all DTLB levels that cause a completed page walk (2M and 4M page sizes). The page walk can end with or without a fault.", "0x08", "0,1,2,3", "0x4", "DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M", "2000003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (2M/4M).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_1G", new PMUEvent("This event counts load misses in all DTLB levels that cause a completed page walk (1G  page size). The page walk can end with or without a fault.", "0x08", "0,1,2,3", "0x8", "DTLB_LOAD_MISSES.WALK_COMPLETED_1G", "2000003", "Load miss in all TLB levels causes a page walk that completes. (1G)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x08", "0,1,2,3", "0xe", "DTLB_LOAD_MISSES.WALK_COMPLETED", "100003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_DURATION", new PMUEvent("This event counts the number of cycles while PMH is busy with the page walk.", "0x08", "0,1,2,3", "0x10", "DTLB_LOAD_MISSES.WALK_DURATION", "2000003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT_4K", new PMUEvent(null, "0x08", "0,1,2,3", "0x20", "DTLB_LOAD_MISSES.STLB_HIT_4K", "2000003", "Load misses that miss the  DTLB and hit the STLB (4K).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT_2M", new PMUEvent(null, "0x08", "0,1,2,3", "0x40", "DTLB_LOAD_MISSES.STLB_HIT_2M", "2000003", "Load misses that miss the  DTLB and hit the STLB (2M).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT", new PMUEvent(null, "0x08", "0,1,2,3", "0x60", "DTLB_LOAD_MISSES.STLB_HIT", "2000003", "Load operations that miss the first DTLB level but hit the second and do not cause page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("This event counts store misses in all DTLB levels that cause page walks of any page size (4K/2M/4M/1G).", "0x49", "0,1,2,3", "0x1", "DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", "100003", "Store misses in all DTLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_4K", new PMUEvent("This event counts store misses in all DTLB levels that cause a completed page walk (4K page size). The page walk can end with or without a fault.", "0x49", "0,1,2,3", "0x2", "DTLB_STORE_MISSES.WALK_COMPLETED_4K", "100003", "Store miss in all TLB levels causes a page walk that completes. (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("This event counts store misses in all DTLB levels that cause a completed page walk (2M and 4M page sizes). The page walk can end with or without a fault.", "0x49", "0,1,2,3", "0x4", "DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M", "100003", "Store misses in all DTLB levels that cause completed page walks (2M/4M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_1G", new PMUEvent("This event counts store misses in all DTLB levels that cause a completed page walk (1G  page size). The page walk can end with or without a fault.", "0x49", "0,1,2,3", "0x8", "DTLB_STORE_MISSES.WALK_COMPLETED_1G", "100003", "Store misses in all DTLB levels that cause completed page walks (1G)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x49", "0,1,2,3", "0xe", "DTLB_STORE_MISSES.WALK_COMPLETED", "100003", "Store misses in all DTLB levels that cause completed page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_DURATION", new PMUEvent("This event counts the number of cycles while PMH is busy with the page walk.", "0x49", "0,1,2,3", "0x10", "DTLB_STORE_MISSES.WALK_DURATION", "100003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT_4K", new PMUEvent(null, "0x49", "0,1,2,3", "0x20", "DTLB_STORE_MISSES.STLB_HIT_4K", "100003", "Store misses that miss the  DTLB and hit the STLB (4K).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT_2M", new PMUEvent(null, "0x49", "0,1,2,3", "0x40", "DTLB_STORE_MISSES.STLB_HIT_2M", "100003", "Store misses that miss the  DTLB and hit the STLB (2M).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT", new PMUEvent(null, "0x49", "0,1,2,3", "0x60", "DTLB_STORE_MISSES.STLB_HIT", "100003", "Store operations that miss the first TLB level but hit the second and do not cause page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("EPT.WALK_CYCLES", new PMUEvent("This event counts cycles for an extended page table walk. The Extended Page directory cache differs from standard TLB caches by the operating system that use it. Virtual machine operating systems use the extended page directory cache, while guest operating systems use the standard TLB caches.", "0x4F", "0,1,2,3", "0x10", "EPT.WALK_CYCLES", "2000003", "Cycle count for an Extended Page table walk.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("This event counts store misses in all DTLB levels that cause page walks of any page size (4K/2M/4M/1G).", "0x85", "0,1,2,3", "0x1", "ITLB_MISSES.MISS_CAUSES_A_WALK", "100003", "Misses at all ITLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_4K", new PMUEvent("This event counts store misses in all DTLB levels that cause a completed page walk (4K page size). The page walk can end with or without a fault.", "0x85", "0,1,2,3", "0x2", "ITLB_MISSES.WALK_COMPLETED_4K", "100003", "Code miss in all TLB levels causes a page walk that completes. (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("This event counts store misses in all DTLB levels that cause a completed page walk (2M and 4M page sizes). The page walk can end with or without a fault.", "0x85", "0,1,2,3", "0x4", "ITLB_MISSES.WALK_COMPLETED_2M_4M", "100003", "Code miss in all TLB levels causes a page walk that completes. (2M/4M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_1G", new PMUEvent("This event counts store misses in all DTLB levels that cause a completed page walk (1G  page size). The page walk can end with or without a fault.", "0x85", "0,1,2,3", "0x8", "ITLB_MISSES.WALK_COMPLETED_1G", "100003", "Store miss in all TLB levels causes a page walk that completes. (1G)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED", new PMUEvent(null, "0x85", "0,1,2,3", "0xe", "ITLB_MISSES.WALK_COMPLETED", "100003", "Misses in all ITLB levels that cause completed page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_DURATION", new PMUEvent("This event counts the number of cycles while PMH is busy with the page walk.", "0x85", "0,1,2,3", "0x10", "ITLB_MISSES.WALK_DURATION", "100003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT_4K", new PMUEvent(null, "0x85", "0,1,2,3", "0x20", "ITLB_MISSES.STLB_HIT_4K", "100003", "Core misses that miss the  DTLB and hit the STLB (4K).", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT_2M", new PMUEvent(null, "0x85", "0,1,2,3", "0x40", "ITLB_MISSES.STLB_HIT_2M", "100003", "Code misses that miss the  DTLB and hit the STLB (2M).", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT", new PMUEvent(null, "0x85", "0,1,2,3", "0x60", "ITLB_MISSES.STLB_HIT", "100003", "Operations that miss the first ITLB level but hit the second and do not cause any page walks.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB.ITLB_FLUSH", new PMUEvent("This event counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).", "0xAE", "0,1,2,3", "0x1", "ITLB.ITLB_FLUSH", "100007", "Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.", "0,1,2,3,4,5,6,7"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_L1", new PMUEvent(null, "0xBC", "0,1,2,3", "0x11", "PAGE_WALKER_LOADS.DTLB_L1", "2000003", "Number of DTLB page walker hits in the L1+FB.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_L2", new PMUEvent(null, "0xBC", "0,1,2,3", "0x12", "PAGE_WALKER_LOADS.DTLB_L2", "2000003", "Number of DTLB page walker hits in the L2.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_L3", new PMUEvent(null, "0xBC", "0,1,2,3", "0x14", "PAGE_WALKER_LOADS.DTLB_L3", "2000003", "Number of DTLB page walker hits in the L3 + XSNP.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_MEMORY", new PMUEvent(null, "0xBC", "0,1,2,3", "0x18", "PAGE_WALKER_LOADS.DTLB_MEMORY", "2000003", "Number of DTLB page walker hits in Memory.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.ITLB_L1", new PMUEvent(null, "0xBC", "0,1,2,3", "0x21", "PAGE_WALKER_LOADS.ITLB_L1", "2000003", "Number of ITLB page walker hits in the L1+FB.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.ITLB_L2", new PMUEvent(null, "0xBC", "0,1,2,3", "0x22", "PAGE_WALKER_LOADS.ITLB_L2", "2000003", "Number of ITLB page walker hits in the L2.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.ITLB_L3", new PMUEvent(null, "0xBC", "0,1,2,3", "0x24", "PAGE_WALKER_LOADS.ITLB_L3", "2000003", "Number of ITLB page walker hits in the L3 + XSNP.", "0,1,2,3"));
		eventMap.put("TLB_FLUSH.DTLB_THREAD", new PMUEvent("This event counts the number of DTLB flush attempts of the thread-specific entries.", "0xBD", "0,1,2,3", "0x1", "TLB_FLUSH.DTLB_THREAD", "100007", "DTLB flush attempts of the thread-specific entries", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.STLB_ANY", new PMUEvent("This event counts the number of any STLB flush attempts (such as entire, VPID, PCID, InvPage, CR3 write, and so on).", "0xBD", "0,1,2,3", "0x20", "TLB_FLUSH.STLB_ANY", "100007", "STLB flush attempts", "0,1,2,3,4,5,6,7"));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}