/*
 * Copyright 2019 Jean-Philippe Bempel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Goldmont implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Goldmont());
    }

    {
		eventMap.put("LONGEST_LAT_CACHE.MISS", new PMUEvent("Counts memory requests originating from the core that miss in the L2 cache.", "0x2E", "0,1,2,3", "0x41", "LONGEST_LAT_CACHE.MISS", "200003", "L2 cache request misses", null));
		eventMap.put("LONGEST_LAT_CACHE.REFERENCE", new PMUEvent("Counts memory requests originating from the core that reference a cache line in the L2 cache.", "0x2E", "0,1,2,3", "0x4f", "LONGEST_LAT_CACHE.REFERENCE", "200003", "L2 cache requests", null));
		eventMap.put("L2_REJECT_XQ.ALL", new PMUEvent("Counts the number of demand and prefetch transactions that the L2 XQ rejects due to a full or near full condition which likely indicates back pressure from the intra-die interconnect (IDI) fabric. The XQ may reject transactions from the L2Q (non-cacheable requests), L2 misses and L2 write-back victims.", "0x30", "0,1,2,3", "0x0", "L2_REJECT_XQ.ALL", "200003", "Requests rejected by the XQ", null));
		eventMap.put("CORE_REJECT_L2Q.ALL", new PMUEvent("Counts the number of demand and L1 prefetcher requests rejected by the L2Q due to a full or nearly full condition which likely indicates back pressure from L2Q. It also counts requests that would have gone directly to the XQ, but are rejected due to a full or nearly full condition, indicating back pressure from the IDI link. The L2Q may also reject transactions from a core to ensure fairness between cores, or to delay a core's dirty eviction when the address conflicts with incoming external snoops.", "0x31", "0,1,2,3", "0x0", "CORE_REJECT_L2Q.ALL", "200003", "Requests rejected by the L2Q", null));
		eventMap.put("DL1.DIRTY_EVICTION", new PMUEvent("Counts when a modified (dirty) cache line is evicted from the data L1 cache and needs to be written back to memory.  No count will occur if the evicted line is clean, and hence does not require a writeback.", "0x51", "0,1,2,3", "0x1", "DL1.DIRTY_EVICTION", "200003", "L1 Cache evictions for dirty data", null));
		eventMap.put("FETCH_STALL.ICACHE_FILL_PENDING_CYCLES", new PMUEvent("Counts cycles that fetch is stalled due to an outstanding ICache miss. That is, the decoder queue is able to accept bytes, but the fetch unit is unable to provide bytes due to an ICache miss.  Note: this event is not the same as the total number of cycles spent retrieving instruction cache lines from the memory hierarchy.", "0x86", "0,1,2,3", "0x2", "FETCH_STALL.ICACHE_FILL_PENDING_CYCLES", "200003", "Cycles code-fetch stalled due to an outstanding ICache miss.", null));
		eventMap.put("OFFCORE_RESPONSE", new PMUEvent(null, "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE", "100007", "Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", null));
		eventMap.put("MEM_UOPS_RETIRED.LOCK_LOADS", new PMUEvent("Counts locked memory uops retired.  This includes regular locks and bus locks. (To specifically count bus locks only, see the Offcore response event.)  A locked access is one with a lock prefix, or an exchange to memory.  See the SDM for a complete description of which memory load accesses are locks.", "0xD0", "0,1,2,3", "0x21", "MEM_UOPS_RETIRED.LOCK_LOADS", "200003", "Locked load uops retired (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_LOADS", new PMUEvent("Counts load uops retired where the data requested spans a 64 byte cache line boundary.", "0xD0", "0,1,2,3", "0x41", "MEM_UOPS_RETIRED.SPLIT_LOADS", "200003", "Load uops retired that split a cache-line (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_STORES", new PMUEvent("Counts store uops retired where the data requested spans a 64 byte cache line boundary.", "0xD0", "0,1,2,3", "0x42", "MEM_UOPS_RETIRED.SPLIT_STORES", "200003", "Stores uops retired that split a cache-line (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT", new PMUEvent("Counts memory uops retired where the data requested spans a 64 byte cache line boundary.", "0xD0", "0,1,2,3", "0x43", "MEM_UOPS_RETIRED.SPLIT", "200003", "Memory uops retired that split a cache-line (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.ALL_LOADS", new PMUEvent("Counts the number of load uops retired.", "0xD0", "0,1,2,3", "0x81", "MEM_UOPS_RETIRED.ALL_LOADS", "200003", "Load uops retired (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.ALL_STORES", new PMUEvent("Counts the number of store uops retired.", "0xD0", "0,1,2,3", "0x82", "MEM_UOPS_RETIRED.ALL_STORES", "200003", "Store uops retired (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.ALL", new PMUEvent("Counts the number of memory uops retired that is either a loads or a store or both.", "0xD0", "0,1,2,3", "0x83", "MEM_UOPS_RETIRED.ALL", "200003", "Memory uops retired (Precise event capable)", null));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_HIT", new PMUEvent("Counts load uops retired that hit the L1 data cache.", "0xD1", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_RETIRED.L1_HIT", "200003", "Load uops retired that hit L1 data cache (Precise event capable)", null));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_HIT", new PMUEvent("Counts load uops retired that hit in the L2 cache.", "0xD1", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_RETIRED.L2_HIT", "200003", "Load uops retired that hit L2 (Precise event capable)", null));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_MISS", new PMUEvent("Counts load uops retired that miss the L1 data cache.", "0xD1", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_RETIRED.L1_MISS", "200003", "Load uops retired that missed L1 data cache (Precise event capable)", null));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_MISS", new PMUEvent("Counts load uops retired that miss in the L2 cache.", "0xD1", "0,1,2,3", "0x10", "MEM_LOAD_UOPS_RETIRED.L2_MISS", "200003", "Load uops retired that missed L2 (Precise event capable)", null));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.HITM", new PMUEvent("Counts load uops retired where the cache line containing the data was in the modified state of another core or modules cache (HITM).  More specifically, this means that when the load address was checked by other caching agents (typically another processor) in the system, one of those caching agents indicated that they had a dirty copy of the data.  Loads that obtain a HITM response incur greater latency than most is typical for a load.  In addition, since HITM indicates that some other processor had this data in its cache, it implies that the data was shared between processors, or potentially was a lock or semaphore value.  This event is useful for locating sharing, false sharing, and contended locks.", "0xD1", "0,1,2,3", "0x20", "MEM_LOAD_UOPS_RETIRED.HITM", "200003", "Memory uop retired where cross core or cross module HITM occurred (Precise event capable)", null));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.WCB_HIT", new PMUEvent("Counts memory load uops retired where the data is retrieved from the WCB (or fill buffer), indicating that the load found its data while that data was in the process of being brought into the L1 cache.  Typically a load will receive this indication when some other load or prefetch missed the L1 cache and was in the process of retrieving the cache line containing the data, but that process had not yet finished (and written the data back to the cache). For example, consider load X and Y, both referencing the same cache line that is not in the L1 cache.  If load X misses cache first, it obtains and WCB (or fill buffer) and begins the process of requesting the data.  When load Y requests the data, it will either hit the WCB, or the L1 cache, depending on exactly what time the request to Y occurs.", "0xD1", "0,1,2,3", "0x40", "MEM_LOAD_UOPS_RETIRED.WCB_HIT", "200003", "Loads retired that hit WCB (Precise event capable)", null));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.DRAM_HIT", new PMUEvent("Counts memory load uops retired where the data is retrieved from DRAM.  Event is counted at retirement, so the speculative loads are ignored.  A memory load can hit (or miss) the L1 cache, hit (or miss) the L2 cache, hit DRAM, hit in the WCB or receive a HITM response.", "0xD1", "0,1,2,3", "0x80", "MEM_LOAD_UOPS_RETIRED.DRAM_HIT", "200003", "Loads retired that came from DRAM (Precise event capable)", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.OUTSTANDING", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.OUTSTANDING", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_MISS.ANY", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_MISS.ANY", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_MISS.HITM_OTHER_CORE", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_HIT", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_HIT", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.ANY_RESPONSE", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.ANY_RESPONSE", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.OUTSTANDING", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.OUTSTANDING", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_MISS.ANY", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_MISS.ANY", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_MISS.HITM_OTHER_CORE", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_HIT", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_HIT", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.ANY_RESPONSE", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.ANY_RESPONSE", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.OUTSTANDING", new PMUEvent("Counts data reads (demand & prefetch) that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.OUTSTANDING", "100007", "Counts data reads (demand & prefetch) that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.ANY", new PMUEvent("Counts data reads (demand & prefetch) that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.ANY", "100007", "Counts data reads (demand & prefetch) that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts data reads (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.HITM_OTHER_CORE", "100007", "Counts data reads (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts data reads (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts data reads (demand & prefetch) that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts data reads (demand & prefetch) that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts data reads (demand & prefetch) that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT", new PMUEvent("Counts data reads (demand & prefetch) that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_HIT", "100007", "Counts data reads (demand & prefetch) that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts data reads (demand & prefetch) that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.ANY_RESPONSE", "100007", "Counts data reads (demand & prefetch) that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.OUTSTANDING", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.OUTSTANDING", "100007", "Counts data reads generated by L1 or L2 prefetchers that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.ANY", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.ANY", "100007", "Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.HITM_OTHER_CORE", "100007", "Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts data reads generated by L1 or L2 prefetchers that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_HIT", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_HIT", "100007", "Counts data reads generated by L1 or L2 prefetchers that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.ANY_RESPONSE", "100007", "Counts data reads generated by L1 or L2 prefetchers that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.OUTSTANDING", new PMUEvent("Counts requests to the uncore subsystem that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.OUTSTANDING", "100007", "Counts requests to the uncore subsystem that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.ANY", new PMUEvent("Counts requests to the uncore subsystem that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.ANY", "100007", "Counts requests to the uncore subsystem that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts requests to the uncore subsystem that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.HITM_OTHER_CORE", "100007", "Counts requests to the uncore subsystem that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts requests to the uncore subsystem that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts requests to the uncore subsystem that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts requests to the uncore subsystem that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts requests to the uncore subsystem that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT", new PMUEvent("Counts requests to the uncore subsystem that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_HIT", "100007", "Counts requests to the uncore subsystem that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.ANY_RESPONSE", new PMUEvent("Counts requests to the uncore subsystem that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.ANY_RESPONSE", "100007", "Counts requests to the uncore subsystem that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.OUTSTANDING", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.OUTSTANDING", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.ANY", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.ANY", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.HITM_OTHER_CORE", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.L2_HIT", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.L2_HIT", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.OUTSTANDING", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.OUTSTANDING", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.ANY", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.ANY", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.HITM_OTHER_CORE", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_HIT", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_HIT", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.ANY_RESPONSE", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.ANY_RESPONSE", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.OUTSTANDING", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.OUTSTANDING", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.ANY", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.ANY", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.HITM_OTHER_CORE", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_HIT", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.ANY_RESPONSE", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.OUTSTANDING", new PMUEvent("Counts data cache lines requests by software prefetch instructions that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.OUTSTANDING", "100007", "Counts data cache lines requests by software prefetch instructions that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.ANY", new PMUEvent("Counts data cache lines requests by software prefetch instructions that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.ANY", "100007", "Counts data cache lines requests by software prefetch instructions that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts data cache lines requests by software prefetch instructions that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.HITM_OTHER_CORE", "100007", "Counts data cache lines requests by software prefetch instructions that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts data cache lines requests by software prefetch instructions that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts data cache lines requests by software prefetch instructions that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts data cache lines requests by software prefetch instructions that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts data cache lines requests by software prefetch instructions that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.L2_HIT", new PMUEvent("Counts data cache lines requests by software prefetch instructions that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.L2_HIT", "100007", "Counts data cache lines requests by software prefetch instructions that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.ANY_RESPONSE", new PMUEvent("Counts data cache lines requests by software prefetch instructions that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.ANY_RESPONSE", "100007", "Counts data cache lines requests by software prefetch instructions that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.OUTSTANDING", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.OUTSTANDING", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.ANY", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.ANY", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.HITM_OTHER_CORE", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_HIT", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_HIT", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.ANY_RESPONSE", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.ANY_RESPONSE", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.OUTSTANDING", new PMUEvent("Counts bus lock and split lock requests that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.OUTSTANDING", "100007", "Counts bus lock and split lock requests that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.ANY", new PMUEvent("Counts bus lock and split lock requests that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.ANY", "100007", "Counts bus lock and split lock requests that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts bus lock and split lock requests that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.HITM_OTHER_CORE", "100007", "Counts bus lock and split lock requests that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts bus lock and split lock requests that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts bus lock and split lock requests that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts bus lock and split lock requests that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts bus lock and split lock requests that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT", new PMUEvent("Counts bus lock and split lock requests that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_HIT", "100007", "Counts bus lock and split lock requests that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.ANY_RESPONSE", new PMUEvent("Counts bus lock and split lock requests that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.ANY_RESPONSE", "100007", "Counts bus lock and split lock requests that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.OUTSTANDING", new PMUEvent("Counts code reads in uncacheable (UC) memory region that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.OUTSTANDING", "100007", "Counts code reads in uncacheable (UC) memory region that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.ANY", new PMUEvent("Counts code reads in uncacheable (UC) memory region that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.ANY", "100007", "Counts code reads in uncacheable (UC) memory region that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts code reads in uncacheable (UC) memory region that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.HITM_OTHER_CORE", "100007", "Counts code reads in uncacheable (UC) memory region that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts code reads in uncacheable (UC) memory region that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts code reads in uncacheable (UC) memory region that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts code reads in uncacheable (UC) memory region that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts code reads in uncacheable (UC) memory region that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.L2_HIT", new PMUEvent("Counts code reads in uncacheable (UC) memory region that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.L2_HIT", "100007", "Counts code reads in uncacheable (UC) memory region that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.ANY_RESPONSE", new PMUEvent("Counts code reads in uncacheable (UC) memory region that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.ANY_RESPONSE", "100007", "Counts code reads in uncacheable (UC) memory region that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.OUTSTANDING", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.OUTSTANDING", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.ANY", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.ANY", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.HITM_OTHER_CORE", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_HIT", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.ANY_RESPONSE", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.ANY_RESPONSE", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.OUTSTANDING", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.OUTSTANDING", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.ANY", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.ANY", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.HITM_OTHER_CORE", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_HIT", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.ANY_RESPONSE", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.ANY_RESPONSE", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.OUTSTANDING", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.OUTSTANDING", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.ANY", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.ANY", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.HITM_OTHER_CORE", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_HIT", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.ANY_RESPONSE", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.ANY_RESPONSE", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.OUTSTANDING", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.OUTSTANDING", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.ANY", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.ANY", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.HITM_OTHER_CORE", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_HIT", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_HIT", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.ANY_RESPONSE", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.OUTSTANDING", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.OUTSTANDING", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.L2_MISS.ANY", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.L2_MISS.ANY", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.L2_MISS.HITM_OTHER_CORE", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.L2_HIT", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.L2_HIT", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.OUTSTANDING", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.OUTSTANDING", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.ANY", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.ANY", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.HITM_OTHER_CORE", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_HIT", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.ANY_RESPONSE", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.OUTSTANDING", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.OUTSTANDING", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.ANY", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.ANY", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.HITM_OTHER_CORE", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_HIT", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.ANY_RESPONSE", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.OUTSTANDING", new PMUEvent("Counts demand cacheable data reads of full cache lines that are outstanding, per cycle, from the time of the L2 miss to when any response is received. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.OUTSTANDING", "100007", "Counts demand cacheable data reads of full cache lines that are outstanding, per cycle, from the time of the L2 miss to when any response is received.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.ANY", new PMUEvent("Counts demand cacheable data reads of full cache lines that miss the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.ANY", "100007", "Counts demand cacheable data reads of full cache lines that miss the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.HITM_OTHER_CORE", new PMUEvent("Counts demand cacheable data reads of full cache lines that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.HITM_OTHER_CORE", "100007", "Counts demand cacheable data reads of full cache lines that miss the L2 cache with a snoop hit in the other processor module, data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts demand cacheable data reads of full cache lines that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.HIT_OTHER_CORE_NO_FWD", "100007", "Counts demand cacheable data reads of full cache lines that miss the L2 cache with a snoop hit in the other processor module, no data forwarding is required.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", new PMUEvent("Counts demand cacheable data reads of full cache lines that true miss for the L2 cache with a snoop miss in the other processor module.  Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED", "100007", "Counts demand cacheable data reads of full cache lines that true miss for the L2 cache with a snoop miss in the other processor module. ", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT", new PMUEvent("Counts demand cacheable data reads of full cache lines that hit the L2 cache. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_HIT", "100007", "Counts demand cacheable data reads of full cache lines that hit the L2 cache.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", new PMUEvent("Counts demand cacheable data reads of full cache lines that have any transaction responses from the uncore subsystem. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.ANY_RESPONSE", "100007", "Counts demand cacheable data reads of full cache lines that have any transaction responses from the uncore subsystem.", null));
		eventMap.put("ICACHE.HIT", new PMUEvent("Counts requests to the Instruction Cache (ICache) for one or more bytes in an ICache Line and that cache line is in the ICache (hit).  The event strives to count on a cache line basis, so that multiple accesses which hit in a single cache line count as one ICACHE.HIT.  Specifically, the event counts when straight line code crosses the cache line boundary, or when a branch target is to a new line, and that cache line is in the ICache. This event counts differently than Intel processors based on Silvermont microarchitecture.", "0x80", "0,1,2,3", "0x1", "ICACHE.HIT", "200003", "References per ICache line that are available in the ICache (hit). This event counts differently than Intel processors based on Silvermont microarchitecture", null));
		eventMap.put("ICACHE.MISSES", new PMUEvent("Counts requests to the Instruction Cache (ICache)  for one or more bytes in an ICache Line and that cache line is not in the ICache (miss).  The event strives to count on a cache line basis, so that multiple accesses which miss in a single cache line count as one ICACHE.MISS.  Specifically, the event counts when straight line code crosses the cache line boundary, or when a branch target is to a new line, and that cache line is not in the ICache. This event counts differently than Intel processors based on Silvermont microarchitecture.", "0x80", "0,1,2,3", "0x2", "ICACHE.MISSES", "200003", "References per ICache line that are not available in the ICache (miss). This event counts differently than Intel processors based on Silvermont microarchitecture", null));
		eventMap.put("ICACHE.ACCESSES", new PMUEvent("Counts requests to the Instruction Cache (ICache) for one or more bytes in an ICache Line.  The event strives to count on a cache line basis, so that multiple fetches to a single cache line count as one ICACHE.ACCESS.  Specifically, the event counts when accesses from straight line code crosses the cache line boundary, or when a branch target is to a new line.This event counts differently than Intel processors based on Silvermont microarchitecture.", "0x80", "0,1,2,3", "0x3", "ICACHE.ACCESSES", "200003", "References per ICache line. This event counts differently than Intel processors based on Silvermont microarchitecture", null));
		eventMap.put("MS_DECODED.MS_ENTRY", new PMUEvent("Counts the number of times the Microcode Sequencer (MS) starts a flow of uops from the MSROM. It does not count every time a uop is read from the MSROM.  The most common case that this counts is when a micro-coded instruction is encountered by the front end of the machine.  Other cases include when an instruction encounters a fault, trap, or microcode assist of any sort that initiates a flow of uops.  The event will count MS startups for uops that are speculative, and subsequently cleared by branch mispredict or a machine clear.", "0xE7", "0,1,2,3", "0x1", "MS_DECODED.MS_ENTRY", "200003", "MS decode starts", null));
		eventMap.put("DECODE_RESTRICTION.PREDECODE_WRONG", new PMUEvent("Counts the number of times the prediction (from the predecode cache) for instruction length is incorrect.", "0xE9", "0,1,2,3", "0x1", "DECODE_RESTRICTION.PREDECODE_WRONG", "200003", "Decode restrictions due to predicting wrong instruction length", null));
		eventMap.put("MISALIGN_MEM_REF.LOAD_PAGE_SPLIT", new PMUEvent("Counts when a memory load of a uop spans a page boundary (a split) is retired.", "0x13", "0,1,2,3", "0x2", "MISALIGN_MEM_REF.LOAD_PAGE_SPLIT", "200003", "Load uops that split a page (Precise event capable)", null));
		eventMap.put("MISALIGN_MEM_REF.STORE_PAGE_SPLIT", new PMUEvent("Counts when a memory store of a uop spans a page boundary (a split) is retired.", "0x13", "0,1,2,3", "0x4", "MISALIGN_MEM_REF.STORE_PAGE_SPLIT", "200003", "Store uops that split a page (Precise event capable)", null));
		eventMap.put("MACHINE_CLEARS.MEMORY_ORDERING", new PMUEvent("Counts machine clears due to memory ordering issues.  This occurs when a snoop request happens and the machine is uncertain if memory ordering will be preserved as another core is in the process of modifying the data.", "0xC3", "0,1,2,3", "0x2", "MACHINE_CLEARS.MEMORY_ORDERING", "200003", "Machine clears due to memory ordering issue", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_READ.L2_MISS.NON_DRAM", new PMUEvent("Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_READ.L2_MISS.NON_DRAM", "100007", "Counts data read, code read, and read for ownership (RFO) requests (demand & prefetch) that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_RFO.L2_MISS.NON_DRAM", new PMUEvent("Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_RFO.L2_MISS.NON_DRAM", "100007", "Counts reads for ownership (RFO) requests (demand & prefetch) that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.NON_DRAM", new PMUEvent("Counts data reads (demand & prefetch) that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_DATA_RD.L2_MISS.NON_DRAM", "100007", "Counts data reads (demand & prefetch) that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.NON_DRAM", new PMUEvent("Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_PF_DATA_RD.L2_MISS.NON_DRAM", "100007", "Counts data reads generated by L1 or L2 prefetchers that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.NON_DRAM", new PMUEvent("Counts requests to the uncore subsystem that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ANY_REQUEST.L2_MISS.NON_DRAM", "100007", "Counts requests to the uncore subsystem that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.NON_DRAM", new PMUEvent("Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.L2_MISS.NON_DRAM", "100007", "Counts any data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.NON_DRAM", new PMUEvent("Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_STREAMING_STORES.L2_MISS.NON_DRAM", "100007", "Counts partial cache line data writes to uncacheable write combining (USWC) memory region  that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.NON_DRAM", new PMUEvent("Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L1_DATA_RD.L2_MISS.NON_DRAM", "100007", "Counts data cache line reads generated by hardware L1 data cache prefetcher that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.NON_DRAM", new PMUEvent("Counts data cache lines requests by software prefetch instructions that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SW_PREFETCH.L2_MISS.NON_DRAM", "100007", "Counts data cache lines requests by software prefetch instructions that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.NON_DRAM", new PMUEvent("Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.FULL_STREAMING_STORES.L2_MISS.NON_DRAM", "100007", "Counts full cache line data writes to uncacheable write combining (USWC) memory region and full cache-line non-temporal writes that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.NON_DRAM", new PMUEvent("Counts bus lock and split lock requests that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.BUS_LOCKS.L2_MISS.NON_DRAM", "100007", "Counts bus lock and split lock requests that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.NON_DRAM", new PMUEvent("Counts code reads in uncacheable (UC) memory region that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.UC_CODE_RD.L2_MISS.NON_DRAM", "100007", "Counts code reads in uncacheable (UC) memory region that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.NON_DRAM", new PMUEvent("Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_WRITES.L2_MISS.NON_DRAM", "100007", "Counts the number of demand write requests (RFO) generated by a write to partial data cache line, including the writes to uncacheable (UC) and write through (WT), and write protected (WP) types of memory that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.NON_DRAM", new PMUEvent("Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PARTIAL_READS.L2_MISS.NON_DRAM", "100007", "Counts demand data partial reads, including data in uncacheable (UC) or uncacheable write combining (USWC) memory types that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.NON_DRAM", new PMUEvent("Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L2_MISS.NON_DRAM", "100007", "Counts reads for ownership (RFO) requests generated by L2 prefetcher that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.NON_DRAM", new PMUEvent("Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L2_MISS.NON_DRAM", "100007", "Counts data cacheline reads generated by hardware L2 cache prefetcher that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.COREWB.L2_MISS.NON_DRAM", new PMUEvent("Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.L2_MISS.NON_DRAM", "100007", "Counts the number of writeback transactions caused by L1 or L2 cache evictions that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.NON_DRAM", new PMUEvent("Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L2_MISS.NON_DRAM", "100007", "Counts demand instruction cacheline and I-side prefetch requests that miss the instruction cache that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.NON_DRAM", new PMUEvent("Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L2_MISS.NON_DRAM", "100007", "Counts demand reads for ownership (RFO) requests generated by a write to full data cache line that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.NON_DRAM", new PMUEvent("Counts demand cacheable data reads of full cache lines that miss the L2 cache and targets non-DRAM system address. Requires MSR_OFFCORE_RESP[0,1] to specify request type and response. (duplicated for both MSRs)", "0xB7", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L2_MISS.NON_DRAM", "100007", "Counts demand cacheable data reads of full cache lines that miss the L2 cache and targets non-DRAM system address.", null));
		eventMap.put("FETCH_STALL.ALL", new PMUEvent("Counts cycles that fetch is stalled due to any reason. That is, the decoder queue is able to accept bytes, but the fetch unit is unable to provide bytes.  This will include cycles due to an ITLB miss, ICache miss and other events.", "0x86", "0,1,2,3", "0x0", "FETCH_STALL.ALL", "200003", "Cycles code-fetch stalled due to any reason.", null));
		eventMap.put("FETCH_STALL.ITLB_FILL_PENDING_CYCLES", new PMUEvent("Counts cycles that fetch is stalled due to an outstanding ITLB miss. That is, the decoder queue is able to accept bytes, but the fetch unit is unable to provide bytes due to an ITLB miss.  Note: this event is not the same as page walk cycles to retrieve an instruction translation.", "0x86", "0,1,2,3", "0x1", "FETCH_STALL.ITLB_FILL_PENDING_CYCLES", "200003", "Cycles code-fetch stalled due to an outstanding ITLB miss.", null));
		eventMap.put("ISSUE_SLOTS_NOT_CONSUMED.ANY", new PMUEvent("Counts the number of issue slots per core cycle that were not consumed by the backend due to either a full resource  in the backend (RESOURCE_FULL) or due to the processor recovering from some event (RECOVERY).", "0xCA", "0,1,2,3", "0x0", "ISSUE_SLOTS_NOT_CONSUMED.ANY", "200003", "Unfilled issue slots per cycle", null));
		eventMap.put("ISSUE_SLOTS_NOT_CONSUMED.RESOURCE_FULL", new PMUEvent("Counts the number of issue slots per core cycle that were not consumed because of a full resource in the backend.  Including but not limited to resources such as the Re-order Buffer (ROB), reservation stations (RS), load/store buffers, physical registers, or any other needed machine resource that is currently unavailable.   Note that uops must be available for consumption in order for this event to fire.  If a uop is not available (Instruction Queue is empty), this event will not count.", "0xCA", "0,1,2,3", "0x1", "ISSUE_SLOTS_NOT_CONSUMED.RESOURCE_FULL", "200003", "Unfilled issue slots per cycle because of a full resource in the backend", null));
		eventMap.put("ISSUE_SLOTS_NOT_CONSUMED.RECOVERY", new PMUEvent("Counts the number of issue slots per core cycle that were not consumed by the backend because allocation is stalled waiting for a mispredicted jump to retire or other branch-like conditions (e.g. the event is relevant during certain microcode flows).   Counts all issue slots blocked while within this window including slots where uops were not available in the Instruction Queue.", "0xCA", "0,1,2,3", "0x2", "ISSUE_SLOTS_NOT_CONSUMED.RECOVERY", "200003", "Unfilled issue slots per cycle to recover", null));
		eventMap.put("HW_INTERRUPTS.RECEIVED", new PMUEvent("Counts hardware interrupts received by the processor.", "0xCB", "0,1,2,3", "0x1", "HW_INTERRUPTS.RECEIVED", "203", "Hardware interrupts received", null));
		eventMap.put("HW_INTERRUPTS.MASKED", new PMUEvent("Counts the number of core cycles during which interrupts are masked (disabled). Increments by 1 each core cycle that EFLAGS.IF is 0, regardless of whether interrupts are pending or not.", "0xCB", "0,1,2,3", "0x2", "HW_INTERRUPTS.MASKED", "200003", "Cycles hardware interrupts are masked", null));
		eventMap.put("HW_INTERRUPTS.PENDING_AND_MASKED", new PMUEvent("Counts core cycles during which there are pending interrupts, but interrupts are masked (EFLAGS.IF = 0).", "0xCB", "0,1,2,3", "0x4", "HW_INTERRUPTS.PENDING_AND_MASKED", "200003", "Cycles pending interrupts are masked", null));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent("Counts the number of instructions that retire execution. For instructions that consist of multiple uops, this event counts the retirement of the last uop of the instruction. The counter continues counting during hardware interrupts, traps, and inside interrupt handlers.  This event uses fixed counter 0.  You cannot collect a PEBs record for this event.", "0x00", "Fixed counter 0", "0x1", "INST_RETIRED.ANY", "2000003", "Instructions retired (Fixed event)", null));
		eventMap.put("CPU_CLK_UNHALTED.CORE", new PMUEvent("Counts the number of core cycles while the core is not in a halt state.  The core enters the halt state when it is running the HLT instruction. In mobile systems the core frequency may change from time to time. For this reason this event may have a changing ratio with regards to time.  This event uses fixed counter 1.  You cannot collect a PEBs record for this event.", "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.CORE", "2000003", "Core cycles when core is not halted  (Fixed event)", null));
		eventMap.put("CPU_CLK_UNHALTED.REF_TSC", new PMUEvent("Counts the number of reference cycles that the core is not in a halt state. The core enters the halt state when it is running the HLT instruction.  In mobile systems the core frequency may change from time.  This event is not affected by core frequency changes but counts as if the core is running at the maximum frequency all the time.  This event uses fixed counter 2.  You cannot collect a PEBs record for this event.", "0x00", "Fixed counter 2", "0x3", "CPU_CLK_UNHALTED.REF_TSC", "2000003", "Reference cycles when core is not halted  (Fixed event)", null));
		eventMap.put("LD_BLOCKS.DATA_UNKNOWN", new PMUEvent("Counts a load blocked from using a store forward, but did not occur because the store data was not available at the right time.  The forward might occur subsequently when the data is available.", "0x03", "0,1,2,3", "0x1", "LD_BLOCKS.DATA_UNKNOWN", "200003", "Loads blocked due to store data not ready (Precise event capable)", null));
		eventMap.put("LD_BLOCKS.STORE_FORWARD", new PMUEvent("Counts a load blocked from using a store forward because of an address/size mismatch, only one of the loads blocked from each store will be counted.", "0x03", "0,1,2,3", "0x2", "LD_BLOCKS.STORE_FORWARD", "200003", "Loads blocked due to store forward restriction (Precise event capable)", null));
		eventMap.put("LD_BLOCKS.4K_ALIAS", new PMUEvent("Counts loads that block because their address modulo 4K matches a pending store.", "0x03", "0,1,2,3", "0x4", "LD_BLOCKS.4K_ALIAS", "200003", "Loads blocked because address has 4k partial address false dependence (Precise event capable)", null));
		eventMap.put("LD_BLOCKS.UTLB_MISS", new PMUEvent("Counts loads blocked because they are unable to find their physical address in the micro TLB (UTLB).", "0x03", "0,1,2,3", "0x8", "LD_BLOCKS.UTLB_MISS", "200003", "Loads blocked because address in not in the UTLB (Precise event capable)", null));
		eventMap.put("LD_BLOCKS.ALL_BLOCK", new PMUEvent("Counts anytime a load that retires is blocked for any reason.", "0x03", "0,1,2,3", "0x10", "LD_BLOCKS.ALL_BLOCK", "200003", "Loads blocked (Precise event capable)", null));
		eventMap.put("UOPS_ISSUED.ANY", new PMUEvent("Counts uops issued by the front end and allocated into the back end of the machine.  This event counts uops that retire as well as uops that were speculatively executed but didn't retire. The sort of speculative uops that might be counted includes, but is not limited to those uops issued in the shadow of a miss-predicted branch, those uops that are inserted during an assist (such as for a denormal floating point result), and (previously allocated) uops that might be canceled during a machine clear.", "0x0E", "0,1,2,3", "0x0", "UOPS_ISSUED.ANY", "200003", "Uops issued to the back end per cycle", null));
		eventMap.put("CPU_CLK_UNHALTED.CORE_P", new PMUEvent("Core cycles when core is not halted.  This event uses a (_P)rogrammable general purpose performance counter.", "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.CORE_P", "2000003", "Core cycles when core is not halted", null));
		eventMap.put("CPU_CLK_UNHALTED.REF", new PMUEvent("Reference cycles when core is not halted.  This event uses a programmable general purpose performance counter.", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF", "2000003", "Reference cycles when core is not halted", null));
		eventMap.put("UOPS_NOT_DELIVERED.ANY", new PMUEvent("This event used to measure front-end inefficiencies. I.e. when front-end of the machine is not delivering uops to the back-end and the back-end has is not stalled. This event can be used to identify if the machine is truly front-end bound.  When this event occurs, it is an indication that the front-end of the machine is operating at less than its theoretical peak performance. Background: We can think of the processor pipeline as being divided into 2 broader parts: Front-end and Back-end. Front-end is responsible for fetching the instruction, decoding into uops in machine understandable format and putting them into a uop queue to be consumed by back end. The back-end then takes these uops, allocates the required resources.  When all resources are ready, uops are executed. If the back-end is not ready to accept uops from the front-end, then we do not want to count these as front-end bottlenecks.  However, whenever we have bottlenecks in the back-end, we will have allocation unit stalls and eventually forcing the front-end to wait until the back-end is ready to receive more uops. This event counts only when back-end is requesting more uops and front-end is not able to provide them. When 3 uops are requested and no uops are delivered, the event counts 3. When 3 are requested, and only 1 is delivered, the event counts 2. When only 2 are delivered, the event counts 1. Alternatively stated, the event will not count if 3 uops are delivered, or if the back end is stalled and not requesting any uops at all.  Counts indicate missed opportunities for the front-end to deliver a uop to the back end. Some examples of conditions that cause front-end efficiencies are: ICache misses, ITLB misses, and decoder restrictions that limit the front-end bandwidth. Known Issues: Some uops require multiple allocation slots.  These uops will not be charged as a front end 'not delivered' opportunity, and will be regarded as a back end problem. For example, the INC instruction has one uop that requires 2 issue slots.  A stream of INC instructions will not count as UOPS_NOT_DELIVERED, even though only one instruction can be issued per clock.  The low uop issue rate for a stream of INC instructions is considered to be a back end issue.", "0x9C", "0,1,2,3", "0x0", "UOPS_NOT_DELIVERED.ANY", "200003", "Uops requested but not-delivered to the back-end per cycle", null));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent("Counts the number of instructions that retire execution. For instructions that consist of multiple uops, this event counts the retirement of the last uop of the instruction. The event continues counting during hardware interrupts, traps, and inside interrupt handlers.  This is an architectural performance event.  This event uses a (_P)rogrammable general purpose performance counter. *This event is Precise Event capable:  The EventingRIP field in the PEBS record is precise to the address of the instruction which caused the event.  Note: Because PEBS records can be collected only on IA32_PMC0, only one event can use the PEBS facility at a time.", "0xC0", "0,1,2,3", "0x0", "INST_RETIRED.ANY_P", "2000003", "Instructions retired (Precise event capable)", null));
		eventMap.put("UOPS_RETIRED.ANY", new PMUEvent("Counts uops which retired.", "0xC2", "0,1,2,3", "0x0", "UOPS_RETIRED.ANY", "2000003", "Uops retired (Precise event capable)", null));
		eventMap.put("UOPS_RETIRED.MS", new PMUEvent("Counts uops retired that are from the complex flows issued by the micro-sequencer (MS).  Counts both the uops from a micro-coded instruction, and the uops that might be generated from a micro-coded assist.", "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.MS", "2000003", "MS uops retired (Precise event capable)", null));
		eventMap.put("UOPS_RETIRED.FPDIV", new PMUEvent("Counts the number of floating point divide uops retired.", "0xC2", "0,1,2,3", "0x8", "UOPS_RETIRED.FPDIV", "2000003", "Floating point divide uops retired. (Precise Event Capable)", null));
		eventMap.put("UOPS_RETIRED.IDIV", new PMUEvent("Counts the number of integer divide uops retired.", "0xC2", "0,1,2,3", "0x10", "UOPS_RETIRED.IDIV", "2000003", "Integer divide uops retired. (Precise Event Capable)", null));
		eventMap.put("MACHINE_CLEARS.ALL", new PMUEvent("Counts machine clears for any reason.", "0xC3", "0,1,2,3", "0x0", "MACHINE_CLEARS.ALL", "200003", "All machine clears", null));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent("Counts the number of times that the processor detects that a program is writing to a code section and has to perform a machine clear because of that modification.  Self-modifying code (SMC) causes a severe penalty in all Intel architecture processors.", "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.SMC", "200003", "Self-Modifying Code detected", null));
		eventMap.put("MACHINE_CLEARS.FP_ASSIST", new PMUEvent("Counts machine clears due to floating point (FP) operations needing assists.  For instance, if the result was a floating point denormal, the hardware clears the pipeline and reissues uops to produce the correct IEEE compliant denormal result.", "0xC3", "0,1,2,3", "0x4", "MACHINE_CLEARS.FP_ASSIST", "200003", "Machine clears due to FP assists", null));
		eventMap.put("MACHINE_CLEARS.DISAMBIGUATION", new PMUEvent("Counts machine clears due to memory disambiguation.  Memory disambiguation happens when a load which has been issued conflicts with a previous unretired store in the pipeline whose address was not known at issue time, but is later resolved to be the same as the load address.", "0xC3", "0,1,2,3", "0x8", "MACHINE_CLEARS.DISAMBIGUATION", "200003", "Machine clears due to memory disambiguation", null));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent("Counts branch instructions retired for all branch types.  This is an architectural performance event.", "0xC4", "0,1,2,3", "0x0", "BR_INST_RETIRED.ALL_BRANCHES", "200003", "Retired branch instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.JCC", new PMUEvent("Counts retired Jcc (Jump on Conditional Code/Jump if Condition is Met) branch instructions retired, including both when the branch was taken and when it was not taken.", "0xC4", "0,1,2,3", "0x7e", "BR_INST_RETIRED.JCC", "200003", "Retired conditional branch instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.ALL_TAKEN_BRANCHES", new PMUEvent("Counts the number of taken branch instructions retired.", "0xC4", "0,1,2,3", "0x80", "BR_INST_RETIRED.ALL_TAKEN_BRANCHES", "200003", "Retired taken branch instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.FAR_BRANCH", new PMUEvent("Counts far branch instructions retired.  This includes far jump, far call and return, and Interrupt call and return.", "0xC4", "0,1,2,3", "0xbf", "BR_INST_RETIRED.FAR_BRANCH", "200003", "Retired far branch instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.NON_RETURN_IND", new PMUEvent("Counts near indirect call or near indirect jmp branch instructions retired.", "0xC4", "0,1,2,3", "0xeb", "BR_INST_RETIRED.NON_RETURN_IND", "200003", "Retired instructions of near indirect Jmp or call (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.RETURN", new PMUEvent("Counts near return branch instructions retired.", "0xC4", "0,1,2,3", "0xf7", "BR_INST_RETIRED.RETURN", "200003", "Retired near return instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.CALL", new PMUEvent("Counts near CALL branch instructions retired.", "0xC4", "0,1,2,3", "0xf9", "BR_INST_RETIRED.CALL", "200003", "Retired near call instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.IND_CALL", new PMUEvent("Counts near indirect CALL branch instructions retired.", "0xC4", "0,1,2,3", "0xfb", "BR_INST_RETIRED.IND_CALL", "200003", "Retired near indirect call instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.REL_CALL", new PMUEvent("Counts near relative CALL branch instructions retired.", "0xC4", "0,1,2,3", "0xfd", "BR_INST_RETIRED.REL_CALL", "200003", "Retired near relative call instructions (Precise event capable)", null));
		eventMap.put("BR_INST_RETIRED.TAKEN_JCC", new PMUEvent("Counts Jcc (Jump on Conditional Code/Jump if Condition is Met) branch instructions retired that were taken and does not count when the Jcc branch instruction were not taken.", "0xC4", "0,1,2,3", "0xfe", "BR_INST_RETIRED.TAKEN_JCC", "200003", "Retired conditional branch instructions that were taken (Precise event capable)", null));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent("Counts mispredicted branch instructions retired including all branch types.", "0xC5", "0,1,2,3", "0x0", "BR_MISP_RETIRED.ALL_BRANCHES", "200003", "Retired mispredicted branch instructions (Precise event capable)", null));
		eventMap.put("BR_MISP_RETIRED.JCC", new PMUEvent("Counts mispredicted retired Jcc (Jump on Conditional Code/Jump if Condition is Met) branch instructions retired, including both when the branch was supposed to be taken and when it was not supposed to be taken (but the processor predicted the opposite condition).", "0xC5", "0,1,2,3", "0x7e", "BR_MISP_RETIRED.JCC", "200003", "Retired mispredicted conditional branch instructions (Precise event capable)", null));
		eventMap.put("BR_MISP_RETIRED.NON_RETURN_IND", new PMUEvent("Counts mispredicted branch instructions retired that were near indirect call or near indirect jmp, where the target address taken was not what the processor predicted.", "0xC5", "0,1,2,3", "0xeb", "BR_MISP_RETIRED.NON_RETURN_IND", "200003", "Retired mispredicted instructions of near indirect Jmp or near indirect call. (Precise event capable)", null));
		eventMap.put("BR_MISP_RETIRED.RETURN", new PMUEvent("Counts mispredicted near RET branch instructions retired, where the return address taken was not what the processor predicted.", "0xC5", "0,1,2,3", "0xf7", "BR_MISP_RETIRED.RETURN", "200003", "Retired mispredicted near return instructions (Precise event capable)", null));
		eventMap.put("BR_MISP_RETIRED.IND_CALL", new PMUEvent("Counts mispredicted near indirect CALL branch instructions retired, where the target address taken was not what the processor predicted.", "0xC5", "0,1,2,3", "0xfb", "BR_MISP_RETIRED.IND_CALL", "200003", "Retired mispredicted near indirect call instructions (Precise event capable)", null));
		eventMap.put("BR_MISP_RETIRED.TAKEN_JCC", new PMUEvent("Counts mispredicted retired Jcc (Jump on Conditional Code/Jump if Condition is Met) branch instructions retired that were supposed to be taken but the processor predicted that it would not be taken.", "0xC5", "0,1,2,3", "0xfe", "BR_MISP_RETIRED.TAKEN_JCC", "200003", "Retired mispredicted conditional branch instructions that were taken (Precise event capable)", null));
		eventMap.put("CYCLES_DIV_BUSY.ALL", new PMUEvent("Counts core cycles if either divide unit is busy.", "0xCD", "0,1,2,3", "0x0", "CYCLES_DIV_BUSY.ALL", "2000003", "Cycles a divider is busy", null));
		eventMap.put("CYCLES_DIV_BUSY.IDIV", new PMUEvent("Counts core cycles the integer divide unit is busy.", "0xCD", "0,1,2,3", "0x1", "CYCLES_DIV_BUSY.IDIV", "200003", "Cycles the integer divide unit is busy", null));
		eventMap.put("CYCLES_DIV_BUSY.FPDIV", new PMUEvent("Counts core cycles the floating point divide unit is busy.", "0xCD", "0,1,2,3", "0x2", "CYCLES_DIV_BUSY.FPDIV", "200003", "Cycles the FP divide unit is busy", null));
		eventMap.put("BACLEARS.ALL", new PMUEvent("Counts the number of times a BACLEAR is signaled for any reason, including, but not limited to indirect branch/call,  Jcc (Jump on Conditional Code/Jump if Condition is Met) branch, unconditional branch/call, and returns.", "0xE6", "0,1,2,3", "0x1", "BACLEARS.ALL", "200003", "BACLEARs asserted for any branch type", null));
		eventMap.put("BACLEARS.RETURN", new PMUEvent("Counts BACLEARS on return instructions.", "0xE6", "0,1,2,3", "0x8", "BACLEARS.RETURN", "200003", "BACLEARs asserted for return branch", null));
		eventMap.put("BACLEARS.COND", new PMUEvent("Counts BACLEARS on Jcc (Jump on Conditional Code/Jump if Condition is Met) branches.", "0xE6", "0,1,2,3", "0x10", "BACLEARS.COND", "200003", "BACLEARs asserted for conditional branch", null));
		eventMap.put("PAGE_WALKS.D_SIDE_CYCLES", new PMUEvent("Counts every core cycle when a Data-side (walks due to a data operation) page walk is in progress.", "0x05", "0,1,2,3", "0x1", "PAGE_WALKS.D_SIDE_CYCLES", "200003", "Duration of D-side page-walks in cycles", null));
		eventMap.put("PAGE_WALKS.I_SIDE_CYCLES", new PMUEvent("Counts every core cycle when a Instruction-side (walks due to an instruction fetch) page walk is in progress.", "0x05", "0,1,2,3", "0x2", "PAGE_WALKS.I_SIDE_CYCLES", "200003", "Duration of I-side pagewalks in cycles", null));
		eventMap.put("PAGE_WALKS.CYCLES", new PMUEvent("Counts every core cycle a page-walk is in progress due to either a data memory operation or an instruction fetch.", "0x05", "0,1,2,3", "0x3", "PAGE_WALKS.CYCLES", "200003", "Duration of page-walks in cycles", null));
		eventMap.put("ITLB.MISS", new PMUEvent("Counts the number of times the machine was unable to find a translation in the Instruction Translation Lookaside Buffer (ITLB) for a linear address of an instruction fetch.  It counts when new translation are filled into the ITLB.  The event is speculative in nature, but will not count translations (page walks) that are begun and not finished, or translations that are finished but not filled into the ITLB.", "0x81", "0,1,2,3", "0x4", "ITLB.MISS", "200003", "ITLB misses", null));
		eventMap.put("MEM_UOPS_RETIRED.DTLB_MISS_LOADS", new PMUEvent("Counts load uops retired that caused a DTLB miss.", "0xD0", "0,1,2,3", "0x11", "MEM_UOPS_RETIRED.DTLB_MISS_LOADS", "200003", "Load uops retired that missed the DTLB (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.DTLB_MISS_STORES", new PMUEvent("Counts store uops retired that caused a DTLB miss.", "0xD0", "0,1,2,3", "0x12", "MEM_UOPS_RETIRED.DTLB_MISS_STORES", "200003", "Store uops retired that missed the DTLB (Precise event capable)", null));
		eventMap.put("MEM_UOPS_RETIRED.DTLB_MISS", new PMUEvent("Counts uops retired that had a DTLB miss on load, store or either.  Note that when two distinct memory operations to the same page miss the DTLB, only one of them will be recorded as a DTLB miss.", "0xD0", "0,1,2,3", "0x13", "MEM_UOPS_RETIRED.DTLB_MISS", "200003", "Memory uops retired that missed the DTLB (Precise event capable)", null));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}