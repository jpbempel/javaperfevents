package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Haswell implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Haswell());
    }

    {
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_MISS", new PMUEvent("Demand data read requests that missed L2, no rejects.", "0x24", "0,1,2,3", "0x21", "L2_RQSTS.DEMAND_DATA_RD_MISS", "200003", "Demand Data Read miss L2, no rejects", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_MISS", new PMUEvent("Counts the number of store RFO requests that miss the L2 cache.", "0x24", "0,1,2,3", "0x22", "L2_RQSTS.RFO_MISS", "200003", "RFO requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_MISS", new PMUEvent("Number of instruction fetches that missed the L2 cache.", "0x24", "0,1,2,3", "0x24", "L2_RQSTS.CODE_RD_MISS", "200003", "L2 cache misses when fetching instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_MISS", new PMUEvent("Demand requests that miss L2 cache.", "0x24", "0,1,2,3", "0x27", "L2_RQSTS.ALL_DEMAND_MISS", "200003", "Demand requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.L2_PF_MISS", new PMUEvent("Counts all L2 HW prefetcher requests that missed L2.", "0x24", "0,1,2,3", "0x30", "L2_RQSTS.L2_PF_MISS", "200003", "L2 prefetch requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.MISS", new PMUEvent("All requests that missed L2.", "0x24", "0,1,2,3", "0x3f", "L2_RQSTS.MISS", "200003", "All requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_HIT", new PMUEvent("Demand data read requests that hit L2 cache.", "0x24", "0,1,2,3", "0x41", "L2_RQSTS.DEMAND_DATA_RD_HIT", "200003", "Demand Data Read requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_HIT", new PMUEvent("Counts the number of store RFO requests that hit the L2 cache.", "0x24", "0,1,2,3", "0x42", "L2_RQSTS.RFO_HIT", "200003", "RFO requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_HIT", new PMUEvent("Number of instruction fetches that hit the L2 cache.", "0x24", "0,1,2,3", "0x44", "L2_RQSTS.CODE_RD_HIT", "200003", "L2 cache hits when fetching instructions, code reads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.L2_PF_HIT", new PMUEvent("Counts all L2 HW prefetcher requests that hit L2.", "0x24", "0,1,2,3", "0x50", "L2_RQSTS.L2_PF_HIT", "200003", "L2 prefetch requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_DATA_RD", new PMUEvent("Counts any demand and L1 HW prefetch data load requests to L2.", "0x24", "0,1,2,3", "0xe1", "L2_RQSTS.ALL_DEMAND_DATA_RD", "200003", "Demand Data Read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_RFO", new PMUEvent("Counts all L2 store RFO requests.", "0x24", "0,1,2,3", "0xe2", "L2_RQSTS.ALL_RFO", "200003", "RFO requests to L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_CODE_RD", new PMUEvent("Counts all L2 code requests.", "0x24", "0,1,2,3", "0xe4", "L2_RQSTS.ALL_CODE_RD", "200003", "L2 code requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_REFERENCES", new PMUEvent("Demand requests to L2 cache.", "0x24", "0,1,2,3", "0xe7", "L2_RQSTS.ALL_DEMAND_REFERENCES", "200003", "Demand requests to L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_PF", new PMUEvent("Counts all L2 HW prefetcher requests.", "0x24", "0,1,2,3", "0xf8", "L2_RQSTS.ALL_PF", "200003", "Requests from L2 hardware prefetchers", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.REFERENCES", new PMUEvent("All requests to L2 cache.", "0x24", "0,1,2,3", "0xff", "L2_RQSTS.REFERENCES", "200003", "All L2 requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_DEMAND_RQSTS.WB_HIT", new PMUEvent("Not rejected writebacks that hit L2 cache.", "0x27", "0,1,2,3", "0x50", "L2_DEMAND_RQSTS.WB_HIT", "200003", "Not rejected writebacks that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.MISS", new PMUEvent("This event counts each cache miss condition for references to the last level cache.", "0x2E", "0,1,2,3", "0x41", "LONGEST_LAT_CACHE.MISS", "100003", "Core-originated cacheable demand requests missed L3", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.REFERENCE", new PMUEvent("This event counts requests originating from the core that reference a cache line in the last level cache.", "0x2E", "0,1,2,3", "0x4f", "LONGEST_LAT_CACHE.REFERENCE", "100003", "Core-originated cacheable demand requests that refer to L3", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING", new PMUEvent("Increments the number of outstanding L1D misses every cycle. Set Cmask = 1 and Edge =1 to count occurrences.", "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING", "2000003", "L1D miss oustandings duration in cycles", "2"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES", new PMUEvent(null, "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES", "2000003", "Cycles with L1D load Misses outstanding.", "2"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES_ANY", new PMUEvent(null, "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES_ANY", "2000003", "Cycles with L1D load Misses outstanding from any thread on physical core.", "2"));
		eventMap.put("L1D_PEND_MISS.REQUEST_FB_FULL", new PMUEvent(null, "0x48", "0,1,2,3", "0x2", "L1D_PEND_MISS.REQUEST_FB_FULL", "2000003", "Number of times a request needed a FB entry but there was no entry available for it. That is the FB unavailability was dominant reason for blocking the request. A request includes cacheable/uncacheable demands that is load, store or SW prefetch. HWP are e.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.FB_FULL", new PMUEvent(null, "0x48", "0,1,2,3", "0x2", "L1D_PEND_MISS.FB_FULL", "2000003", "Cycles a demand request was blocked due to Fill Buffers inavailability.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D.REPLACEMENT", new PMUEvent("This event counts when new data lines are brought into the L1 Data cache, which cause other lines to be evicted from the cache.", "0x51", "0,1,2,3", "0x1", "L1D.REPLACEMENT", "2000003", "L1D data line replacements", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", new PMUEvent("Offcore outstanding demand data read transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", "2000003", "Offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", "2000003", "Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", new PMUEvent(null, "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", "2000003", "Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", new PMUEvent("Offcore outstanding Demand code Read transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x2", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", "2000003", "Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", new PMUEvent("Offcore outstanding RFO store transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", "2000003", "Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", new PMUEvent(null, "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", "2000003", "Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", new PMUEvent("Offcore outstanding cacheable data read transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", "2000003", "Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", new PMUEvent(null, "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", "2000003", "Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOCK_CYCLES.CACHE_LOCK_DURATION", new PMUEvent("Cycles in which the L1D is locked.", "0x63", "0,1,2,3", "0x2", "LOCK_CYCLES.CACHE_LOCK_DURATION", "2000003", "Cycles when L1D is locked", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_DATA_RD", new PMUEvent("Demand data read requests sent to uncore.", "0xB0", "0,1,2,3", "0x1", "OFFCORE_REQUESTS.DEMAND_DATA_RD", "100003", "Demand Data Read requests sent to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_CODE_RD", new PMUEvent("Demand code read requests sent to uncore.", "0xB0", "0,1,2,3", "0x2", "OFFCORE_REQUESTS.DEMAND_CODE_RD", "100003", "Cacheable and noncachaeble code read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_RFO", new PMUEvent("Demand RFO read requests sent to uncore, including regular RFOs, locks, ItoM.", "0xB0", "0,1,2,3", "0x4", "OFFCORE_REQUESTS.DEMAND_RFO", "100003", "Demand RFO requests including regular RFOs, locks, ItoM", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.ALL_DATA_RD", new PMUEvent("Data read requests sent to uncore (demand and prefetch).", "0xB0", "0,1,2,3", "0x8", "OFFCORE_REQUESTS.ALL_DATA_RD", "100003", "Demand and prefetch data reads", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_BUFFER.SQ_FULL", new PMUEvent(null, "0xb2", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_BUFFER.SQ_FULL", "2000003", "Offcore requests buffer cannot take more entries for this thread core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE", "100003", "Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x11", "MEM_UOPS_RETIRED.STLB_MISS_LOADS", "100003", "Retired load uops that miss the STLB. (precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_STORES", new PMUEvent(null, "0xD0", "0,1,2,3", "0x12", "MEM_UOPS_RETIRED.STLB_MISS_STORES", "100003", "Retired store uops that miss the STLB. (precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.LOCK_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x21", "MEM_UOPS_RETIRED.LOCK_LOADS", "100003", "Retired load uops with locked access. (precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_LOADS", new PMUEvent("This event counts load uops retired which had memory addresses spilt across 2 cache lines. A line split is across 64B cache-lines which may include a page split (4K). This is a precise event.", "0xD0", "0,1,2,3", "0x41", "MEM_UOPS_RETIRED.SPLIT_LOADS", "100003", "Retired load uops that split across a cacheline boundary. (precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_STORES", new PMUEvent("This event counts store uops retired which had memory addresses spilt across 2 cache lines. A line split is across 64B cache-lines which may include a page split (4K). This is a precise event.", "0xD0", "0,1,2,3", "0x42", "MEM_UOPS_RETIRED.SPLIT_STORES", "100003", "Retired store uops that split across a cacheline boundary. (precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x81", "MEM_UOPS_RETIRED.ALL_LOADS", "2000003", "All retired load uops. (precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_STORES", new PMUEvent("This event counts all store uops retired. This is a precise event.", "0xD0", "0,1,2,3", "0x82", "MEM_UOPS_RETIRED.ALL_STORES", "2000003", "All retired store uops. (precise Event)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_HIT", new PMUEvent(null, "0xD1", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_RETIRED.L1_HIT", "2000003", "Retired load uops with L1 cache hits as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_HIT", new PMUEvent(null, "0xD1", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_RETIRED.L2_HIT", "100003", "Retired load uops with L2 cache hits as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L3_HIT", new PMUEvent("This event counts retired load uops in which data sources were data hits in the L3 cache without snoops required. This does not include hardware prefetches. This is a precise event.", "0xD1", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_RETIRED.L3_HIT", "50021", "Miss in last-level (L3) cache. Excludes Unknown data-source.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_MISS", new PMUEvent("This event counts retired load uops in which data sources missed in the L1 cache. This does not include hardware prefetches. This is a precise event.", "0xD1", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_RETIRED.L1_MISS", "100003", "Retired load uops misses in L1 cache as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_MISS", new PMUEvent(null, "0xD1", "0,1,2,3", "0x10", "MEM_LOAD_UOPS_RETIRED.L2_MISS", "50021", "Retired load uops with L2 cache misses as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L3_MISS", new PMUEvent(null, "0xD1", "0,1,2,3", "0x20", "MEM_LOAD_UOPS_RETIRED.L3_MISS", "100003", "Miss in last-level (L3) cache. Excludes Unknown data-source.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.HIT_LFB", new PMUEvent(null, "0xD1", "0,1,2,3", "0x40", "MEM_LOAD_UOPS_RETIRED.HIT_LFB", "100003", "Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS", new PMUEvent(null, "0xD2", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS", "20011", "Retired load uops which data sources were L3 hit and cross-core snoop missed in on-pkg core cache.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT", new PMUEvent("This event counts retired load uops that hit in the L3 cache, but required a cross-core snoop which resulted in a HIT in an on-pkg core cache. This does not include hardware prefetches. This is a precise event.", "0xD2", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT", "20011", "Retired load uops which data sources were L3 and cross-core snoop hits in on-pkg core cache. ", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM", new PMUEvent("This event counts retired load uops that hit in the L3 cache, but required a cross-core snoop which resulted in a HITM (hit modified) in an on-pkg core cache. This does not include hardware prefetches. This is a precise event.", "0xD2", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM", "20011", "Retired load uops which data sources were HitM responses from shared L3. ", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_NONE", new PMUEvent(null, "0xD2", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_NONE", "100003", "Retired load uops which data sources were hits in L3 without snoops required.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM", new PMUEvent("This event counts retired load uops where the data came from local DRAM. This does not include hardware prefetches. This is a precise event.", "0xD3", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM", "100003", null, "0,1,2,3"));
		eventMap.put("L2_TRANS.DEMAND_DATA_RD", new PMUEvent("Demand data read requests that access L2 cache.", "0xf0", "0,1,2,3", "0x1", "L2_TRANS.DEMAND_DATA_RD", "200003", "Demand Data Read requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.RFO", new PMUEvent("RFO requests that access L2 cache.", "0xf0", "0,1,2,3", "0x2", "L2_TRANS.RFO", "200003", "RFO requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.CODE_RD", new PMUEvent("L2 cache accesses when fetching instructions.", "0xf0", "0,1,2,3", "0x4", "L2_TRANS.CODE_RD", "200003", "L2 cache accesses when fetching instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_PF", new PMUEvent("Any MLC or L3 HW prefetch accessing L2, including rejects.", "0xf0", "0,1,2,3", "0x8", "L2_TRANS.ALL_PF", "200003", "L2 or L3 HW prefetches that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L1D_WB", new PMUEvent("L1D writebacks that access L2 cache.", "0xf0", "0,1,2,3", "0x10", "L2_TRANS.L1D_WB", "200003", "L1D writebacks that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_FILL", new PMUEvent("L2 fill requests that access L2 cache.", "0xf0", "0,1,2,3", "0x20", "L2_TRANS.L2_FILL", "200003", "L2 fill requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_WB", new PMUEvent("L2 writebacks that access L2 cache.", "0xf0", "0,1,2,3", "0x40", "L2_TRANS.L2_WB", "200003", "L2 writebacks that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_REQUESTS", new PMUEvent("Transactions accessing L2 pipe.", "0xf0", "0,1,2,3", "0x80", "L2_TRANS.ALL_REQUESTS", "200003", "Transactions accessing L2 pipe", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.I", new PMUEvent("L2 cache lines in I state filling L2.", "0xF1", "0,1,2,3", "0x1", "L2_LINES_IN.I", "100003", "L2 cache lines in I state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.S", new PMUEvent("L2 cache lines in S state filling L2.", "0xF1", "0,1,2,3", "0x2", "L2_LINES_IN.S", "100003", "L2 cache lines in S state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.E", new PMUEvent("L2 cache lines in E state filling L2.", "0xF1", "0,1,2,3", "0x4", "L2_LINES_IN.E", "100003", "L2 cache lines in E state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.ALL", new PMUEvent("This event counts the number of L2 cache lines brought into the L2 cache.  Lines are filled into the L2 cache when there was an L2 miss.", "0xF1", "0,1,2,3", "0x7", "L2_LINES_IN.ALL", "100003", "L2 cache lines filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DEMAND_CLEAN", new PMUEvent("Clean L2 cache lines evicted by demand.", "0xF2", "0,1,2,3", "0x5", "L2_LINES_OUT.DEMAND_CLEAN", "100003", "Clean L2 cache lines evicted by demand", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DEMAND_DIRTY", new PMUEvent("Dirty L2 cache lines evicted by demand.", "0xF2", "0,1,2,3", "0x6", "L2_LINES_OUT.DEMAND_DIRTY", "100003", "Dirty L2 cache lines evicted by demand", "0,1,2,3,4,5,6,7"));
		eventMap.put("SQ_MISC.SPLIT_LOCK", new PMUEvent("", "0xf4", "0,1,2,3", "0x10", "SQ_MISC.SPLIT_LOCK", "100003", "Split locks in SQ", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE.ALL_REQUESTS.L3_HIT.ANY_RESPONSE", new PMUEvent("Counts all requests that hit in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_REQUESTS.L3_HIT.ANY_RESPONSE", "100003", "Counts all requests that hit in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all data/code/rfo reads (demand & prefetch) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all data/code/rfo reads (demand & prefetch) that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_CODE_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand & prefetch code reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_CODE_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand & prefetch code reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand & prefetch RFOs that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand & prefetch RFOs that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand & prefetch RFOs that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand & prefetch data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand & prefetch data reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand & prefetch data reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_CODE_RD.L3_HIT.ANY_RESPONSE", new PMUEvent("Counts prefetch (that bring data to LLC only) code reads that hit in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_CODE_RD.L3_HIT.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) code reads that hit in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs  that hit in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) RFOs  that hit in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that hit in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) data reads that hit in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L3_HIT.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) code reads that hit in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L3_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) code reads that hit in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that hit in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to L2) RFOs that hit in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.ANY_RESPONSE", new PMUEvent("Counts prefetch (that bring data to L2) data reads that hit in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_HIT.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand code reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand code reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand code reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HITM_OTHER_CORE", "100003", "Counts all demand data writes (RFOs) that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts all demand data writes (RFOs) that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all demand data writes (RFOs) that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HITM_OTHER_CORE", new PMUEvent("Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HITM_OTHER_CORE", "100003", "Counts demand data reads that hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent("Counts demand data reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts demand data reads that hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OTHER_ASSISTS.AVX_TO_SSE", new PMUEvent(null, "0xC1", "0,1,2,3", "0x8", "OTHER_ASSISTS.AVX_TO_SSE", "100003", "Number of transitions from AVX-256 to legacy SSE when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.SSE_TO_AVX", new PMUEvent(null, "0xC1", "0,1,2,3", "0x10", "OTHER_ASSISTS.SSE_TO_AVX", "100003", "Number of transitions from SSE to AVX-256 when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("AVX_INSTS.ALL", new PMUEvent("Note that a whole rep string only counts AVX_INST.ALL once.", "0xC6", "0,1,2,3", "0x7", "AVX_INSTS.ALL", "2000003", "Approximate counts of AVX & AVX2 256-bit instructions, including non-arithmetic instructions, loads, and stores.  May count non-AVX instructions that employ 256-bit operations, including (but not necessarily limited to) rep string instructions that use 256-bit loads and stores for optimized performance, XSAVE* and XRSTOR*, and operations that transition the x87 FPU data registers between x87 and MMX.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.X87_OUTPUT", new PMUEvent("Number of X87 FP assists due to output values.", "0xCA", "0,1,2,3", "0x2", "FP_ASSIST.X87_OUTPUT", "100003", "Number of X87 assists due to output value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.X87_INPUT", new PMUEvent("Number of X87 FP assists due to input values.", "0xCA", "0,1,2,3", "0x4", "FP_ASSIST.X87_INPUT", "100003", "Number of X87 assists due to input value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_OUTPUT", new PMUEvent("Number of SIMD FP assists due to output values.", "0xCA", "0,1,2,3", "0x8", "FP_ASSIST.SIMD_OUTPUT", "100003", "Number of SIMD FP assists due to Output values", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_INPUT", new PMUEvent("Number of SIMD FP assists due to input values.", "0xCA", "0,1,2,3", "0x10", "FP_ASSIST.SIMD_INPUT", "100003", "Number of SIMD FP assists due to input values", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.ANY", new PMUEvent("Cycles with any input/output SSE* or FP assists.", "0xCA", "0,1,2,3", "0x1e", "FP_ASSIST.ANY", "100003", "Cycles with any input/output SSE or FP assist", "0,1,2,3"));
		eventMap.put("IDQ.EMPTY", new PMUEvent("Counts cycles the IDQ is empty.", "0x79", "0,1,2,3", "0x2", "IDQ.EMPTY", "2000003", "Instruction Decode Queue (IDQ) empty cycles", "0,1,2,3"));
		eventMap.put("IDQ.MITE_UOPS", new PMUEvent("Increment each cycle # of uops delivered to IDQ from MITE path. Set Cmask = 1 to count cycles.", "0x79", "0,1,2,3", "0x4", "IDQ.MITE_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_CYCLES", new PMUEvent(null, "0x79", "0,1,2,3", "0x4", "IDQ.MITE_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_UOPS", new PMUEvent("Increment each cycle. # of uops delivered to IDQ from DSB path. Set Cmask = 1 to count cycles.", "0x79", "0,1,2,3", "0x8", "IDQ.DSB_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_CYCLES", new PMUEvent(null, "0x79", "0,1,2,3", "0x8", "IDQ.DSB_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_UOPS", new PMUEvent("Increment each cycle # of uops delivered to IDQ when MS_busy by DSB. Set Cmask = 1 to count cycles. Add Edge=1 to count # of delivery.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_UOPS", "2000003", "Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_CYCLES", new PMUEvent(null, "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_CYCLES", "2000003", "Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_OCCUR", new PMUEvent(null, "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_OCCUR", "2000003", "Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_4_UOPS", new PMUEvent("Counts cycles DSB is delivered four uops. Set Cmask = 4.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_4_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_ANY_UOPS", new PMUEvent("Counts cycles DSB is delivered at least one uops. Set Cmask = 1.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_ANY_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_MITE_UOPS", new PMUEvent("Increment each cycle # of uops delivered to IDQ when MS_busy by MITE. Set Cmask = 1 to count cycles.", "0x79", "0,1,2,3", "0x20", "IDQ.MS_MITE_UOPS", "2000003", "Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_4_UOPS", new PMUEvent("Counts cycles MITE is delivered four uops. Set Cmask = 4.", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_4_UOPS", "2000003", "Cycles MITE is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_ANY_UOPS", new PMUEvent("Counts cycles MITE is delivered at least one uop. Set Cmask = 1.", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_ANY_UOPS", "2000003", "Cycles MITE is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_UOPS", new PMUEvent("This event counts uops delivered by the Front-end with the assistance of the microcode sequencer.  Microcode assists are used for complex instructions or scenarios that can't be handled by the standard decoder.  Using other instructions, if possible, will usually improve performance.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_CYCLES", new PMUEvent("This event counts cycles during which the microcode sequencer assisted the Front-end in delivering uops.  Microcode assists are used for complex instructions or scenarios that can't be handled by the standard decoder.  Using other instructions, if possible, will usually improve performance.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_SWITCHES", new PMUEvent(null, "0x79", "0,1,2,3", "0x30", "IDQ.MS_SWITCHES", "2000003", "Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_ALL_UOPS", new PMUEvent("Number of uops delivered to IDQ from any path.", "0x79", "0,1,2,3", "0x3c", "IDQ.MITE_ALL_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.HIT", new PMUEvent(null, "0x80", "0,1,2,3", "0x1", "ICACHE.HIT", "2000003", "Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.MISSES", new PMUEvent("This event counts Instruction Cache (ICACHE) misses.", "0x80", "0,1,2,3", "0x2", "ICACHE.MISSES", "200003", "Number of Instruction Cache, Streaming Buffer and Victim Cache Misses. Includes Uncacheable accesses.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.IFETCH_STALL", new PMUEvent(null, "0x80", "0,1,2,3", "0x4", "ICACHE.IFETCH_STALL", "2000003", "Cycles where a code fetch is stalled due to L1 instruction-cache miss.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.IFDATA_STALL", new PMUEvent(null, "0x80", "0,1,2,3", "0x4", "ICACHE.IFDATA_STALL", "2000003", "Cycles where a code fetch is stalled due to L1 instruction-cache miss.", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CORE", new PMUEvent("This event count the number of undelivered (unallocated) uops from the Front-end to the Resource Allocation Table (RAT) while the Back-end of the processor is not stalled. The Front-end can allocate up to 4 uops per cycle so this event can increment 0-4 times per cycle depending on the number of unallocated uops. This event is counted on a per-core basis.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CORE", "2000003", "Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", new PMUEvent("This event counts the number cycles during which the Front-end allocated exactly zero uops to the Resource Allocation Table (RAT) while the Back-end of the processor is not stalled.  This event is counted on a per-core basis.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", "2000003", "Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", "2000003", "Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", "2000003", "Cycles with less than 2 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", "2000003", "Cycles with less than 3 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", "2000003", "Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.", "0,1,2,3"));
		eventMap.put("DSB2MITE_SWITCHES.PENALTY_CYCLES", new PMUEvent(null, "0xAB", "0,1,2,3", "0x2", "DSB2MITE_SWITCHES.PENALTY_CYCLES", "2000003", "Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MISALIGN_MEM_REF.LOADS", new PMUEvent("Speculative cache-line split load uops dispatched to L1D.", "0x05", "0,1,2,3", "0x1", "MISALIGN_MEM_REF.LOADS", "2000003", "Speculative cache line split load uops dispatched to L1 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("MISALIGN_MEM_REF.STORES", new PMUEvent("Speculative cache-line split store-address uops dispatched to L1D.", "0x05", "0,1,2,3", "0x2", "MISALIGN_MEM_REF.STORES", "2000003", "Speculative cache line split STA uops dispatched to L1 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_CONFLICT", new PMUEvent(null, "0x54", "0,1,2,3", "0x1", "TX_MEM.ABORT_CONFLICT", "2000003", "Number of times a transactional abort was signaled due to a data conflict on a transactionally accessed address.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_CAPACITY_WRITE", new PMUEvent(null, "0x54", "0,1,2,3", "0x2", "TX_MEM.ABORT_CAPACITY_WRITE", "2000003", "Number of times a transactional abort was signaled due to a data capacity limitation for transactional writes.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK", new PMUEvent(null, "0x54", "0,1,2,3", "0x4", "TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK", "2000003", "Number of times a HLE transactional region aborted due to a non XRELEASE prefixed instruction writing to an elided lock in the elision buffer.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY", new PMUEvent(null, "0x54", "0,1,2,3", "0x8", "TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY", "2000003", "Number of times an HLE transactional execution aborted due to NoAllocatedElisionBuffer being non-zero.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH", new PMUEvent(null, "0x54", "0,1,2,3", "0x10", "TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH", "2000003", "Number of times an HLE transactional execution aborted due to XRELEASE lock not satisfying the address and value requirements in the elision buffer.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT", new PMUEvent(null, "0x54", "0,1,2,3", "0x20", "TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT", "2000003", "Number of times an HLE transactional execution aborted due to an unsupported read alignment from the elision buffer.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_MEM.HLE_ELISION_BUFFER_FULL", new PMUEvent(null, "0x54", "0,1,2,3", "0x40", "TX_MEM.HLE_ELISION_BUFFER_FULL", "2000003", "Number of times HLE lock could not be elided due to ElisionBufferAvailable being zero.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC1", new PMUEvent(null, "0x5d", "0,1,2,3", "0x1", "TX_EXEC.MISC1", "2000003", "Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC2", new PMUEvent(null, "0x5d", "0,1,2,3", "0x2", "TX_EXEC.MISC2", "2000003", "Counts the number of times a class of instructions (e.g., vzeroupper) that may cause a transactional abort was executed inside a transactional region.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC3", new PMUEvent(null, "0x5d", "0,1,2,3", "0x4", "TX_EXEC.MISC3", "2000003", "Counts the number of times an instruction execution caused the transactional nest count supported to be exceeded.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC4", new PMUEvent(null, "0x5d", "0,1,2,3", "0x8", "TX_EXEC.MISC4", "2000003", "Counts the number of times a XBEGIN instruction was executed inside an HLE transactional region.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TX_EXEC.MISC5", new PMUEvent(null, "0x5d", "0,1,2,3", "0x10", "TX_EXEC.MISC5", "2000003", "Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MEMORY_ORDERING", new PMUEvent("This event counts the number of memory ordering machine clears detected. Memory ordering machine clears can result from memory address aliasing or snoops from another hardware thread or core to data inflight in the pipeline.  Machine clears can have a significant performance impact if they are happening frequently.", "0xC3", "0,1,2,3", "0x2", "MACHINE_CLEARS.MEMORY_ORDERING", "100003", "Counts the number of machine clears due to memory order conflicts.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.START", new PMUEvent(null, "0xC8", "0,1,2,3", "0x1", "HLE_RETIRED.START", "2000003", "Number of times an HLE execution started.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.COMMIT", new PMUEvent(null, "0xc8", "0,1,2,3", "0x2", "HLE_RETIRED.COMMIT", "2000003", "Number of times an HLE execution successfully committed.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED", new PMUEvent(null, "0xc8", "0,1,2,3", "0x4", "HLE_RETIRED.ABORTED", "2000003", "Number of times an HLE execution aborted due to any reasons (multiple categories may count as one).", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC1", new PMUEvent(null, "0xc8", "0,1,2,3", "0x8", "HLE_RETIRED.ABORTED_MISC1", "2000003", "Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts).", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC2", new PMUEvent(null, "0xc8", "0,1,2,3", "0x10", "HLE_RETIRED.ABORTED_MISC2", "2000003", "Number of times an HLE execution aborted due to uncommon conditions.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC3", new PMUEvent(null, "0xc8", "0,1,2,3", "0x20", "HLE_RETIRED.ABORTED_MISC3", "2000003", "Number of times an HLE execution aborted due to HLE-unfriendly instructions.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC4", new PMUEvent(null, "0xc8", "0,1,2,3", "0x40", "HLE_RETIRED.ABORTED_MISC4", "2000003", "Number of times an HLE execution aborted due to incompatible memory type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("HLE_RETIRED.ABORTED_MISC5", new PMUEvent("Number of times an HLE execution aborted due to none of the previous 4 categories (e.g. interrupts).", "0xc8", "0,1,2,3", "0x80", "HLE_RETIRED.ABORTED_MISC5", "2000003", "Number of times an HLE execution aborted due to none of the previous 4 categories (e.g. interrupts)", "0,1,2,3,4,5,6,7"));
		eventMap.put("RTM_RETIRED.START", new PMUEvent(null, "0xC9", "0,1,2,3", "0x1", "RTM_RETIRED.START", "2000003", "Number of times an RTM execution started.", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.COMMIT", new PMUEvent(null, "0xc9", "0,1,2,3", "0x2", "RTM_RETIRED.COMMIT", "2000003", "Number of times an RTM execution successfully committed.", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED", new PMUEvent(null, "0xc9", "0,1,2,3", "0x4", "RTM_RETIRED.ABORTED", "2000003", "Number of times an RTM execution aborted due to any reasons (multiple categories may count as one).", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC1", new PMUEvent("Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts).", "0xc9", "0,1,2,3", "0x8", "RTM_RETIRED.ABORTED_MISC1", "2000003", "Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts)", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC2", new PMUEvent(null, "0xc9", "0,1,2,3", "0x10", "RTM_RETIRED.ABORTED_MISC2", "2000003", "Number of times an RTM execution aborted due to various memory events (e.g., read/write capacity and conflicts).", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC3", new PMUEvent(null, "0xc9", "0,1,2,3", "0x20", "RTM_RETIRED.ABORTED_MISC3", "2000003", "Number of times an RTM execution aborted due to HLE-unfriendly instructions.", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC4", new PMUEvent(null, "0xc9", "0,1,2,3", "0x40", "RTM_RETIRED.ABORTED_MISC4", "2000003", "Number of times an RTM execution aborted due to incompatible memory type.", "0,1,2,3"));
		eventMap.put("RTM_RETIRED.ABORTED_MISC5", new PMUEvent("Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt).", "0xc9", "0,1,2,3", "0x80", "RTM_RETIRED.ABORTED_MISC5", "2000003", "Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt)", "0,1,2,3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", "100003", "Loads with latency value being above 4.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", "50021", "Loads with latency value being above 8.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", "20011", "Loads with latency value being above 16.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", "100003", "Loads with latency value being above 32.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", "2003", "Loads with latency value being above 64.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", "1009", "Loads with latency value being above 128.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", "503", "Loads with latency value being above 256.", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", new PMUEvent(null, "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", "101", "Loads with latency value being above 512.", "3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_REQUESTS.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all requests that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_REQUESTS.L3_MISS.ANY_RESPONSE", "100003", "Counts all requests that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.L3_MISS.LOCAL_DRAM", new PMUEvent("Counts all data/code/rfo reads (demand & prefetch) that miss the L3 and the data is returned from local dram Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.L3_MISS.LOCAL_DRAM", "100003", "Counts all data/code/rfo reads (demand & prefetch) that miss the L3 and the data is returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all data/code/rfo reads (demand & prefetch) that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.L3_MISS.ANY_RESPONSE", "100003", "Counts all data/code/rfo reads (demand & prefetch) that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_CODE_RD.L3_MISS.LOCAL_DRAM", new PMUEvent("Counts all demand & prefetch code reads that miss the L3 and the data is returned from local dram Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_CODE_RD.L3_MISS.LOCAL_DRAM", "100003", "Counts all demand & prefetch code reads that miss the L3 and the data is returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_CODE_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all demand & prefetch code reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_CODE_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts all demand & prefetch code reads that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS.LOCAL_DRAM", new PMUEvent("Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local dram Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS.LOCAL_DRAM", "100003", "Counts all demand & prefetch RFOs that miss the L3 and the data is returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_RFO.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all demand & prefetch RFOs that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_RFO.L3_MISS.ANY_RESPONSE", "100003", "Counts all demand & prefetch RFOs that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.LOCAL_DRAM", new PMUEvent("Counts all demand & prefetch data reads that miss the L3 and the data is returned from local dram Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.LOCAL_DRAM", "100003", "Counts all demand & prefetch data reads that miss the L3 and the data is returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all demand & prefetch data reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts all demand & prefetch data reads that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_CODE_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts prefetch (that bring data to LLC only) code reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_CODE_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) code reads that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) RFOs  that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_RFO.L3_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) RFOs  that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) data reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L3_DATA_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) data reads that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to LLC only) code reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) code reads that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all prefetch (that bring data to L2) RFOs that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_RFO.L3_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to L2) RFOs that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts prefetch (that bring data to L2) data reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to L2) data reads that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.LOCAL_DRAM", new PMUEvent("Counts all demand code reads that miss the L3 and the data is returned from local dram Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.LOCAL_DRAM", "100003", "Counts all demand code reads that miss the L3 and the data is returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all demand code reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts all demand code reads that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.LOCAL_DRAM", new PMUEvent("Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local dram Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.LOCAL_DRAM", "100003", "Counts all demand data writes (RFOs) that miss the L3 and the data is returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts all demand data writes (RFOs) that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.L3_MISS.ANY_RESPONSE", "100003", "Counts all demand data writes (RFOs) that miss in the L3", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.LOCAL_DRAM", new PMUEvent("Counts demand data reads that miss the L3 and the data is returned from local dram Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.LOCAL_DRAM", "100003", "Counts demand data reads that miss the L3 and the data is returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.ANY_RESPONSE", new PMUEvent("Counts demand data reads that miss in the L3 Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction.", "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.ANY_RESPONSE", "100003", "Counts demand data reads that miss in the L3", "0,1,2,3"));
		eventMap.put("CPL_CYCLES.RING0", new PMUEvent("Unhalted core cycles when the thread is in ring 0.", "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0", "2000003", "Unhalted core cycles when the thread is in ring 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING0_TRANS", new PMUEvent(null, "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0_TRANS", "100003", "Number of intervals between processor halts while thread is in ring 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING123", new PMUEvent("Unhalted core cycles when the thread is not in ring 0.", "0x5C", "0,1,2,3", "0x2", "CPL_CYCLES.RING123", "2000003", "Unhalted core cycles when thread is in rings 1, 2, or 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", new PMUEvent("Cycles in which the L1D and L2 are locked, due to a UC lock or split lock.", "0x63", "0,1,2,3", "0x1", "LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", "2000003", "Cycles when L1 and L2 are locked due to UC or split lock", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent("This event counts the number of instructions retired from execution. For instructions that consist of multiple micro-ops, this event counts the retirement of the last micro-op of the instruction. Counting continues during hardware interrupts, traps, and inside interrupt handlers. INST_RETIRED.ANY is counted by a designated fixed counter, leaving the programmable counters available for other events. Faulting executions of GETSEC/VM entry/VM Exit/MWait will not count as retired instructions.", "0x00", "Fixed counter 0", "0x1", "INST_RETIRED.ANY", "2000003", "Instructions retired from execution.", "Fixed counter 0"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD", new PMUEvent("This event counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling.", "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD", "2000003", "Core cycles when the thread is not in halt state.", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_ANY", new PMUEvent(null, "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.REF_TSC", new PMUEvent("This event counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state.", "0x00", "Fixed counter 2", "0x3", "CPU_CLK_UNHALTED.REF_TSC", "2000003", "Reference cycles when the core is not in halt state.", "Fixed counter 2"));
		eventMap.put("LD_BLOCKS.STORE_FORWARD", new PMUEvent("This event counts loads that followed a store to the same address, where the data could not be forwarded inside the pipeline from the store to the load.  The most common reason why store forwarding would be blocked is when a load's address range overlaps with a preceding smaller uncompleted store. The penalty for blocked store forwarding is that the load must wait for the store to write its value to the cache before it can be issued.", "0x03", "0,1,2,3", "0x2", "LD_BLOCKS.STORE_FORWARD", "100003", "loads blocked by overlapping with store buffer that cannot be forwarded", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.NO_SR", new PMUEvent("The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.", "0x03", "0,1,2,3", "0x8", "LD_BLOCKS.NO_SR", "100003", "The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", new PMUEvent("Aliasing occurs when a load is issued after a store and their memory addresses are offset by 4K.  This event counts the number of loads that aliased with a preceding store, resulting in an extended address check in the pipeline which can have a performance impact.", "0x07", "0,1,2,3", "0x1", "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", "100003", "False dependencies in MOB due to partial compare on address.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES", new PMUEvent("This event counts the number of cycles spent waiting for a recovery after an event such as a processor nuke, JEClear, assist, hle/rtm abort etc.", "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for this thread (e.g. misprediction or memory nuke)", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES_ANY", new PMUEvent("Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke).", "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES_ANY", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke)", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.ANY", new PMUEvent("This event counts the number of uops issued by the Front-end of the pipeline to the Back-end. This event is counted at the allocation stage and will count both retired and non-retired uops.", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.ANY", "2000003", "Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.STALL_CYCLES", new PMUEvent(null, "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread.", "0,1,2,3"));
		eventMap.put("UOPS_ISSUED.CORE_STALL_CYCLES", new PMUEvent(null, "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.CORE_STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads.", "0,1,2,3"));
		eventMap.put("UOPS_ISSUED.FLAGS_MERGE", new PMUEvent("Number of flags-merge uops allocated. Such uops add delay.", "0x0E", "0,1,2,3", "0x10", "UOPS_ISSUED.FLAGS_MERGE", "2000003", "Number of flags-merge uops being allocated. Such uops considered perf sensitive; added by GSR u-arch.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.SLOW_LEA", new PMUEvent("Number of slow LEA or similar uops allocated. Such uop has 3 sources (for example, 2 sources + immediate) regardless of whether it is a result of LEA instruction or not.", "0x0E", "0,1,2,3", "0x20", "UOPS_ISSUED.SLOW_LEA", "2000003", "Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.SINGLE_MUL", new PMUEvent("Number of multiply packed/scalar single precision uops allocated.", "0x0E", "0,1,2,3", "0x40", "UOPS_ISSUED.SINGLE_MUL", "2000003", "Number of Multiply packed/scalar single precision uops allocated", "0,1,2,3,4,5,6,7"));
		eventMap.put("ARITH.DIVIDER_UOPS", new PMUEvent(null, "0x14", "0,1,2,3", "0x2", "ARITH.DIVIDER_UOPS", "2000003", "Any uop executed by the Divider. (This includes all divide uops, sqrt, ...)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P", new PMUEvent("Counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling.", "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P", "2000003", "Thread cycles when thread is not in halt state", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK", new PMUEvent("Increments at the frequency of XCLK (100 MHz) when not halted.", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", new PMUEvent("Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate).", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK", new PMUEvent("Reference cycles when the thread is unhalted. (counts at 100 MHz rate)", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK_ANY", new PMUEvent("Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate).", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3c", "0,1,2,3", "0x2", "CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other thread is halted.", "0,1,2,3"));
		eventMap.put("CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other thread is halted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.SW_PF", new PMUEvent("Non-SW-prefetch load dispatches that hit fill buffer allocated for S/W prefetch.", "0x4c", "0,1,2,3", "0x1", "LOAD_HIT_PRE.SW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for software prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.HW_PF", new PMUEvent("Non-SW-prefetch load dispatches that hit fill buffer allocated for H/W prefetch.", "0x4c", "0,1,2,3", "0x2", "LOAD_HIT_PRE.HW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for hardware prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.INT_ELIMINATED", new PMUEvent("Number of integer move elimination candidate uops that were eliminated.", "0x58", "0,1,2,3", "0x1", "MOVE_ELIMINATION.INT_ELIMINATED", "1000003", "Number of integer Move Elimination candidate uops that were eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.SIMD_ELIMINATED", new PMUEvent("Number of SIMD move elimination candidate uops that were eliminated.", "0x58", "0,1,2,3", "0x2", "MOVE_ELIMINATION.SIMD_ELIMINATED", "1000003", "Number of SIMD Move Elimination candidate uops that were eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.INT_NOT_ELIMINATED", new PMUEvent("Number of integer move elimination candidate uops that were not eliminated.", "0x58", "0,1,2,3", "0x4", "MOVE_ELIMINATION.INT_NOT_ELIMINATED", "1000003", "Number of integer Move Elimination candidate uops that were not eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.SIMD_NOT_ELIMINATED", new PMUEvent("Number of SIMD move elimination candidate uops that were not eliminated.", "0x58", "0,1,2,3", "0x8", "MOVE_ELIMINATION.SIMD_NOT_ELIMINATED", "1000003", "Number of SIMD Move Elimination candidate uops that were not eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_CYCLES", new PMUEvent("This event counts cycles when the Reservation Station ( RS ) is empty for the thread. The RS is a structure that buffers allocated micro-ops from the Front-end. If there are many cycles when the RS is empty, it may represent an underflow of instructions delivered from the Front-end.", "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_CYCLES", "2000003", "Cycles when Reservation Station (RS) is empty for the thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_END", new PMUEvent(null, "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_END", "200003", "Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.LCP", new PMUEvent("This event counts cycles where the decoder is stalled on an instruction with a length changing prefix (LCP).", "0x87", "0,1,2,3", "0x1", "ILD_STALL.LCP", "2000003", "Stalls caused by changing prefix length of the instruction.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.IQ_FULL", new PMUEvent("Stall cycles due to IQ is full.", "0x87", "0,1,2,3", "0x4", "ILD_STALL.IQ_FULL", "2000003", "Stall cycles because IQ is full", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent(null, "0x88", "0,1,2,3", "0x41", "BR_INST_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken macro-conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_CONDITIONAL", new PMUEvent(null, "0x88", "0,1,2,3", "0x81", "BR_INST_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired macro-conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_JUMP", new PMUEvent(null, "0x88", "0,1,2,3", "0x82", "BR_INST_EXEC.TAKEN_DIRECT_JUMP", "200003", "Taken speculative and retired macro-conditional branch instructions excluding calls and indirects.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x88", "0,1,2,3", "0x84", "BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", new PMUEvent(null, "0x88", "0,1,2,3", "0x88", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", "200003", "Taken speculative and retired indirect branches with return mnemonic.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0x90", "BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", "200003", "Taken speculative and retired direct near calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0xa0", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired indirect calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_CONDITIONAL", new PMUEvent(null, "0x88", "0,1,2,3", "0xc1", "BR_INST_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired macro-conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_JMP", new PMUEvent(null, "0x88", "0,1,2,3", "0xc2", "BR_INST_EXEC.ALL_DIRECT_JMP", "200003", "Speculative and retired macro-unconditional branches excluding calls and indirects.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x88", "0,1,2,3", "0xc4", "BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Speculative and retired indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", new PMUEvent(null, "0x88", "0,1,2,3", "0xc8", "BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", "200003", "Speculative and retired indirect return branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", new PMUEvent(null, "0x88", "0,1,2,3", "0xd0", "BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", "200003", "Speculative and retired direct near calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_BRANCHES", new PMUEvent("Counts all near executed branches (not necessarily retired).", "0x88", "0,1,2,3", "0xff", "BR_INST_EXEC.ALL_BRANCHES", "200003", "Speculative and retired  branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent(null, "0x89", "0,1,2,3", "0x41", "BR_MISP_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken speculative and retired mispredicted macro conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_CONDITIONAL", new PMUEvent(null, "0x89", "0,1,2,3", "0x81", "BR_MISP_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired mispredicted macro conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x89", "0,1,2,3", "0x84", "BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired mispredicted indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_RETURN_NEAR", new PMUEvent(null, "0x89", "0,1,2,3", "0x88", "BR_MISP_EXEC.TAKEN_RETURN_NEAR", "200003", "Taken speculative and retired mispredicted indirect branches with return mnemonic.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent(null, "0x89", "0,1,2,3", "0xa0", "BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired mispredicted indirect calls.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_CONDITIONAL", new PMUEvent(null, "0x89", "0,1,2,3", "0xc1", "BR_MISP_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired mispredicted macro conditional branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent(null, "0x89", "0,1,2,3", "0xc4", "BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Mispredicted indirect branches excluding calls and returns.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_BRANCHES", new PMUEvent("Counts all near executed branches (not necessarily retired).", "0x89", "0,1,2,3", "0xff", "BR_MISP_EXEC.ALL_BRANCHES", "200003", "Speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_0", new PMUEvent("Cycles which a uop is dispatched on port 0 in this thread.", "0xA1", "0,1,2,3", "0x1", "UOPS_EXECUTED_PORT.PORT_0", "2000003", "Cycles per thread when uops are executed in port 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_0_CORE", new PMUEvent("Cycles per core when uops are exectuted in port 0.", "0xA1", "0,1,2,3", "0x1", "UOPS_EXECUTED_PORT.PORT_0_CORE", "2000003", "Cycles per core when uops are executed in port 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_0", new PMUEvent(null, "0xA1", "0,1,2,3", "0x1", "UOPS_DISPATCHED_PORT.PORT_0", "2000003", "Cycles per thread when uops are executed in port 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_1", new PMUEvent("Cycles which a uop is dispatched on port 1 in this thread.", "0xA1", "0,1,2,3", "0x2", "UOPS_EXECUTED_PORT.PORT_1", "2000003", "Cycles per thread when uops are executed in port 1", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_1_CORE", new PMUEvent("Cycles per core when uops are exectuted in port 1.", "0xA1", "0,1,2,3", "0x2", "UOPS_EXECUTED_PORT.PORT_1_CORE", "2000003", "Cycles per core when uops are executed in port 1.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_1", new PMUEvent(null, "0xA1", "0,1,2,3", "0x2", "UOPS_DISPATCHED_PORT.PORT_1", "2000003", "Cycles per thread when uops are executed in port 1.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_2", new PMUEvent("Cycles which a uop is dispatched on port 2 in this thread.", "0xA1", "0,1,2,3", "0x4", "UOPS_EXECUTED_PORT.PORT_2", "2000003", "Cycles per thread when uops are executed in port 2", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_2_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x4", "UOPS_EXECUTED_PORT.PORT_2_CORE", "2000003", "Cycles per core when uops are dispatched to port 2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_2", new PMUEvent(null, "0xA1", "0,1,2,3", "0x4", "UOPS_DISPATCHED_PORT.PORT_2", "2000003", "Cycles per thread when uops are executed in port 2.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_3", new PMUEvent("Cycles which a uop is dispatched on port 3 in this thread.", "0xA1", "0,1,2,3", "0x8", "UOPS_EXECUTED_PORT.PORT_3", "2000003", "Cycles per thread when uops are executed in port 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_3_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x8", "UOPS_EXECUTED_PORT.PORT_3_CORE", "2000003", "Cycles per core when uops are dispatched to port 3.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_3", new PMUEvent(null, "0xA1", "0,1,2,3", "0x8", "UOPS_DISPATCHED_PORT.PORT_3", "2000003", "Cycles per thread when uops are executed in port 3.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_4", new PMUEvent("Cycles which a uop is dispatched on port 4 in this thread.", "0xA1", "0,1,2,3", "0x10", "UOPS_EXECUTED_PORT.PORT_4", "2000003", "Cycles per thread when uops are executed in port 4", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_4_CORE", new PMUEvent("Cycles per core when uops are exectuted in port 4.", "0xA1", "0,1,2,3", "0x10", "UOPS_EXECUTED_PORT.PORT_4_CORE", "2000003", "Cycles per core when uops are executed in port 4.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_4", new PMUEvent(null, "0xA1", "0,1,2,3", "0x10", "UOPS_DISPATCHED_PORT.PORT_4", "2000003", "Cycles per thread when uops are executed in port 4.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_5", new PMUEvent("Cycles which a uop is dispatched on port 5 in this thread.", "0xA1", "0,1,2,3", "0x20", "UOPS_EXECUTED_PORT.PORT_5", "2000003", "Cycles per thread when uops are executed in port 5", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_5_CORE", new PMUEvent("Cycles per core when uops are exectuted in port 5.", "0xA1", "0,1,2,3", "0x20", "UOPS_EXECUTED_PORT.PORT_5_CORE", "2000003", "Cycles per core when uops are executed in port 5.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_5", new PMUEvent(null, "0xA1", "0,1,2,3", "0x20", "UOPS_DISPATCHED_PORT.PORT_5", "2000003", "Cycles per thread when uops are executed in port 5.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_6", new PMUEvent("Cycles which a uop is dispatched on port 6 in this thread.", "0xA1", "0,1,2,3", "0x40", "UOPS_EXECUTED_PORT.PORT_6", "2000003", "Cycles per thread when uops are executed in port 6", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_6_CORE", new PMUEvent("Cycles per core when uops are exectuted in port 6.", "0xA1", "0,1,2,3", "0x40", "UOPS_EXECUTED_PORT.PORT_6_CORE", "2000003", "Cycles per core when uops are executed in port 6.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_6", new PMUEvent(null, "0xA1", "0,1,2,3", "0x40", "UOPS_DISPATCHED_PORT.PORT_6", "2000003", "Cycles per thread when uops are executed in port 6.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_7", new PMUEvent("Cycles which a uop is dispatched on port 7 in this thread.", "0xA1", "0,1,2,3", "0x80", "UOPS_EXECUTED_PORT.PORT_7", "2000003", "Cycles per thread when uops are executed in port 7", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED_PORT.PORT_7_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0x80", "UOPS_EXECUTED_PORT.PORT_7_CORE", "2000003", "Cycles per core when uops are dispatched to port 7.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_7", new PMUEvent(null, "0xA1", "0,1,2,3", "0x80", "UOPS_DISPATCHED_PORT.PORT_7", "2000003", "Cycles per thread when uops are executed in port 7.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ANY", new PMUEvent("Cycles allocation is stalled due to resource related reason.", "0xA2", "0,1,2,3", "0x1", "RESOURCE_STALLS.ANY", "2000003", "Resource-related stall cycles", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.RS", new PMUEvent(null, "0xA2", "0,1,2,3", "0x4", "RESOURCE_STALLS.RS", "2000003", "Cycles stalled due to no eligible RS entry available.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.SB", new PMUEvent("This event counts cycles during which no instructions were allocated because no Store Buffers (SB) were available.", "0xA2", "0,1,2,3", "0x8", "RESOURCE_STALLS.SB", "2000003", "Cycles stalled due to no store buffers available. (not including draining form sync).", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ROB", new PMUEvent(null, "0xA2", "0,1,2,3", "0x10", "RESOURCE_STALLS.ROB", "2000003", "Cycles stalled due to re-order buffer full.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L2_PENDING", new PMUEvent("Cycles with pending L2 miss loads. Set Cmask=2 to count cycle.", "0xA3", "0,1,2,3", "0x1", "CYCLE_ACTIVITY.CYCLES_L2_PENDING", "2000003", "Cycles with pending L2 cache miss loads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_LDM_PENDING", new PMUEvent("Cycles with pending memory loads. Set Cmask=2 to count cycle.", "0xA3", "0,1,2,3", "0x2", "CYCLE_ACTIVITY.CYCLES_LDM_PENDING", "2000003", "Cycles with pending memory loads.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_NO_EXECUTE", new PMUEvent("This event counts cycles during which no instructions were executed in the execution stage of the pipeline.", "0xA3", "0,1,2,3", "0x4", "CYCLE_ACTIVITY.CYCLES_NO_EXECUTE", "2000003", "This event increments by 1 for every cycle where there was no execute for this thread.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L2_PENDING", new PMUEvent("Number of loads missed L2.", "0xA3", "0,1,2,3", "0x5", "CYCLE_ACTIVITY.STALLS_L2_PENDING", "2000003", "Execution stalls due to L2 cache misses.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_LDM_PENDING", new PMUEvent("This event counts cycles during which no instructions were executed in the execution stage of the pipeline and there were memory instructions pending (waiting for data).", "0xA3", "0,1,2,3", "0x6", "CYCLE_ACTIVITY.STALLS_LDM_PENDING", "2000003", "Execution stalls due to memory subsystem.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L1D_PENDING", new PMUEvent("Cycles with pending L1 data cache miss loads. Set Cmask=8 to count cycle.", "0xA3", "2", "0x8", "CYCLE_ACTIVITY.CYCLES_L1D_PENDING", "2000003", "Cycles with pending L1 cache miss loads.", "2"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L1D_PENDING", new PMUEvent("Execution stalls due to L1 data cache miss loads. Set Cmask=0CH.", "0xA3", "2", "0xc", "CYCLE_ACTIVITY.STALLS_L1D_PENDING", "2000003", "Execution stalls due to L1 data cache misses", "2"));
		eventMap.put("LSD.UOPS", new PMUEvent("Number of uops delivered by the LSD.", "0xa8", "0,1,2,3", "0x1", "LSD.UOPS", "2000003", "Number of Uops delivered by the LSD.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_ACTIVE", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_ACTIVE", "2000003", "Cycles Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_4_UOPS", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_4_UOPS", "2000003", "Cycles 4 Uops delivered by the LSD, but didn't come from the decoder.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.STALL_CYCLES", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.STALL_CYCLES", "2000003", "Counts number of cycles no uops were dispatched to be executed on this thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", new PMUEvent("This events counts the cycles where at least one uop was executed. It is counted per thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", "2000003", "Cycles where at least 1 uop was executed per-thread", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", new PMUEvent("This events counts the cycles where at least two uop were executed. It is counted per thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", "2000003", "Cycles where at least 2 uops were executed per-thread", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", new PMUEvent("This events counts the cycles where at least three uop were executed. It is counted per thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", "2000003", "Cycles where at least 3 uops were executed per-thread", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", "2000003", "Cycles where at least 4 uops were executed per-thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CORE", new PMUEvent("Counts total number of uops to be executed per-core each cycle.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE", "2000003", "Number of uops executed on the core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_1", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_1", "2000003", "Cycles at least 1 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_2", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_2", "2000003", "Cycles at least 2 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_3", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_3", "2000003", "Cycles at least 3 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_4", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_4", "2000003", "Cycles at least 4 micro-op is executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_NONE", new PMUEvent(null, "0xb1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_NONE", "2000003", "Cycles with no micro-ops executed from any thread on physical core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent("Number of instructions at retirement.", "0xC0", "0,1,2,3", "0x0", "INST_RETIRED.ANY_P", "2000003", "Number of instructions retired. General Counter   - architectural event", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.PREC_DIST", new PMUEvent("Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution.", "0xC0", "1", "0x1", "INST_RETIRED.PREC_DIST", "2000003", "Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution", "1"));
		eventMap.put("INST_RETIRED.X87", new PMUEvent("This is a non-precise version (that is, does not use PEBS) of the event that counts FP operations retired. For X87 FP operations that have no exceptions counting also includes flows that have several X87, or flows that use X87 uops in the exception handling.", "0xC0", "0,1,2,3", "0x2", "INST_RETIRED.X87", "2000003", "FP operations retired. X87 FP operations that have no exceptions: Counts also flows that have several X87 or flows that use X87 uops in the exception handling.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.ANY_WB_ASSIST", new PMUEvent("Number of microcode assists invoked by HW upon uop writeback.", "0xC1", "0,1,2,3", "0x40", "OTHER_ASSISTS.ANY_WB_ASSIST", "100003", "Number of times any microcode assist is invoked by HW upon uop writeback.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.ALL", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.ALL", "2000003", "Actually retired uops.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.STALL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.TOTAL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.TOTAL_CYCLES", "2000003", "Cycles with less than 10 actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.CORE_STALL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.CORE_STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.RETIRE_SLOTS", new PMUEvent(null, "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.RETIRE_SLOTS", "2000003", "Retirement slots used.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.CYCLES", new PMUEvent(null, "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.CYCLES", "2000003", "Cycles there was a Nuke. Account for both thread-specific and All Thread Nukes.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.COUNT", new PMUEvent(null, "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.COUNT", "100003", "Number of machine clears (nukes) of any type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent("This event is incremented when self-modifying code (SMC) is detected, which causes a machine clear.  Machine clears can have a significant performance impact if they are happening frequently.", "0xC3", "0,1,2,3", "0x4", "MACHINE_CLEARS.SMC", "100003", "Self-modifying code (SMC) detected.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MASKMOV", new PMUEvent(null, "0xC3", "0,1,2,3", "0x20", "MACHINE_CLEARS.MASKMOV", "100003", "This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent("Branch instructions at retirement.", "0xC4", "0,1,2,3", "0x0", "BR_INST_RETIRED.ALL_BRANCHES", "400009", "All (macro) branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x1", "BR_INST_RETIRED.CONDITIONAL", "400009", "Conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL", "100003", "Direct and indirect near call instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL_R3", new PMUEvent(null, "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL_R3", "100003", "Direct and indirect macro near call instructions retired (captured in ring 3).", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent(null, "0xC4", "0,1,2,3", "0x4", "BR_INST_RETIRED.ALL_BRANCHES_PEBS", "400009", "All (macro) branch instructions retired.", "0,1,2,3"));
		eventMap.put("BR_INST_RETIRED.NEAR_RETURN", new PMUEvent(null, "0xC4", "0,1,2,3", "0x8", "BR_INST_RETIRED.NEAR_RETURN", "100003", "Return instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NOT_TAKEN", new PMUEvent("Counts the number of not taken branch instructions retired.", "0xC4", "0,1,2,3", "0x10", "BR_INST_RETIRED.NOT_TAKEN", "400009", "Not taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_TAKEN", new PMUEvent(null, "0xC4", "0,1,2,3", "0x20", "BR_INST_RETIRED.NEAR_TAKEN", "400009", "Taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.FAR_BRANCH", new PMUEvent("Number of far branches retired.", "0xC4", "0,1,2,3", "0x40", "BR_INST_RETIRED.FAR_BRANCH", "100003", "Far branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent("Mispredicted branch instructions at retirement.", "0xC5", "0,1,2,3", "0x0", "BR_MISP_RETIRED.ALL_BRANCHES", "400009", "All mispredicted macro branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC5", "0,1,2,3", "0x1", "BR_MISP_RETIRED.CONDITIONAL", "400009", "Mispredicted conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent("This event counts all mispredicted branch instructions retired. This is a precise event.", "0xC5", "0,1,2,3", "0x4", "BR_MISP_RETIRED.ALL_BRANCHES_PEBS", "400009", "Mispredicted macro branch instructions retired.", "0,1,2,3"));
		eventMap.put("BR_MISP_RETIRED.NEAR_TAKEN", new PMUEvent(null, "0xC5", "0,1,2,3", "0x20", "BR_MISP_RETIRED.NEAR_TAKEN", "400009", "number of near branch instructions retired that were mispredicted and taken.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ROB_MISC_EVENTS.LBR_INSERTS", new PMUEvent("Count cases of saving new LBR records by hardware.", "0xCC", "0,1,2,3", "0x20", "ROB_MISC_EVENTS.LBR_INSERTS", "2000003", "Count cases of saving new LBR", "0,1,2,3,4,5,6,7"));
		eventMap.put("BACLEARS.ANY", new PMUEvent("Number of front end re-steers due to BPU misprediction.", "0xe6", "0,1,2,3", "0x1f", "BACLEARS.ANY", "100003", "Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.MISS_EXTERNAL", new PMUEvent("An external snoop misses in some processor core.", "0x22", "0,1", "0x21", "UNC_CBO_XSNP_RESPONSE.MISS_EXTERNAL", null, "An external snoop misses in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.MISS_XCORE", new PMUEvent("A cross-core snoop initiated by this Cbox due to processor core memory request which misses in some processor core.", "0x22", "0,1", "0x41", "UNC_CBO_XSNP_RESPONSE.MISS_XCORE", null, "A cross-core snoop initiated by this Cbox due to processor core memory request which misses in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.MISS_EVICTION", new PMUEvent("A cross-core snoop resulted from L3 Eviction which misses in some processor core.", "0x22", "0,1", "0x81", "UNC_CBO_XSNP_RESPONSE.MISS_EVICTION", null, "A cross-core snoop resulted from L3 Eviction which misses in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.HIT_EXTERNAL", new PMUEvent("An external snoop hits a non-modified line in some processor core.", "0x22", "0,1", "0x24", "UNC_CBO_XSNP_RESPONSE.HIT_EXTERNAL", null, "An external snoop hits a non-modified line in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.HIT_XCORE", new PMUEvent("A cross-core snoop initiated by this Cbox due to processor core memory request which hits a non-modified line in some processor core.", "0x22", "0,1", "0x44", "UNC_CBO_XSNP_RESPONSE.HIT_XCORE", null, "A cross-core snoop initiated by this Cbox due to processor core memory request which hits a non-modified line in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.HIT_EVICTION", new PMUEvent("A cross-core snoop resulted from L3 Eviction which hits a non-modified line in some processor core.", "0x22", "0,1", "0x84", "UNC_CBO_XSNP_RESPONSE.HIT_EVICTION", null, "A cross-core snoop resulted from L3 Eviction which hits a non-modified line in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.HITM_EXTERNAL", new PMUEvent("An external snoop hits a modified line in some processor core.", "0x22", "0,1", "0x28", "UNC_CBO_XSNP_RESPONSE.HITM_EXTERNAL", null, "An external snoop hits a modified line in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.HITM_XCORE", new PMUEvent("A cross-core snoop initiated by this Cbox due to processor core memory request which hits a modified line in some processor core.", "0x22", "0,1", "0x48", "UNC_CBO_XSNP_RESPONSE.HITM_XCORE", null, "A cross-core snoop initiated by this Cbox due to processor core memory request which hits a modified line in some processor core.", null));
		eventMap.put("UNC_CBO_XSNP_RESPONSE.HITM_EVICTION", new PMUEvent("A cross-core snoop resulted from L3 Eviction which hits a modified line in some processor core.", "0x22", "0,1", "0x88", "UNC_CBO_XSNP_RESPONSE.HITM_EVICTION", null, "A cross-core snoop resulted from L3 Eviction which hits a modified line in some processor core.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.READ_M", new PMUEvent("L3 Lookup read request that access cache and found line in M-state.", "0x34", "0,1", "0x11", "UNC_CBO_CACHE_LOOKUP.READ_M", null, "L3 Lookup read request that access cache and found line in M-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.WRITE_M", new PMUEvent("L3 Lookup write request that access cache and found line in M-state.", "0x34", "0,1", "0x21", "UNC_CBO_CACHE_LOOKUP.WRITE_M", null, "L3 Lookup write request that access cache and found line in M-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.EXTSNP_M", new PMUEvent("L3 Lookup external snoop request that access cache and found line in M-state.", "0x34", "0,1", "0x41", "UNC_CBO_CACHE_LOOKUP.EXTSNP_M", null, "L3 Lookup external snoop request that access cache and found line in M-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.ANY_M", new PMUEvent("L3 Lookup any request that access cache and found line in M-state.", "0x34", "0,1", "0x81", "UNC_CBO_CACHE_LOOKUP.ANY_M", null, "L3 Lookup any request that access cache and found line in M-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.READ_I", new PMUEvent("L3 Lookup read request that access cache and found line in I-state.", "0x34", "0,1", "0x18", "UNC_CBO_CACHE_LOOKUP.READ_I", null, "L3 Lookup read request that access cache and found line in I-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.WRITE_I", new PMUEvent("L3 Lookup write request that access cache and found line in I-state.", "0x34", "0,1", "0x28", "UNC_CBO_CACHE_LOOKUP.WRITE_I", null, "L3 Lookup write request that access cache and found line in I-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.EXTSNP_I", new PMUEvent("L3 Lookup external snoop request that access cache and found line in I-state.", "0x34", "0,1", "0x48", "UNC_CBO_CACHE_LOOKUP.EXTSNP_I", null, "L3 Lookup external snoop request that access cache and found line in I-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.ANY_I", new PMUEvent("L3 Lookup any request that access cache and found line in I-state.", "0x34", "0,1", "0x88", "UNC_CBO_CACHE_LOOKUP.ANY_I", null, "L3 Lookup any request that access cache and found line in I-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.READ_MESI", new PMUEvent("L3 Lookup read request that access cache and found line in any MESI-state.", "0x34", "0,1", "0x1f", "UNC_CBO_CACHE_LOOKUP.READ_MESI", null, "L3 Lookup read request that access cache and found line in any MESI-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.WRITE_MESI", new PMUEvent("L3 Lookup write request that access cache and found line in MESI-state.", "0x34", "0,1", "0x2f", "UNC_CBO_CACHE_LOOKUP.WRITE_MESI", null, "L3 Lookup write request that access cache and found line in MESI-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.EXTSNP_MESI", new PMUEvent("L3 Lookup external snoop request that access cache and found line in MESI-state.", "0x34", "0,1", "0x4f", "UNC_CBO_CACHE_LOOKUP.EXTSNP_MESI", null, "L3 Lookup external snoop request that access cache and found line in MESI-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.ANY_MESI", new PMUEvent("L3 Lookup any request that access cache and found line in MESI-state.", "0x34", "0,1", "0x8f", "UNC_CBO_CACHE_LOOKUP.ANY_MESI", null, "L3 Lookup any request that access cache and found line in MESI-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.ANY_ES", new PMUEvent("L3 Lookup any request that access cache and found line in E or S-state.", "0x34", "0,1", "0x86", "UNC_CBO_CACHE_LOOKUP.ANY_ES", null, "L3 Lookup any request that access cache and found line in E or S-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.EXTSNP_ES", new PMUEvent("L3 Lookup external snoop request that access cache and found line in E or S-state.", "0x34", "0,1", "0x46", "UNC_CBO_CACHE_LOOKUP.EXTSNP_ES", null, "L3 Lookup external snoop request that access cache and found line in E or S-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.READ_ES", new PMUEvent("L3 Lookup read request that access cache and found line in E or S-state.", "0x34", "0,1", "0x16", "UNC_CBO_CACHE_LOOKUP.READ_ES", null, "L3 Lookup read request that access cache and found line in E or S-state.", null));
		eventMap.put("UNC_CBO_CACHE_LOOKUP.WRITE_ES", new PMUEvent("L3 Lookup write request that access cache and found line in E or S-state.", "0x34", "0,1", "0x26", "UNC_CBO_CACHE_LOOKUP.WRITE_ES", null, "L3 Lookup write request that access cache and found line in E or S-state.", null));
		eventMap.put("UNC_ARB_TRK_OCCUPANCY.ALL", new PMUEvent("Each cycle count number of all Core outgoing valid entries. Such entry is defined as valid from it's allocation till first of IDI0 or DRS0 messages is sent out. Accounts for Coherent and non-coherent traffic.", "0x80", "0", "0x01", "UNC_ARB_TRK_OCCUPANCY.ALL", null, "Each cycle count number of all Core outgoing valid entries. Such entry is defined as valid from it's allocation till first of IDI0 or DRS0 messages is sent out. Accounts for Coherent and non-coherent traffic.", null));
		eventMap.put("UNC_ARB_TRK_REQUESTS.ALL", new PMUEvent("Total number of Core outgoing entries allocated. Accounts for Coherent and non-coherent traffic.", "0x81", "0,1", "0x01", "UNC_ARB_TRK_REQUESTS.ALL", null, "Total number of Core outgoing entries allocated. Accounts for Coherent and non-coherent traffic.", null));
		eventMap.put("UNC_ARB_TRK_REQUESTS.WRITES", new PMUEvent("Number of Writes allocated - any write transactions: full/partials writes and evictions.", "0x81", "0,1", "0x20", "UNC_ARB_TRK_REQUESTS.WRITES", null, "Number of Writes allocated - any write transactions: full/partials writes and evictions.", null));
		eventMap.put("UNC_ARB_COH_TRK_OCCUPANCY.All", new PMUEvent("Each cycle count number of valid entries in Coherency Tracker queue from allocation till deallocation. Aperture requests (snoops) appear as NC decoded internally and become coherent (snoop L3, access memory).", "0x83", "0", "0x01", "UNC_ARB_COH_TRK_OCCUPANCY.All", null, "Each cycle count number of valid entries in Coherency Tracker queue from allocation till deallocation. Aperture requests (snoops) appear as NC decoded internally and become coherent (snoop L3, access memory)", null));
		eventMap.put("UNC_ARB_COH_TRK_REQUESTS.ALL", new PMUEvent("Number of entries allocated. Account for Any type: e.g. Snoop, Core aperture, etc.", "0x84", "0,1", "0x01", "UNC_ARB_COH_TRK_REQUESTS.ALL", null, "Number of entries allocated. Account for Any type: e.g. Snoop, Core aperture, etc.", null));
		eventMap.put("UNC_CLOCK.SOCKET", new PMUEvent("This 48-bit fixed counter counts the UCLK cycles.", "0x0", "FIXED", "0x01", "UNC_CLOCK.SOCKET", null, "This 48-bit fixed counter counts the UCLK cycles.", null));
		eventMap.put("DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Misses in all TLB levels that cause a page walk of any page size.", "0x08", "0,1,2,3", "0x1", "DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", "100003", "Load misses in all DTLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_4K", new PMUEvent("Completed page walks due to demand load misses that caused 4K page walks in any TLB levels.", "0x08", "0,1,2,3", "0x2", "DTLB_LOAD_MISSES.WALK_COMPLETED_4K", "2000003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (4K).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("Completed page walks due to demand load misses that caused 2M/4M page walks in any TLB levels.", "0x08", "0,1,2,3", "0x4", "DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M", "2000003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (2M/4M).", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED_1G", new PMUEvent(null, "0x08", "0,1,2,3", "0x8", "DTLB_LOAD_MISSES.WALK_COMPLETED_1G", "2000003", "Load miss in all TLB levels causes a page walk that completes. (1G)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED", new PMUEvent("Completed page walks in any TLB of any page size due to demand load misses.", "0x08", "0,1,2,3", "0xe", "DTLB_LOAD_MISSES.WALK_COMPLETED", "100003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_DURATION", new PMUEvent("This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by DTLB load misses.", "0x08", "0,1,2,3", "0x10", "DTLB_LOAD_MISSES.WALK_DURATION", "2000003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT_4K", new PMUEvent("This event counts load operations from a 4K page that miss the first DTLB level but hit the second and do not cause page walks.", "0x08", "0,1,2,3", "0x20", "DTLB_LOAD_MISSES.STLB_HIT_4K", "2000003", "Load misses that miss the  DTLB and hit the STLB (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT_2M", new PMUEvent("This event counts load operations from a 2M page that miss the first DTLB level but hit the second and do not cause page walks.", "0x08", "0,1,2,3", "0x40", "DTLB_LOAD_MISSES.STLB_HIT_2M", "2000003", "Load misses that miss the  DTLB and hit the STLB (2M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT", new PMUEvent("Number of cache load STLB hits. No page walk.", "0x08", "0,1,2,3", "0x60", "DTLB_LOAD_MISSES.STLB_HIT", "2000003", "Load operations that miss the first DTLB level but hit the second and do not cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.PDE_CACHE_MISS", new PMUEvent("DTLB demand load misses with low part of linear-to-physical address translation missed.", "0x08", "0,1,2,3", "0x80", "DTLB_LOAD_MISSES.PDE_CACHE_MISS", "100003", "DTLB demand load misses with low part of linear-to-physical address translation missed", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Miss in all TLB levels causes a page walk of any page size (4K/2M/4M/1G).", "0x49", "0,1,2,3", "0x1", "DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", "100003", "Store misses in all DTLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_4K", new PMUEvent("Completed page walks due to store misses in one or more TLB levels of 4K page structure.", "0x49", "0,1,2,3", "0x2", "DTLB_STORE_MISSES.WALK_COMPLETED_4K", "100003", "Store miss in all TLB levels causes a page walk that completes. (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("Completed page walks due to store misses in one or more TLB levels of 2M/4M page structure.", "0x49", "0,1,2,3", "0x4", "DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M", "100003", "Store misses in all DTLB levels that cause completed page walks (2M/4M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED_1G", new PMUEvent(null, "0x49", "0,1,2,3", "0x8", "DTLB_STORE_MISSES.WALK_COMPLETED_1G", "100003", "Store misses in all DTLB levels that cause completed page walks. (1G)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED", new PMUEvent("Completed page walks due to store miss in any TLB levels of any page size (4K/2M/4M/1G).", "0x49", "0,1,2,3", "0xe", "DTLB_STORE_MISSES.WALK_COMPLETED", "100003", "Store misses in all DTLB levels that cause completed page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_DURATION", new PMUEvent("This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by DTLB store misses.", "0x49", "0,1,2,3", "0x10", "DTLB_STORE_MISSES.WALK_DURATION", "100003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT_4K", new PMUEvent("This event counts store operations from a 4K page that miss the first DTLB level but hit the second and do not cause page walks.", "0x49", "0,1,2,3", "0x20", "DTLB_STORE_MISSES.STLB_HIT_4K", "100003", "Store misses that miss the  DTLB and hit the STLB (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT_2M", new PMUEvent("This event counts store operations from a 2M page that miss the first DTLB level but hit the second and do not cause page walks.", "0x49", "0,1,2,3", "0x40", "DTLB_STORE_MISSES.STLB_HIT_2M", "100003", "Store misses that miss the  DTLB and hit the STLB (2M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT", new PMUEvent("Store operations that miss the first TLB level but hit the second and do not cause page walks.", "0x49", "0,1,2,3", "0x60", "DTLB_STORE_MISSES.STLB_HIT", "100003", "Store operations that miss the first TLB level but hit the second and do not cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.PDE_CACHE_MISS", new PMUEvent("DTLB store misses with low part of linear-to-physical address translation missed.", "0x49", "0,1,2,3", "0x80", "DTLB_STORE_MISSES.PDE_CACHE_MISS", "100003", "DTLB store misses with low part of linear-to-physical address translation missed", "0,1,2,3,4,5,6,7"));
		eventMap.put("EPT.WALK_CYCLES", new PMUEvent(null, "0x4f", "0,1,2,3", "0x10", "EPT.WALK_CYCLES", "2000003", "Cycle count for an Extended Page table walk.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Misses in ITLB that causes a page walk of any page size.", "0x85", "0,1,2,3", "0x1", "ITLB_MISSES.MISS_CAUSES_A_WALK", "100003", "Misses at all ITLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_4K", new PMUEvent("Completed page walks due to misses in ITLB 4K page entries.", "0x85", "0,1,2,3", "0x2", "ITLB_MISSES.WALK_COMPLETED_4K", "100003", "Code miss in all TLB levels causes a page walk that completes. (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_2M_4M", new PMUEvent("Completed page walks due to misses in ITLB 2M/4M page entries.", "0x85", "0,1,2,3", "0x4", "ITLB_MISSES.WALK_COMPLETED_2M_4M", "100003", "Code miss in all TLB levels causes a page walk that completes. (2M/4M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED_1G", new PMUEvent(null, "0x85", "0,1,2,3", "0x8", "ITLB_MISSES.WALK_COMPLETED_1G", "100003", "Store miss in all TLB levels causes a page walk that completes. (1G)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED", new PMUEvent("Completed page walks in ITLB of any page size.", "0x85", "0,1,2,3", "0xe", "ITLB_MISSES.WALK_COMPLETED", "100003", "Misses in all ITLB levels that cause completed page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_DURATION", new PMUEvent("This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by ITLB misses.", "0x85", "0,1,2,3", "0x10", "ITLB_MISSES.WALK_DURATION", "100003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT_4K", new PMUEvent("ITLB misses that hit STLB (4K).", "0x85", "0,1,2,3", "0x20", "ITLB_MISSES.STLB_HIT_4K", "100003", "Core misses that miss the  DTLB and hit the STLB (4K)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT_2M", new PMUEvent("ITLB misses that hit STLB (2M).", "0x85", "0,1,2,3", "0x40", "ITLB_MISSES.STLB_HIT_2M", "100003", "Code misses that miss the  DTLB and hit the STLB (2M)", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT", new PMUEvent("ITLB misses that hit STLB. No page walk.", "0x85", "0,1,2,3", "0x60", "ITLB_MISSES.STLB_HIT", "100003", "Operations that miss the first ITLB level but hit the second and do not cause any page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB.ITLB_FLUSH", new PMUEvent("Counts the number of ITLB flushes, includes 4k/2M/4M pages.", "0xae", "0,1,2,3", "0x1", "ITLB.ITLB_FLUSH", "100003", "Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.", "0,1,2,3,4,5,6,7"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_L1", new PMUEvent("Number of DTLB page walker loads that hit in the L1+FB.", "0xBC", "0,1,2,3", "0x11", "PAGE_WALKER_LOADS.DTLB_L1", "2000003", "Number of DTLB page walker hits in the L1+FB", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_L2", new PMUEvent("Number of DTLB page walker loads that hit in the L2.", "0xBC", "0,1,2,3", "0x12", "PAGE_WALKER_LOADS.DTLB_L2", "2000003", "Number of DTLB page walker hits in the L2", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_L3", new PMUEvent("Number of DTLB page walker loads that hit in the L3.", "0xBC", "0,1,2,3", "0x14", "PAGE_WALKER_LOADS.DTLB_L3", "2000003", "Number of DTLB page walker hits in the L3 + XSNP", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.DTLB_MEMORY", new PMUEvent("Number of DTLB page walker loads from memory.", "0xBC", "0,1,2,3", "0x18", "PAGE_WALKER_LOADS.DTLB_MEMORY", "2000003", "Number of DTLB page walker hits in Memory", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.ITLB_L1", new PMUEvent("Number of ITLB page walker loads that hit in the L1+FB.", "0xBC", "0,1,2,3", "0x21", "PAGE_WALKER_LOADS.ITLB_L1", "2000003", "Number of ITLB page walker hits in the L1+FB", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.ITLB_L2", new PMUEvent("Number of ITLB page walker loads that hit in the L2.", "0xBC", "0,1,2,3", "0x22", "PAGE_WALKER_LOADS.ITLB_L2", "2000003", "Number of ITLB page walker hits in the L2", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.ITLB_L3", new PMUEvent("Number of ITLB page walker loads that hit in the L3.", "0xBC", "0,1,2,3", "0x24", "PAGE_WALKER_LOADS.ITLB_L3", "2000003", "Number of ITLB page walker hits in the L3 + XSNP", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.ITLB_MEMORY", new PMUEvent("Number of ITLB page walker loads from memory.", "0xBC", "0,1,2,3", "0x28", "PAGE_WALKER_LOADS.ITLB_MEMORY", "2000003", "Number of ITLB page walker hits in Memory", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_DTLB_L1", new PMUEvent(null, "0xBC", "0,1,2,3", "0x41", "PAGE_WALKER_LOADS.EPT_DTLB_L1", "2000003", "Counts the number of Extended Page Table walks from the DTLB that hit in the L1 and FB.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_DTLB_L2", new PMUEvent(null, "0xBC", "0,1,2,3", "0x42", "PAGE_WALKER_LOADS.EPT_DTLB_L2", "2000003", "Counts the number of Extended Page Table walks from the DTLB that hit in the L2.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_DTLB_L3", new PMUEvent(null, "0xBC", "0,1,2,3", "0x44", "PAGE_WALKER_LOADS.EPT_DTLB_L3", "2000003", "Counts the number of Extended Page Table walks from the DTLB that hit in the L3.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_DTLB_MEMORY", new PMUEvent(null, "0xBC", "0,1,2,3", "0x48", "PAGE_WALKER_LOADS.EPT_DTLB_MEMORY", "2000003", "Counts the number of Extended Page Table walks from the DTLB that hit in memory.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_ITLB_L1", new PMUEvent(null, "0xBC", "0,1,2,3", "0x81", "PAGE_WALKER_LOADS.EPT_ITLB_L1", "2000003", "Counts the number of Extended Page Table walks from the ITLB that hit in the L1 and FB.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_ITLB_L2", new PMUEvent(null, "0xBC", "0,1,2,3", "0x82", "PAGE_WALKER_LOADS.EPT_ITLB_L2", "2000003", "Counts the number of Extended Page Table walks from the ITLB that hit in the L2.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_ITLB_L3", new PMUEvent(null, "0xBC", "0,1,2,3", "0x84", "PAGE_WALKER_LOADS.EPT_ITLB_L3", "2000003", "Counts the number of Extended Page Table walks from the ITLB that hit in the L2.", "0,1,2,3"));
		eventMap.put("PAGE_WALKER_LOADS.EPT_ITLB_MEMORY", new PMUEvent(null, "0xBC", "0,1,2,3", "0x88", "PAGE_WALKER_LOADS.EPT_ITLB_MEMORY", "2000003", "Counts the number of Extended Page Table walks from the ITLB that hit in memory.", "0,1,2,3"));
		eventMap.put("TLB_FLUSH.DTLB_THREAD", new PMUEvent("DTLB flush attempts of the thread-specific entries.", "0xBD", "0,1,2,3", "0x1", "TLB_FLUSH.DTLB_THREAD", "100003", "DTLB flush attempts of the thread-specific entries", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.STLB_ANY", new PMUEvent("Count number of STLB flush attempts.", "0xBD", "0,1,2,3", "0x20", "TLB_FLUSH.STLB_ANY", "100003", "STLB flush attempts", "0,1,2,3,4,5,6,7"));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}