package com.bempel.perf.pmuevents;

import java.util.*;
import java.util.function.Consumer;

public class Ivytown implements PMUEventMap {
    private  final Map<String, PMUEvent> eventMap = new HashMap<>();

    static {
        PMUEvents.register(new Ivytown());
    }

    {
		eventMap.put("L2_RQSTS.DEMAND_DATA_RD_HIT", new PMUEvent("Demand Data Read requests that hit L2 cache.", "0x24", "0,1,2,3", "0x1", "L2_RQSTS.DEMAND_DATA_RD_HIT", "200003", "Demand Data Read requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_DEMAND_DATA_RD", new PMUEvent("Counts any demand and L1 HW prefetch data load requests to L2.", "0x24", "0,1,2,3", "0x3", "L2_RQSTS.ALL_DEMAND_DATA_RD", "200003", "Demand Data Read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_HIT", new PMUEvent("RFO requests that hit L2 cache.", "0x24", "0,1,2,3", "0x4", "L2_RQSTS.RFO_HIT", "200003", "RFO requests that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.RFO_MISS", new PMUEvent("Counts the number of store RFO requests that miss the L2 cache.", "0x24", "0,1,2,3", "0x8", "L2_RQSTS.RFO_MISS", "200003", "RFO requests that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_RFO", new PMUEvent("Counts all L2 store RFO requests.", "0x24", "0,1,2,3", "0xc", "L2_RQSTS.ALL_RFO", "200003", "RFO requests to L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_HIT", new PMUEvent("Number of instruction fetches that hit the L2 cache.", "0x24", "0,1,2,3", "0x10", "L2_RQSTS.CODE_RD_HIT", "200003", "L2 cache hits when fetching instructions, code reads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.CODE_RD_MISS", new PMUEvent("Number of instruction fetches that missed the L2 cache.", "0x24", "0,1,2,3", "0x20", "L2_RQSTS.CODE_RD_MISS", "200003", "L2 cache misses when fetching instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_CODE_RD", new PMUEvent("Counts all L2 code requests.", "0x24", "0,1,2,3", "0x30", "L2_RQSTS.ALL_CODE_RD", "200003", "L2 code requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.PF_HIT", new PMUEvent("Counts all L2 HW prefetcher requests that hit L2.", "0x24", "0,1,2,3", "0x40", "L2_RQSTS.PF_HIT", "200003", "Requests from the L2 hardware prefetchers that hit L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.PF_MISS", new PMUEvent("Counts all L2 HW prefetcher requests that missed L2.", "0x24", "0,1,2,3", "0x80", "L2_RQSTS.PF_MISS", "200003", "Requests from the L2 hardware prefetchers that miss L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_RQSTS.ALL_PF", new PMUEvent("Counts all L2 HW prefetcher requests.", "0x24", "0,1,2,3", "0xc0", "L2_RQSTS.ALL_PF", "200003", "Requests from L2 hardware prefetchers", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_STORE_LOCK_RQSTS.MISS", new PMUEvent("RFOs that miss cache lines.", "0x27", "0,1,2,3", "0x1", "L2_STORE_LOCK_RQSTS.MISS", "200003", "RFOs that miss cache lines", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_STORE_LOCK_RQSTS.HIT_M", new PMUEvent("RFOs that hit cache lines in M state.", "0x27", "0,1,2,3", "0x8", "L2_STORE_LOCK_RQSTS.HIT_M", "200003", "RFOs that hit cache lines in M state", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_STORE_LOCK_RQSTS.ALL", new PMUEvent("RFOs that access cache lines in any state.", "0x27", "0,1,2,3", "0xf", "L2_STORE_LOCK_RQSTS.ALL", "200003", "RFOs that access cache lines in any state", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.MISS", new PMUEvent("Not rejected writebacks that missed LLC.", "0x28", "0,1,2,3", "0x1", "L2_L1D_WB_RQSTS.MISS", "200003", "Count the number of modified Lines evicted from L1 and missed L2. (Non-rejected WBs from the DCU.)", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.HIT_E", new PMUEvent("Not rejected writebacks from L1D to L2 cache lines in E state.", "0x28", "0,1,2,3", "0x4", "L2_L1D_WB_RQSTS.HIT_E", "200003", "Not rejected writebacks from L1D to L2 cache lines in E state", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.HIT_M", new PMUEvent("Not rejected writebacks from L1D to L2 cache lines in M state.", "0x28", "0,1,2,3", "0x8", "L2_L1D_WB_RQSTS.HIT_M", "200003", "Not rejected writebacks from L1D to L2 cache lines in M state", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_L1D_WB_RQSTS.ALL", new PMUEvent(null, "0x28", "0,1,2,3", "0xf", "L2_L1D_WB_RQSTS.ALL", "200003", "Not rejected writebacks from L1D to L2 cache lines in any state.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.MISS", new PMUEvent("This event counts each cache miss condition for references to the last level cache.", "0x2E", "0,1,2,3", "0x41", "LONGEST_LAT_CACHE.MISS", "100003", "Core-originated cacheable demand requests missed LLC", "0,1,2,3,4,5,6,7"));
		eventMap.put("LONGEST_LAT_CACHE.REFERENCE", new PMUEvent("This event counts requests originating from the core that reference a cache line in the last level cache.", "0x2E", "0,1,2,3", "0x4f", "LONGEST_LAT_CACHE.REFERENCE", "100003", "Core-originated cacheable demand requests that refer to LLC", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D_PEND_MISS.PENDING", new PMUEvent("Increments the number of outstanding L1D misses every cycle. Set Cmask = 1 and Edge =1 to count occurrences.", "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING", "2000003", "L1D miss oustandings duration in cycles", "2"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES", new PMUEvent(null, "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES", "2000003", "Cycles with L1D load Misses outstanding.", "2"));
		eventMap.put("L1D_PEND_MISS.PENDING_CYCLES_ANY", new PMUEvent("Cycles with L1D load Misses outstanding from any thread on physical core.", "0x48", "2", "0x1", "L1D_PEND_MISS.PENDING_CYCLES_ANY", "2000003", "Cycles with L1D load Misses outstanding from any thread on physical core", "2"));
		eventMap.put("L1D_PEND_MISS.FB_FULL", new PMUEvent("Cycles a demand request was blocked due to Fill Buffers inavailability.", "0x48", "0,1,2,3", "0x2", "L1D_PEND_MISS.FB_FULL", "2000003", "Cycles a demand request was blocked due to Fill Buffers inavailability", "0,1,2,3,4,5,6,7"));
		eventMap.put("L1D.REPLACEMENT", new PMUEvent("Counts the number of lines brought into the L1 data cache.", "0x51", "0,1,2,3", "0x1", "L1D.REPLACEMENT", "2000003", "L1D data line replacements", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", new PMUEvent("Offcore outstanding Demand Data Read transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD", "2000003", "Offcore outstanding Demand Data Read transactions in uncore queue.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", new PMUEvent("Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore.", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD", "2000003", "Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", new PMUEvent("Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue.", "0x60", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6", "2000003", "Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", new PMUEvent("Offcore outstanding Demand Code Read transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x2", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD", "2000003", "Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_CODE_RD", new PMUEvent("Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle.", "0x60", "0,1,2,3", "0x2", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_CODE_RD", "2000003", "Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", new PMUEvent("Offcore outstanding RFO store transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO", "2000003", "Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", new PMUEvent("Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle.", "0x60", "0,1,2,3", "0x4", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO", "2000003", "Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", new PMUEvent("Offcore outstanding cacheable data read transactions in SQ to uncore. Set Cmask=1 to count cycles.", "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD", "2000003", "Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", new PMUEvent("Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore.", "0x60", "0,1,2,3", "0x8", "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD", "2000003", "Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOCK_CYCLES.CACHE_LOCK_DURATION", new PMUEvent("Cycles in which the L1D is locked.", "0x63", "0,1,2,3", "0x2", "LOCK_CYCLES.CACHE_LOCK_DURATION", "2000003", "Cycles when L1D is locked", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_DATA_RD", new PMUEvent("Demand data read requests sent to uncore.", "0xB0", "0,1,2,3", "0x1", "OFFCORE_REQUESTS.DEMAND_DATA_RD", "100003", "Demand Data Read requests sent to uncore", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_CODE_RD", new PMUEvent("Demand code read requests sent to uncore.", "0xB0", "0,1,2,3", "0x2", "OFFCORE_REQUESTS.DEMAND_CODE_RD", "100003", "Cacheable and noncachaeble code read requests", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.DEMAND_RFO", new PMUEvent("Demand RFO read requests sent to uncore, including regular RFOs, locks, ItoM.", "0xB0", "0,1,2,3", "0x4", "OFFCORE_REQUESTS.DEMAND_RFO", "100003", "Demand RFO requests including regular RFOs, locks, ItoM", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS.ALL_DATA_RD", new PMUEvent("Data read requests sent to uncore (demand and prefetch).", "0xB0", "0,1,2,3", "0x8", "OFFCORE_REQUESTS.ALL_DATA_RD", "100003", "Demand and prefetch data reads", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_REQUESTS_BUFFER.SQ_FULL", new PMUEvent("Cases when offcore requests buffer cannot take more entries for core.", "0xB2", "0,1,2,3", "0x1", "OFFCORE_REQUESTS_BUFFER.SQ_FULL", "2000003", "Cases when offcore requests buffer cannot take more entries for core", "0,1,2,3,4,5,6,7"));
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x11", "MEM_UOPS_RETIRED.STLB_MISS_LOADS", "100003", "Retired load uops that miss the STLB. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.STLB_MISS_STORES", new PMUEvent(null, "0xD0", "0,1,2,3", "0x12", "MEM_UOPS_RETIRED.STLB_MISS_STORES", "100003", "Retired store uops that miss the STLB. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.LOCK_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x21", "MEM_UOPS_RETIRED.LOCK_LOADS", "100007", "Retired load uops with locked access. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x41", "MEM_UOPS_RETIRED.SPLIT_LOADS", "100003", "Retired load uops that split across a cacheline boundary. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.SPLIT_STORES", new PMUEvent(null, "0xD0", "0,1,2,3", "0x42", "MEM_UOPS_RETIRED.SPLIT_STORES", "100003", "Retired store uops that split across a cacheline boundary. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_LOADS", new PMUEvent(null, "0xD0", "0,1,2,3", "0x81", "MEM_UOPS_RETIRED.ALL_LOADS", "2000003", "All retired load uops. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_UOPS_RETIRED.ALL_STORES", new PMUEvent(null, "0xD0", "0,1,2,3", "0x82", "MEM_UOPS_RETIRED.ALL_STORES", "2000003", "All retired store uops. (Precise Event)", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_HIT", new PMUEvent(null, "0xD1", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_RETIRED.L1_HIT", "2000003", "Retired load uops with L1 cache hits as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_HIT", new PMUEvent(null, "0xD1", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_RETIRED.L2_HIT", "100003", "Retired load uops with L2 cache hits as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.LLC_HIT", new PMUEvent(null, "0xD1", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_RETIRED.LLC_HIT", "50021", "Retired load uops which data sources were data hits in LLC without snoops required.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L1_MISS", new PMUEvent(null, "0xD1", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_RETIRED.L1_MISS", "100003", "Retired load uops which data sources following L1 data-cache miss.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.L2_MISS", new PMUEvent(null, "0xD1", "0,1,2,3", "0x10", "MEM_LOAD_UOPS_RETIRED.L2_MISS", "50021", "Retired load uops with L2 cache misses as data sources.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.LLC_MISS", new PMUEvent(null, "0xD1", "0,1,2,3", "0x20", "MEM_LOAD_UOPS_RETIRED.LLC_MISS", "100007", "Miss in last-level (L3) cache. Excludes Unknown data-source.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_RETIRED.HIT_LFB", new PMUEvent(null, "0xD1", "0,1,2,3", "0x40", "MEM_LOAD_UOPS_RETIRED.HIT_LFB", "100003", "Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS", new PMUEvent(null, "0xD2", "0,1,2,3", "0x1", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS", "20011", "Retired load uops which data sources were LLC hit and cross-core snoop missed in on-pkg core cache.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT", new PMUEvent(null, "0xD2", "0,1,2,3", "0x2", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT", "20011", "Retired load uops which data sources were LLC and cross-core snoop hits in on-pkg core cache.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM", new PMUEvent(null, "0xD2", "0,1,2,3", "0x4", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM", "20011", "Retired load uops which data sources were HitM responses from shared LLC.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE", new PMUEvent(null, "0xD2", "0,1,2,3", "0x8", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE", "100003", "Retired load uops which data sources were hits in LLC without snoops required.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x3", "MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM", "100007", "Retired load uops whose data source was local DRAM (Snoop not needed, Snoop Miss, or Snoop Hit data not forwarded).", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_DRAM", new PMUEvent(null, "0xD3", "0,1,2,3", "0xc", "MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_DRAM", "100007", "Retired load uops whose data source was remote DRAM (Snoop not needed, Snoop Miss, or Snoop Hit data not forwarded).", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_HITM", new PMUEvent(null, "0xD3", "0,1,2,3", "0x10", "MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_HITM", "100007", "Remote cache HITM.", "0,1,2,3"));
		eventMap.put("MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_FWD", new PMUEvent(null, "0xD3", "0,1,2,3", "0x20", "MEM_LOAD_UOPS_LLC_MISS_RETIRED.REMOTE_FWD", "100007", "Data forwarded from remote cache.", "0,1,2,3"));
		eventMap.put("L2_TRANS.DEMAND_DATA_RD", new PMUEvent("Demand Data Read requests that access L2 cache.", "0xF0", "0,1,2,3", "0x1", "L2_TRANS.DEMAND_DATA_RD", "200003", "Demand Data Read requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.RFO", new PMUEvent("RFO requests that access L2 cache.", "0xF0", "0,1,2,3", "0x2", "L2_TRANS.RFO", "200003", "RFO requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.CODE_RD", new PMUEvent("L2 cache accesses when fetching instructions.", "0xF0", "0,1,2,3", "0x4", "L2_TRANS.CODE_RD", "200003", "L2 cache accesses when fetching instructions", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_PF", new PMUEvent("Any MLC or LLC HW prefetch accessing L2, including rejects.", "0xF0", "0,1,2,3", "0x8", "L2_TRANS.ALL_PF", "200003", "L2 or LLC HW prefetches that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L1D_WB", new PMUEvent("L1D writebacks that access L2 cache.", "0xF0", "0,1,2,3", "0x10", "L2_TRANS.L1D_WB", "200003", "L1D writebacks that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_FILL", new PMUEvent("L2 fill requests that access L2 cache.", "0xF0", "0,1,2,3", "0x20", "L2_TRANS.L2_FILL", "200003", "L2 fill requests that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.L2_WB", new PMUEvent("L2 writebacks that access L2 cache.", "0xF0", "0,1,2,3", "0x40", "L2_TRANS.L2_WB", "200003", "L2 writebacks that access L2 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_TRANS.ALL_REQUESTS", new PMUEvent("Transactions accessing L2 pipe.", "0xF0", "0,1,2,3", "0x80", "L2_TRANS.ALL_REQUESTS", "200003", "Transactions accessing L2 pipe", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.I", new PMUEvent("L2 cache lines in I state filling L2.", "0xF1", "0,1,2,3", "0x1", "L2_LINES_IN.I", "100003", "L2 cache lines in I state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.S", new PMUEvent("L2 cache lines in S state filling L2.", "0xF1", "0,1,2,3", "0x2", "L2_LINES_IN.S", "100003", "L2 cache lines in S state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.E", new PMUEvent("L2 cache lines in E state filling L2.", "0xF1", "0,1,2,3", "0x4", "L2_LINES_IN.E", "100003", "L2 cache lines in E state filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_IN.ALL", new PMUEvent("L2 cache lines filling L2.", "0xF1", "0,1,2,3", "0x7", "L2_LINES_IN.ALL", "100003", "L2 cache lines filling L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DEMAND_CLEAN", new PMUEvent("Clean L2 cache lines evicted by demand.", "0xF2", "0,1,2,3", "0x1", "L2_LINES_OUT.DEMAND_CLEAN", "100003", "Clean L2 cache lines evicted by demand", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DEMAND_DIRTY", new PMUEvent("Dirty L2 cache lines evicted by demand.", "0xF2", "0,1,2,3", "0x2", "L2_LINES_OUT.DEMAND_DIRTY", "100003", "Dirty L2 cache lines evicted by demand", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.PF_CLEAN", new PMUEvent("Clean L2 cache lines evicted by the MLC prefetcher.", "0xF2", "0,1,2,3", "0x4", "L2_LINES_OUT.PF_CLEAN", "100003", "Clean L2 cache lines evicted by L2 prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.PF_DIRTY", new PMUEvent("Dirty L2 cache lines evicted by the MLC prefetcher.", "0xF2", "0,1,2,3", "0x8", "L2_LINES_OUT.PF_DIRTY", "100003", "Dirty L2 cache lines evicted by L2 prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("L2_LINES_OUT.DIRTY_ALL", new PMUEvent("Dirty L2 cache lines filling the L2.", "0xF2", "0,1,2,3", "0xa", "L2_LINES_OUT.DIRTY_ALL", "100003", "Dirty L2 cache lines filling the L2", "0,1,2,3,4,5,6,7"));
		eventMap.put("SQ_MISC.SPLIT_LOCK", new PMUEvent(null, "0xF4", "0,1,2,3", "0x10", "SQ_MISC.SPLIT_LOCK", "100003", "Split locks in SQ", "0,1,2,3,4,5,6,7"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts demand & prefetch data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts demand & prefetch data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts demand & prefetch data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts demand & prefetch data reads that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all prefetch data reads that hit the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_PF_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts prefetch data reads that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.ANY_RESPONSE", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_HIT.SNOOP_MISS", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.COREWB.ANY_RESPONSE", "100003", "Counts all writebacks from the core to the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all demand code reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all demand data reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts demand data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts demand data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts demand data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts demand data reads that hit in the LLC and sibling core snoop returned a clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts demand data writes (RFOs) that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.LRU_HINTS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.LRU_HINTS", "100003", "Counts L2 hints sent to LLC to keep a line from being evicted out of the core caches", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.OTHER.PORTIO_MMIO_UC", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.OTHER.PORTIO_MMIO_UC", "100003", "Counts miscellaneous accesses that include port i/o, MMIO and uncacheable memory accesses", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to L2) code reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoops sent to sibling cores return clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) code reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HIT_OTHER_CORE_NO_FWD", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HITM_OTHER_CORE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.HITM_OTHER_CORE", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.NO_SNOOP_NEEDED", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.SNOOP_MISS", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_HIT.SNOOP_MISS", "100003", "Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.SPLIT_LOCK_UC_LOCK.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.SPLIT_LOCK_UC_LOCK.ANY_RESPONSE", "100003", "Counts requests where the address of an atomic lock instruction spans a cache line boundary or the lock instruction is executed on uncacheable address", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.STREAMING_STORES.ANY_RESPONSE", "100003", "Counts non-temporal stores", "0,1,2,3"));
		eventMap.put("FP_COMP_OPS_EXE.X87", new PMUEvent("Counts number of X87 uops executed.", "0x10", "0,1,2,3", "0x1", "FP_COMP_OPS_EXE.X87", "2000003", "Number of FP Computational Uops Executed this cycle. The number of FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS, integer DIVs, and IDIVs. This event does not distinguish an FADD used in the middle of a transcendental flow from a s", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE", new PMUEvent("Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle.", "0x10", "0,1,2,3", "0x10", "FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE", "2000003", "Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE", new PMUEvent("Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle.", "0x10", "0,1,2,3", "0x20", "FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE", "2000003", "Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_PACKED_SINGLE", new PMUEvent("Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle.", "0x10", "0,1,2,3", "0x40", "FP_COMP_OPS_EXE.SSE_PACKED_SINGLE", "2000003", "Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE", new PMUEvent("Counts number of SSE* or AVX-128 double precision FP scalar uops executed.", "0x10", "0,1,2,3", "0x80", "FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE", "2000003", "Number of SSE* or AVX-128 FP Computational scalar double-precision uops issued this cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("SIMD_FP_256.PACKED_SINGLE", new PMUEvent("Counts 256-bit packed single-precision floating-point instructions.", "0x11", "0,1,2,3", "0x1", "SIMD_FP_256.PACKED_SINGLE", "2000003", "number of GSSE-256 Computational FP single precision uops issued this cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("SIMD_FP_256.PACKED_DOUBLE", new PMUEvent("Counts 256-bit packed double-precision floating-point instructions.", "0x11", "0,1,2,3", "0x2", "SIMD_FP_256.PACKED_DOUBLE", "2000003", "number of AVX-256 Computational FP double precision uops issued this cycle", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.AVX_STORE", new PMUEvent("Number of assists associated with 256-bit AVX store operations.", "0xC1", "0,1,2,3", "0x8", "OTHER_ASSISTS.AVX_STORE", "100003", "Number of GSSE memory assist for stores. GSSE microcode assist is being invoked whenever the hardware is unable to properly handle GSSE-256b operations.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.AVX_TO_SSE", new PMUEvent(null, "0xC1", "0,1,2,3", "0x10", "OTHER_ASSISTS.AVX_TO_SSE", "100003", "Number of transitions from AVX-256 to legacy SSE when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("OTHER_ASSISTS.SSE_TO_AVX", new PMUEvent(null, "0xC1", "0,1,2,3", "0x20", "OTHER_ASSISTS.SSE_TO_AVX", "100003", "Number of transitions from SSE to AVX-256 when penalty applicable.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.X87_OUTPUT", new PMUEvent("Number of X87 FP assists due to output values.", "0xCA", "0,1,2,3", "0x2", "FP_ASSIST.X87_OUTPUT", "100003", "Number of X87 assists due to output value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.X87_INPUT", new PMUEvent("Number of X87 FP assists due to input values.", "0xCA", "0,1,2,3", "0x4", "FP_ASSIST.X87_INPUT", "100003", "Number of X87 assists due to input value.", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_OUTPUT", new PMUEvent("Number of SIMD FP assists due to output values.", "0xCA", "0,1,2,3", "0x8", "FP_ASSIST.SIMD_OUTPUT", "100003", "Number of SIMD FP assists due to Output values", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.SIMD_INPUT", new PMUEvent("Number of SIMD FP assists due to input values.", "0xCA", "0,1,2,3", "0x10", "FP_ASSIST.SIMD_INPUT", "100003", "Number of SIMD FP assists due to input values", "0,1,2,3,4,5,6,7"));
		eventMap.put("FP_ASSIST.ANY", new PMUEvent("Cycles with any input/output SSE* or FP assists.", "0xCA", "0,1,2,3", "0x1e", "FP_ASSIST.ANY", "100003", "Cycles with any input/output SSE or FP assist", "0,1,2,3"));
		eventMap.put("IDQ.EMPTY", new PMUEvent("Counts cycles the IDQ is empty.", "0x79", "0,1,2,3", "0x2", "IDQ.EMPTY", "2000003", "Instruction Decode Queue (IDQ) empty cycles", "0,1,2,3"));
		eventMap.put("IDQ.MITE_UOPS", new PMUEvent("Increment each cycle # of uops delivered to IDQ from MITE path. Set Cmask = 1 to count cycles.", "0x79", "0,1,2,3", "0x4", "IDQ.MITE_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_CYCLES", new PMUEvent("Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path.", "0x79", "0,1,2,3", "0x4", "IDQ.MITE_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_UOPS", new PMUEvent("Increment each cycle. # of uops delivered to IDQ from DSB path. Set Cmask = 1 to count cycles.", "0x79", "0,1,2,3", "0x8", "IDQ.DSB_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.DSB_CYCLES", new PMUEvent("Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path.", "0x79", "0,1,2,3", "0x8", "IDQ.DSB_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_UOPS", new PMUEvent("Increment each cycle # of uops delivered to IDQ when MS_busy by DSB. Set Cmask = 1 to count cycles. Add Edge=1 to count # of delivery.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_UOPS", "2000003", "Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_CYCLES", new PMUEvent("Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_CYCLES", "2000003", "Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_DSB_OCCUR", new PMUEvent("Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy.", "0x79", "0,1,2,3", "0x10", "IDQ.MS_DSB_OCCUR", "2000003", "Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_4_UOPS", new PMUEvent("Counts cycles DSB is delivered four uops. Set Cmask = 4.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_4_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_DSB_CYCLES_ANY_UOPS", new PMUEvent("Counts cycles DSB is delivered at least one uops. Set Cmask = 1.", "0x79", "0,1,2,3", "0x18", "IDQ.ALL_DSB_CYCLES_ANY_UOPS", "2000003", "Cycles Decode Stream Buffer (DSB) is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_MITE_UOPS", new PMUEvent("Increment each cycle # of uops delivered to IDQ when MS_busy by MITE. Set Cmask = 1 to count cycles.", "0x79", "0,1,2,3", "0x20", "IDQ.MS_MITE_UOPS", "2000003", "Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_4_UOPS", new PMUEvent("Counts cycles MITE is delivered four uops. Set Cmask = 4.", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_4_UOPS", "2000003", "Cycles MITE is delivering 4 Uops", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.ALL_MITE_CYCLES_ANY_UOPS", new PMUEvent("Counts cycles MITE is delivered at least one uops. Set Cmask = 1.", "0x79", "0,1,2,3", "0x24", "IDQ.ALL_MITE_CYCLES_ANY_UOPS", "2000003", "Cycles MITE is delivering any Uop", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_UOPS", new PMUEvent("Increment each cycle # of uops delivered to IDQ from MS by either DSB or MITE. Set Cmask = 1 to count cycles.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_CYCLES", new PMUEvent("Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_CYCLES", "2000003", "Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MS_SWITCHES", new PMUEvent("Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.", "0x79", "0,1,2,3", "0x30", "IDQ.MS_SWITCHES", "2000003", "Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ.MITE_ALL_UOPS", new PMUEvent("Number of uops delivered to IDQ from any path.", "0x79", "0,1,2,3", "0x3c", "IDQ.MITE_ALL_UOPS", "2000003", "Uops delivered to Instruction Decode Queue (IDQ) from MITE path", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.HIT", new PMUEvent("Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches.", "0x80", "0,1,2,3", "0x1", "ICACHE.HIT", "2000003", "Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.MISSES", new PMUEvent("Number of Instruction Cache, Streaming Buffer and Victim Cache Misses. Includes UC accesses.", "0x80", "0,1,2,3", "0x2", "ICACHE.MISSES", "200003", "Instruction cache, streaming buffer and victim cache misses", "0,1,2,3,4,5,6,7"));
		eventMap.put("ICACHE.IFETCH_STALL", new PMUEvent("Cycles where a code-fetch stalled due to L1 instruction-cache miss or an iTLB miss.", "0x80", "0,1,2,3", "0x4", "ICACHE.IFETCH_STALL", "2000003", "Cycles where a code-fetch stalled due to L1 instruction-cache miss or an iTLB miss", "0,1,2,3,4,5,6,7"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CORE", new PMUEvent("Count issue pipeline slots where no uop was delivered from the front end to the back end when there is no back-end stall.", "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CORE", "2000003", "Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE", "2000003", "Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE", "2000003", "Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE", "2000003", "Cycles with less than 2 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE", "2000003", "Cycles with less than 3 uops delivered by the front end.", "0,1,2,3"));
		eventMap.put("IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", new PMUEvent(null, "0x9C", "0,1,2,3", "0x1", "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK", "2000003", "Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.", "0,1,2,3"));
		eventMap.put("DSB2MITE_SWITCHES.COUNT", new PMUEvent("Number of DSB to MITE switches.", "0xAB", "0,1,2,3", "0x1", "DSB2MITE_SWITCHES.COUNT", "2000003", "Decode Stream Buffer (DSB)-to-MITE switches", "0,1,2,3,4,5,6,7"));
		eventMap.put("DSB2MITE_SWITCHES.PENALTY_CYCLES", new PMUEvent("Cycles DSB to MITE switches caused delay.", "0xAB", "0,1,2,3", "0x2", "DSB2MITE_SWITCHES.PENALTY_CYCLES", "2000003", "Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles", "0,1,2,3,4,5,6,7"));
		eventMap.put("DSB_FILL.EXCEED_DSB_LINES", new PMUEvent("DSB Fill encountered > 3 DSB lines.", "0xAC", "0,1,2,3", "0x8", "DSB_FILL.EXCEED_DSB_LINES", "2000003", "Cycles when Decode Stream Buffer (DSB) fill encounter more than 3 Decode Stream Buffer (DSB) lines", "0,1,2,3,4,5,6,7"));
		eventMap.put("MISALIGN_MEM_REF.LOADS", new PMUEvent("Speculative cache-line split load uops dispatched to L1D.", "0x05", "0,1,2,3", "0x1", "MISALIGN_MEM_REF.LOADS", "2000003", "Speculative cache line split load uops dispatched to L1 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("MISALIGN_MEM_REF.STORES", new PMUEvent("Speculative cache-line split Store-address uops dispatched to L1D.", "0x05", "0,1,2,3", "0x2", "MISALIGN_MEM_REF.STORES", "2000003", "Speculative cache line split STA uops dispatched to L1 cache", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MEMORY_ORDERING", new PMUEvent(null, "0xC3", "0,1,2,3", "0x2", "MACHINE_CLEARS.MEMORY_ORDERING", "100003", "Counts the number of machine clears due to memory order conflicts.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", new PMUEvent("Loads with latency value being above 4.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4", "100003", "Loads with latency value being above 4", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", new PMUEvent("Loads with latency value being above 8.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8", "50021", "Loads with latency value being above 8", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", new PMUEvent("Loads with latency value being above 16.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16", "20011", "Loads with latency value being above 16", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", new PMUEvent("Loads with latency value being above 32.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32", "100007", "Loads with latency value being above 32", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", new PMUEvent("Loads with latency value being above 64.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64", "2003", "Loads with latency value being above 64", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", new PMUEvent("Loads with latency value being above 128.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128", "1009", "Loads with latency value being above 128", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", new PMUEvent("Loads with latency value being above 256.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256", "503", "Loads with latency value being above 256", "3"));
		eventMap.put("MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", new PMUEvent("Loads with latency value being above 512.", "0xCD", "3", "0x1", "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512", "101", "Loads with latency value being above 512", "3"));
		eventMap.put("MEM_TRANS_RETIRED.PRECISE_STORE", new PMUEvent(null, "0xCD", "3", "0x2", "MEM_TRANS_RETIRED.PRECISE_STORE", "2000003", "Sample stores and collect precise store operation via PEBS record. PMC3 only.", "3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all demand & prefetch code reads that miss the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.REMOTE_DRAM", "100003", "Counts all demand & prefetch code reads that miss the LLC  and the data returned from remote dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all demand & prefetch code reads that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_DATA_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_DATA_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all demand & prefetch data reads that hits the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE", "100003", "Counts all data/code/rfo reads (demand & prefetch) that hit the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_MISS.LOCAL_DRAM", "100003", "Counts all data/code/rfo reads (demand & prefetch) that miss the LLC  and the data returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all data/code/rfo reads (demand & prefetch) that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HITM", "100003", "Counts all data/code/rfo reads (demand & prefetch) that miss the LLC  the data is found in M state in remote cache and forwarded from there", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all demand code reads that miss the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.LOCAL_DRAM", "100003", "Counts all demand code reads that miss the LLC  and the data returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_DRAM", "100003", "Counts all demand code reads that miss the LLC  and the data returned from remote dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts all demand code reads that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_CODE_RD.LLC_MISS.REMOTE_HITM", "100003", "Counts all demand code reads that miss the LLC  the data is found in M state in remote cache and forwarded from there", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_DRAM", "100003", "Counts demand data reads that miss the LLC  and the data returned from remote & local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts demand data reads that miss in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.LOCAL_DRAM", "100003", "Counts demand data reads that miss the LLC  and the data returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_DRAM", "100003", "Counts demand data reads that miss the LLC  and the data returned from remote dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts demand data reads that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_DATA_RD.LLC_MISS.REMOTE_HITM", "100003", "Counts demand data reads that miss the LLC  the data is found in M state in remote cache and forwarded from there", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.DEMAND_RFO.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.DEMAND_RFO.LLC_MISS.REMOTE_HITM", "100003", "Counts all demand data writes (RFOs) that miss the LLC and the data is found in M state in remote cache and forwarded from there.", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_CODE_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to L2) code reads that miss the LLC  and the data returned from remote & local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_DRAM", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data returned from remote & local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to L2) data reads that miss in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.LOCAL_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.LOCAL_DRAM", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data returned from local dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_DRAM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_DRAM", "100003", "Counts prefetch (that bring data to L2) data reads  that miss the LLC  and the data returned from remote dram", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HIT_FORWARD", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data forwarded from remote cache", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HITM", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_L2_DATA_RD.LLC_MISS.REMOTE_HITM", "100003", "Counts prefetch (that bring data to L2) data reads that miss the LLC  the data is found in M state in remote cache and forwarded from there", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_CODE_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts all prefetch (that bring data to LLC only) code reads that miss in the LLC", "0,1,2,3"));
		eventMap.put("OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_MISS.ANY_RESPONSE", new PMUEvent(null, "0xB7, 0xBB", "0,1,2,3", "0x1", "OFFCORE_RESPONSE.PF_LLC_DATA_RD.LLC_MISS.ANY_RESPONSE", "100003", "Counts prefetch (that bring data to LLC only) data reads that miss in the LLC", "0,1,2,3"));
		eventMap.put("CPL_CYCLES.RING0", new PMUEvent("Unhalted core cycles when the thread is in ring 0.", "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0", "2000003", "Unhalted core cycles when the thread is in ring 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING0_TRANS", new PMUEvent("Number of intervals between processor halts while thread is in ring 0.", "0x5C", "0,1,2,3", "0x1", "CPL_CYCLES.RING0_TRANS", "100007", "Number of intervals between processor halts while thread is in ring 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPL_CYCLES.RING123", new PMUEvent("Unhalted core cycles when the thread is not in ring 0.", "0x5C", "0,1,2,3", "0x2", "CPL_CYCLES.RING123", "2000003", "Unhalted core cycles when thread is in rings 1, 2, or 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", new PMUEvent("Cycles in which the L1D and L2 are locked, due to a UC lock or split lock.", "0x63", "0,1,2,3", "0x1", "LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION", "2000003", "Cycles when L1 and L2 are locked due to UC or split lock", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY", new PMUEvent(null, "0x00", "Fixed counter 0", "0x1", "INST_RETIRED.ANY", "2000003", "Instructions retired from execution.", "Fixed counter 0"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD", new PMUEvent(null, "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD", "2000003", "Core cycles when the thread is not in halt state.", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_ANY", new PMUEvent("Core cycles when at least one thread on the physical core is not in halt state.", "0x00", "Fixed counter 1", "0x2", "CPU_CLK_UNHALTED.THREAD_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state", "Fixed counter 1"));
		eventMap.put("CPU_CLK_UNHALTED.REF_TSC", new PMUEvent(null, "0x00", "Fixed counter 2", "0x3", "CPU_CLK_UNHALTED.REF_TSC", "2000003", "Reference cycles when the core is not in halt state.", "Fixed counter 2"));
		eventMap.put("LD_BLOCKS.STORE_FORWARD", new PMUEvent("Loads blocked by overlapping with store buffer that cannot be forwarded.", "0x03", "0,1,2,3", "0x2", "LD_BLOCKS.STORE_FORWARD", "100003", "Cases when loads get true Block-on-Store blocking code preventing store forwarding", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS.NO_SR", new PMUEvent("The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.", "0x03", "0,1,2,3", "0x8", "LD_BLOCKS.NO_SR", "100003", "This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", new PMUEvent("False dependencies in MOB due to partial compare on address.", "0x07", "0,1,2,3", "0x1", "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS", "100003", "False dependencies in MOB due to partial compare on address", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES", new PMUEvent(null, "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES", "2000003", "Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc.)", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_STALLS_COUNT", new PMUEvent(null, "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_STALLS_COUNT", "2000003", "Number of occurences waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc.)", "0,1,2,3,4,5,6,7"));
		eventMap.put("INT_MISC.RECOVERY_CYCLES_ANY", new PMUEvent(null, "0x0D", "0,1,2,3", "0x3", "INT_MISC.RECOVERY_CYCLES_ANY", "2000003", "Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke).", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.ANY", new PMUEvent("Increments each cycle the # of Uops issued by the RAT to RS. Set Cmask = 1, Inv = 1, Any= 1to count stalled cycles of this core.", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.ANY", "2000003", "Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS)", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.STALL_CYCLES", new PMUEvent("Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread.", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread", "0,1,2,3"));
		eventMap.put("UOPS_ISSUED.CORE_STALL_CYCLES", new PMUEvent("Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads.", "0x0E", "0,1,2,3", "0x1", "UOPS_ISSUED.CORE_STALL_CYCLES", "2000003", "Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads", "0,1,2,3"));
		eventMap.put("UOPS_ISSUED.FLAGS_MERGE", new PMUEvent("Number of flags-merge uops allocated. Such uops adds delay.", "0x0E", "0,1,2,3", "0x10", "UOPS_ISSUED.FLAGS_MERGE", "2000003", "Number of flags-merge uops being allocated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.SLOW_LEA", new PMUEvent("Number of slow LEA or similar uops allocated. Such uop has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.", "0x0E", "0,1,2,3", "0x20", "UOPS_ISSUED.SLOW_LEA", "2000003", "Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_ISSUED.SINGLE_MUL", new PMUEvent("Number of multiply packed/scalar single precision uops allocated.", "0x0E", "0,1,2,3", "0x40", "UOPS_ISSUED.SINGLE_MUL", "2000003", "Number of Multiply packed/scalar single precision uops allocated", "0,1,2,3,4,5,6,7"));
		eventMap.put("ARITH.FPU_DIV_ACTIVE", new PMUEvent("Cycles that the divider is active, includes INT and FP. Set 'edge =1, cmask=1' to count the number of divides.", "0x14", "0,1,2,3", "0x1", "ARITH.FPU_DIV_ACTIVE", "2000003", "Cycles when divider is busy executing divide operations", "0,1,2,3,4,5,6,7"));
		eventMap.put("ARITH.FPU_DIV", new PMUEvent("Divide operations executed.", "0x14", "0,1,2,3", "0x4", "ARITH.FPU_DIV", "100003", "Divide operations executed", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P", new PMUEvent("Counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling.", "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P", "2000003", "Thread cycles when thread is not in halt state", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.THREAD_P_ANY", new PMUEvent("Core cycles when at least one thread on the physical core is not in halt state.", "0x3C", "0,1,2,3", "0x0", "CPU_CLK_UNHALTED.THREAD_P_ANY", "2000003", "Core cycles when at least one thread on the physical core is not in halt state", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK", new PMUEvent("Increments at the frequency of XCLK (100 MHz) when not halted.", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted. (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK", new PMUEvent("Reference cycles when the thread is unhalted. (counts at 100 MHz rate)", "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK", "2000003", "Reference cycles when the thread is unhalted (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_UNHALTED.REF_XCLK_ANY", new PMUEvent(null, "0x3C", "0,1,2,3", "0x1", "CPU_CLK_UNHALTED.REF_XCLK_ANY", "2000003", "Reference cycles when the at least one thread on the physical core is unhalted. (counts at 100 MHz rate)", "0,1,2,3,4,5,6,7"));
		eventMap.put("CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other is halted.", "0,1,2,3"));
		eventMap.put("CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", new PMUEvent(null, "0x3C", "0,1,2,3", "0x2", "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE", "2000003", "Count XClk pulses when this thread is unhalted and the other thread is halted.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.SW_PF", new PMUEvent("Non-SW-prefetch load dispatches that hit fill buffer allocated for S/W prefetch.", "0x4C", "0,1,2,3", "0x1", "LOAD_HIT_PRE.SW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for software prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("LOAD_HIT_PRE.HW_PF", new PMUEvent("Non-SW-prefetch load dispatches that hit fill buffer allocated for H/W prefetch.", "0x4C", "0,1,2,3", "0x2", "LOAD_HIT_PRE.HW_PF", "100003", "Not software-prefetch load dispatches that hit FB allocated for hardware prefetch", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.INT_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x1", "MOVE_ELIMINATION.INT_ELIMINATED", "1000003", "Number of integer Move Elimination candidate uops that were eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.SIMD_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x2", "MOVE_ELIMINATION.SIMD_ELIMINATED", "1000003", "Number of SIMD Move Elimination candidate uops that were eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.INT_NOT_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x4", "MOVE_ELIMINATION.INT_NOT_ELIMINATED", "1000003", "Number of integer Move Elimination candidate uops that were not eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MOVE_ELIMINATION.SIMD_NOT_ELIMINATED", new PMUEvent(null, "0x58", "0,1,2,3", "0x8", "MOVE_ELIMINATION.SIMD_NOT_ELIMINATED", "1000003", "Number of SIMD Move Elimination candidate uops that were not eliminated.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_CYCLES", new PMUEvent("Cycles the RS is empty for the thread.", "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_CYCLES", "2000003", "Cycles when Reservation Station (RS) is empty for the thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("RS_EVENTS.EMPTY_END", new PMUEvent(null, "0x5E", "0,1,2,3", "0x1", "RS_EVENTS.EMPTY_END", "200003", "Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.LCP", new PMUEvent(null, "0x87", "0,1,2,3", "0x1", "ILD_STALL.LCP", "2000003", "Stalls caused by changing prefix length of the instruction.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ILD_STALL.IQ_FULL", new PMUEvent("Stall cycles due to IQ is full.", "0x87", "0,1,2,3", "0x4", "ILD_STALL.IQ_FULL", "2000003", "Stall cycles because IQ is full", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent("Not taken macro-conditional branches.", "0x88", "0,1,2,3", "0x41", "BR_INST_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken macro-conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_CONDITIONAL", new PMUEvent("Taken speculative and retired macro-conditional branches.", "0x88", "0,1,2,3", "0x81", "BR_INST_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired macro-conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_JUMP", new PMUEvent("Taken speculative and retired macro-conditional branch instructions excluding calls and indirects.", "0x88", "0,1,2,3", "0x82", "BR_INST_EXEC.TAKEN_DIRECT_JUMP", "200003", "Taken speculative and retired macro-conditional branch instructions excluding calls and indirects", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("Taken speculative and retired indirect branches excluding calls and returns.", "0x88", "0,1,2,3", "0x84", "BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", new PMUEvent("Taken speculative and retired indirect branches with return mnemonic.", "0x88", "0,1,2,3", "0x88", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_RETURN", "200003", "Taken speculative and retired indirect branches with return mnemonic", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", new PMUEvent("Taken speculative and retired direct near calls.", "0x88", "0,1,2,3", "0x90", "BR_INST_EXEC.TAKEN_DIRECT_NEAR_CALL", "200003", "Taken speculative and retired direct near calls", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent("Taken speculative and retired indirect calls.", "0x88", "0,1,2,3", "0xa0", "BR_INST_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired indirect calls", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_CONDITIONAL", new PMUEvent("Speculative and retired macro-conditional branches.", "0x88", "0,1,2,3", "0xc1", "BR_INST_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired macro-conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_JMP", new PMUEvent("Speculative and retired macro-unconditional branches excluding calls and indirects.", "0x88", "0,1,2,3", "0xc2", "BR_INST_EXEC.ALL_DIRECT_JMP", "200003", "Speculative and retired macro-unconditional branches excluding calls and indirects", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("Speculative and retired indirect branches excluding calls and returns.", "0x88", "0,1,2,3", "0xc4", "BR_INST_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Speculative and retired indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", new PMUEvent(null, "0x88", "0,1,2,3", "0xc8", "BR_INST_EXEC.ALL_INDIRECT_NEAR_RETURN", "200003", "Speculative and retired indirect return branches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", new PMUEvent("Speculative and retired direct near calls.", "0x88", "0,1,2,3", "0xd0", "BR_INST_EXEC.ALL_DIRECT_NEAR_CALL", "200003", "Speculative and retired direct near calls", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_EXEC.ALL_BRANCHES", new PMUEvent("Counts all near executed branches (not necessarily retired).", "0x88", "0,1,2,3", "0xff", "BR_INST_EXEC.ALL_BRANCHES", "200003", "Speculative and retired  branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.NONTAKEN_CONDITIONAL", new PMUEvent("Not taken speculative and retired mispredicted macro conditional branches.", "0x89", "0,1,2,3", "0x41", "BR_MISP_EXEC.NONTAKEN_CONDITIONAL", "200003", "Not taken speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_CONDITIONAL", new PMUEvent("Taken speculative and retired mispredicted macro conditional branches.", "0x89", "0,1,2,3", "0x81", "BR_MISP_EXEC.TAKEN_CONDITIONAL", "200003", "Taken speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("Taken speculative and retired mispredicted indirect branches excluding calls and returns.", "0x89", "0,1,2,3", "0x84", "BR_MISP_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET", "200003", "Taken speculative and retired mispredicted indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_RETURN_NEAR", new PMUEvent("Taken speculative and retired mispredicted indirect branches with return mnemonic.", "0x89", "0,1,2,3", "0x88", "BR_MISP_EXEC.TAKEN_RETURN_NEAR", "200003", "Taken speculative and retired mispredicted indirect branches with return mnemonic", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", new PMUEvent("Taken speculative and retired mispredicted indirect calls.", "0x89", "0,1,2,3", "0xa0", "BR_MISP_EXEC.TAKEN_INDIRECT_NEAR_CALL", "200003", "Taken speculative and retired mispredicted indirect calls", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_CONDITIONAL", new PMUEvent("Speculative and retired mispredicted macro conditional branches.", "0x89", "0,1,2,3", "0xc1", "BR_MISP_EXEC.ALL_CONDITIONAL", "200003", "Speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", new PMUEvent("Mispredicted indirect branches excluding calls and returns.", "0x89", "0,1,2,3", "0xc4", "BR_MISP_EXEC.ALL_INDIRECT_JUMP_NON_CALL_RET", "200003", "Mispredicted indirect branches excluding calls and returns", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_EXEC.ALL_BRANCHES", new PMUEvent("Counts all near executed branches (not necessarily retired).", "0x89", "0,1,2,3", "0xff", "BR_MISP_EXEC.ALL_BRANCHES", "200003", "Speculative and retired mispredicted macro conditional branches", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_0", new PMUEvent("Cycles which a Uop is dispatched on port 0.", "0xA1", "0,1,2,3", "0x1", "UOPS_DISPATCHED_PORT.PORT_0", "2000003", "Cycles per thread when uops are dispatched to port 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_0_CORE", new PMUEvent("Cycles per core when uops are dispatched to port 0.", "0xA1", "0,1,2,3", "0x1", "UOPS_DISPATCHED_PORT.PORT_0_CORE", "2000003", "Cycles per core when uops are dispatched to port 0", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_1", new PMUEvent("Cycles which a Uop is dispatched on port 1.", "0xA1", "0,1,2,3", "0x2", "UOPS_DISPATCHED_PORT.PORT_1", "2000003", "Cycles per thread when uops are dispatched to port 1", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_1_CORE", new PMUEvent("Cycles per core when uops are dispatched to port 1.", "0xA1", "0,1,2,3", "0x2", "UOPS_DISPATCHED_PORT.PORT_1_CORE", "2000003", "Cycles per core when uops are dispatched to port 1", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_2", new PMUEvent("Cycles which a Uop is dispatched on port 2.", "0xA1", "0,1,2,3", "0xc", "UOPS_DISPATCHED_PORT.PORT_2", "2000003", "Cycles per thread when load or STA uops are dispatched to port 2", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_2_CORE", new PMUEvent(null, "0xA1", "0,1,2,3", "0xc", "UOPS_DISPATCHED_PORT.PORT_2_CORE", "2000003", "Uops dispatched to port 2, loads and stores per core (speculative and retired).", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_3", new PMUEvent("Cycles which a Uop is dispatched on port 3.", "0xA1", "0,1,2,3", "0x30", "UOPS_DISPATCHED_PORT.PORT_3", "2000003", "Cycles per thread when load or STA uops are dispatched to port 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_3_CORE", new PMUEvent("Cycles per core when load or STA uops are dispatched to port 3.", "0xA1", "0,1,2,3", "0x30", "UOPS_DISPATCHED_PORT.PORT_3_CORE", "2000003", "Cycles per core when load or STA uops are dispatched to port 3", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_4", new PMUEvent("Cycles which a Uop is dispatched on port 4.", "0xA1", "0,1,2,3", "0x40", "UOPS_DISPATCHED_PORT.PORT_4", "2000003", "Cycles per thread when uops are dispatched to port 4", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_4_CORE", new PMUEvent("Cycles per core when uops are dispatched to port 4.", "0xA1", "0,1,2,3", "0x40", "UOPS_DISPATCHED_PORT.PORT_4_CORE", "2000003", "Cycles per core when uops are dispatched to port 4", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_5", new PMUEvent("Cycles which a Uop is dispatched on port 5.", "0xA1", "0,1,2,3", "0x80", "UOPS_DISPATCHED_PORT.PORT_5", "2000003", "Cycles per thread when uops are dispatched to port 5", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_DISPATCHED_PORT.PORT_5_CORE", new PMUEvent("Cycles per core when uops are dispatched to port 5.", "0xA1", "0,1,2,3", "0x80", "UOPS_DISPATCHED_PORT.PORT_5_CORE", "2000003", "Cycles per core when uops are dispatched to port 5", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ANY", new PMUEvent("Cycles Allocation is stalled due to Resource Related reason.", "0xA2", "0,1,2,3", "0x1", "RESOURCE_STALLS.ANY", "2000003", "Resource-related stall cycles", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.RS", new PMUEvent(null, "0xA2", "0,1,2,3", "0x4", "RESOURCE_STALLS.RS", "2000003", "Cycles stalled due to no eligible RS entry available.", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.SB", new PMUEvent("Cycles stalled due to no store buffers available (not including draining form sync).", "0xA2", "0,1,2,3", "0x8", "RESOURCE_STALLS.SB", "2000003", "Cycles stalled due to no store buffers available. (not including draining form sync).", "0,1,2,3,4,5,6,7"));
		eventMap.put("RESOURCE_STALLS.ROB", new PMUEvent(null, "0xA2", "0,1,2,3", "0x10", "RESOURCE_STALLS.ROB", "2000003", "Cycles stalled due to re-order buffer full.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L2_PENDING", new PMUEvent("Cycles with pending L2 miss loads. Set AnyThread to count per core.", "0xA3", "0,1,2,3", "0x1", "CYCLE_ACTIVITY.CYCLES_L2_PENDING", "2000003", "Cycles with pending L2 cache miss loads.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L2_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x1", "CYCLE_ACTIVITY.CYCLES_L2_MISS", "2000003", "Cycles while L2 cache miss load* is outstanding.", "0,1,2,3,4,5,6,7"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_LDM_PENDING", new PMUEvent("Cycles with pending memory loads. Set AnyThread to count per core.", "0xA3", "0,1,2,3", "0x2", "CYCLE_ACTIVITY.CYCLES_LDM_PENDING", "2000003", "Cycles with pending memory loads.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_MEM_ANY", new PMUEvent(null, "0xA3", "0,1,2,3", "0x2", "CYCLE_ACTIVITY.CYCLES_MEM_ANY", "2000003", "Cycles while memory subsystem has an outstanding load.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_NO_EXECUTE", new PMUEvent("Total execution stalls.", "0xA3", "0,1,2,3", "0x4", "CYCLE_ACTIVITY.CYCLES_NO_EXECUTE", "2000003", "This event increments by 1 for every cycle where there was no execute for this thread.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_TOTAL", new PMUEvent(null, "0xA3", "0,1,2,3", "0x4", "CYCLE_ACTIVITY.STALLS_TOTAL", "2000003", "Total execution stalls.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L2_PENDING", new PMUEvent("Number of loads missed L2.", "0xA3", "0,1,2,3", "0x5", "CYCLE_ACTIVITY.STALLS_L2_PENDING", "2000003", "Execution stalls due to L2 cache misses.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L2_MISS", new PMUEvent(null, "0xA3", "0,1,2,3", "0x5", "CYCLE_ACTIVITY.STALLS_L2_MISS", "2000003", "Execution stalls while L2 cache miss load* is outstanding.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_LDM_PENDING", new PMUEvent(null, "0xA3", "0,1,2,3", "0x6", "CYCLE_ACTIVITY.STALLS_LDM_PENDING", "2000003", "Execution stalls due to memory subsystem.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_MEM_ANY", new PMUEvent(null, "0xA3", "0,1,2,3", "0x6", "CYCLE_ACTIVITY.STALLS_MEM_ANY", "2000003", "Execution stalls while memory subsystem has an outstanding load.", "0,1,2,3"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L1D_PENDING", new PMUEvent("Cycles with pending L1 cache miss loads. Set AnyThread to count per core.", "0xA3", "2", "0x8", "CYCLE_ACTIVITY.CYCLES_L1D_PENDING", "2000003", "Cycles with pending L1 cache miss loads.", "2"));
		eventMap.put("CYCLE_ACTIVITY.CYCLES_L1D_MISS", new PMUEvent(null, "0xA3", "2", "0x8", "CYCLE_ACTIVITY.CYCLES_L1D_MISS", "2000003", "Cycles while L1 cache miss demand load is outstanding.", "2"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L1D_PENDING", new PMUEvent("Execution stalls due to L1 data cache miss loads. Set Cmask=0CH.", "0xA3", "2", "0xc", "CYCLE_ACTIVITY.STALLS_L1D_PENDING", "2000003", "Execution stalls due to L1 data cache misses", "2"));
		eventMap.put("CYCLE_ACTIVITY.STALLS_L1D_MISS", new PMUEvent(null, "0xA3", "2", "0xc", "CYCLE_ACTIVITY.STALLS_L1D_MISS", "2000003", "Execution stalls while L1 cache miss demand load is outstanding.", "2"));
		eventMap.put("LSD.UOPS", new PMUEvent(null, "0xA8", "0,1,2,3", "0x1", "LSD.UOPS", "2000003", "Number of Uops delivered by the LSD.", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_ACTIVE", new PMUEvent("Cycles Uops delivered by the LSD, but didn't come from the decoder.", "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_ACTIVE", "2000003", "Cycles Uops delivered by the LSD, but didn't come from the decoder", "0,1,2,3,4,5,6,7"));
		eventMap.put("LSD.CYCLES_4_UOPS", new PMUEvent("Cycles 4 Uops delivered by the LSD, but didn't come from the decoder.", "0xA8", "0,1,2,3", "0x1", "LSD.CYCLES_4_UOPS", "2000003", "Cycles 4 Uops delivered by the LSD, but didn't come from the decoder", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.THREAD", new PMUEvent("Counts total number of uops to be executed per-thread each cycle. Set Cmask = 1, INV =1 to count stall cycles.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.THREAD", "2000003", "Counts the number of uops to be executed per-thread each cycle.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.STALL_CYCLES", new PMUEvent(null, "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.STALL_CYCLES", "2000003", "Counts number of cycles no uops were dispatched to be executed on this thread.", "0,1,2,3"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", new PMUEvent("Cycles where at least 1 uop was executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC", "2000003", "Cycles where at least 1 uop was executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", new PMUEvent("Cycles where at least 2 uops were executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC", "2000003", "Cycles where at least 2 uops were executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", new PMUEvent("Cycles where at least 3 uops were executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC", "2000003", "Cycles where at least 3 uops were executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", new PMUEvent("Cycles where at least 4 uops were executed per-thread.", "0xB1", "0,1,2,3", "0x1", "UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC", "2000003", "Cycles where at least 4 uops were executed per-thread", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE", new PMUEvent("Counts total number of uops to be executed per-core each cycle.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE", "2000003", "Number of uops executed on the core.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_1", new PMUEvent("Cycles at least 1 micro-op is executed from any thread on physical core.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_1", "2000003", "Cycles at least 1 micro-op is executed from any thread on physical core", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_2", new PMUEvent("Cycles at least 2 micro-op is executed from any thread on physical core.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_2", "2000003", "Cycles at least 2 micro-op is executed from any thread on physical core", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_3", new PMUEvent("Cycles at least 3 micro-op is executed from any thread on physical core.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_3", "2000003", "Cycles at least 3 micro-op is executed from any thread on physical core", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_GE_4", new PMUEvent("Cycles at least 4 micro-op is executed from any thread on physical core.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_GE_4", "2000003", "Cycles at least 4 micro-op is executed from any thread on physical core", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_EXECUTED.CORE_CYCLES_NONE", new PMUEvent("Cycles with no micro-ops executed from any thread on physical core.", "0xB1", "0,1,2,3", "0x2", "UOPS_EXECUTED.CORE_CYCLES_NONE", "2000003", "Cycles with no micro-ops executed from any thread on physical core", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.ANY_P", new PMUEvent("Number of instructions at retirement.", "0xC0", "0,1,2,3", "0x0", "INST_RETIRED.ANY_P", "2000003", "Number of instructions retired. General Counter   - architectural event", "0,1,2,3,4,5,6,7"));
		eventMap.put("INST_RETIRED.PREC_DIST", new PMUEvent("Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution.", "0xC0", "1", "0x1", "INST_RETIRED.PREC_DIST", "2000003", "Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution", "1"));
		eventMap.put("OTHER_ASSISTS.ANY_WB_ASSIST", new PMUEvent(null, "0xC1", "0,1,2,3", "0x80", "OTHER_ASSISTS.ANY_WB_ASSIST", "100003", "Number of times any microcode assist is invoked by HW upon uop writeback.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.ALL", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.ALL", "2000003", "Retired uops.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UOPS_RETIRED.STALL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.TOTAL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.TOTAL_CYCLES", "2000003", "Cycles with less than 10 actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.CORE_STALL_CYCLES", new PMUEvent(null, "0xC2", "0,1,2,3", "0x1", "UOPS_RETIRED.CORE_STALL_CYCLES", "2000003", "Cycles without actually retired uops.", "0,1,2,3"));
		eventMap.put("UOPS_RETIRED.RETIRE_SLOTS", new PMUEvent(null, "0xC2", "0,1,2,3", "0x2", "UOPS_RETIRED.RETIRE_SLOTS", "2000003", "Retirement slots used.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.COUNT", new PMUEvent(null, "0xC3", "0,1,2,3", "0x1", "MACHINE_CLEARS.COUNT", "100003", "Number of machine clears (nukes) of any type.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.SMC", new PMUEvent("Number of self-modifying-code machine clears detected.", "0xC3", "0,1,2,3", "0x4", "MACHINE_CLEARS.SMC", "100003", "Self-modifying code (SMC) detected.", "0,1,2,3,4,5,6,7"));
		eventMap.put("MACHINE_CLEARS.MASKMOV", new PMUEvent("Counts the number of executed AVX masked load operations that refer to an illegal address range with the mask bits set to 0.", "0xC3", "0,1,2,3", "0x20", "MACHINE_CLEARS.MASKMOV", "100003", "This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES", new PMUEvent("Branch instructions at retirement.", "0xC4", "0,1,2,3", "0x0", "BR_INST_RETIRED.ALL_BRANCHES", "400009", "All (macro) branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x1", "BR_INST_RETIRED.CONDITIONAL", "400009", "Conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL", new PMUEvent(null, "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL", "100007", "Direct and indirect near call instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_CALL_R3", new PMUEvent(null, "0xC4", "0,1,2,3", "0x2", "BR_INST_RETIRED.NEAR_CALL_R3", "100007", "Direct and indirect macro near call instructions retired (captured in ring 3).", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent(null, "0xC4", "0,1,2,3", "0x4", "BR_INST_RETIRED.ALL_BRANCHES_PEBS", "400009", "All (macro) branch instructions retired.", "0,1,2,3"));
		eventMap.put("BR_INST_RETIRED.NEAR_RETURN", new PMUEvent(null, "0xC4", "0,1,2,3", "0x8", "BR_INST_RETIRED.NEAR_RETURN", "100007", "Return instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NOT_TAKEN", new PMUEvent("Counts the number of not taken branch instructions retired.", "0xC4", "0,1,2,3", "0x10", "BR_INST_RETIRED.NOT_TAKEN", "400009", "Not taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.NEAR_TAKEN", new PMUEvent(null, "0xC4", "0,1,2,3", "0x20", "BR_INST_RETIRED.NEAR_TAKEN", "400009", "Taken branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_INST_RETIRED.FAR_BRANCH", new PMUEvent("Number of far branches retired.", "0xC4", "0,1,2,3", "0x40", "BR_INST_RETIRED.FAR_BRANCH", "100007", "Far branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES", new PMUEvent("Mispredicted branch instructions at retirement.", "0xC5", "0,1,2,3", "0x0", "BR_MISP_RETIRED.ALL_BRANCHES", "400009", "All mispredicted macro branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.CONDITIONAL", new PMUEvent(null, "0xC5", "0,1,2,3", "0x1", "BR_MISP_RETIRED.CONDITIONAL", "400009", "Mispredicted conditional branch instructions retired.", "0,1,2,3,4,5,6,7"));
		eventMap.put("BR_MISP_RETIRED.ALL_BRANCHES_PEBS", new PMUEvent(null, "0xC5", "0,1,2,3", "0x4", "BR_MISP_RETIRED.ALL_BRANCHES_PEBS", "400009", "Mispredicted macro branch instructions retired.", "0,1,2,3"));
		eventMap.put("BR_MISP_RETIRED.NEAR_TAKEN", new PMUEvent(null, "0xC5", "0,1,2,3", "0x20", "BR_MISP_RETIRED.NEAR_TAKEN", "400009", "number of near branch instructions retired that were mispredicted and taken.", "0,1,2,3,4,5,6,7"));
		eventMap.put("ROB_MISC_EVENTS.LBR_INSERTS", new PMUEvent("Count cases of saving new LBR records by hardware.", "0xCC", "0,1,2,3", "0x20", "ROB_MISC_EVENTS.LBR_INSERTS", "2000003", "Count cases of saving new LBR", "0,1,2,3,4,5,6,7"));
		eventMap.put("BACLEARS.ANY", new PMUEvent("Number of front end re-steers due to BPU misprediction.", "0xE6", "0,1,2,3", "0x1f", "BACLEARS.ANY", "100003", "Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.", "0,1,2,3,4,5,6,7"));
		eventMap.put("UNC_C_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_C_CLOCKTICKS", null, "Uncore cache clock ticks", null));
		eventMap.put("UNC_C_LLC_LOOKUP.ANY", new PMUEvent(null, "0x34", "0,1", "0x11", "UNC_C_LLC_LOOKUP.ANY", null, "All LLC Misses (code+ data rd + data wr - including demand and prefetch)", null));
		eventMap.put("UNC_C_LLC_VICTIMS.M_STATE", new PMUEvent(null, "0x37", "0,1", "0x1", "UNC_C_LLC_VICTIMS.M_STATE", null, "M line evictions from LLC (writebacks to memory)", null));
		eventMap.put("LLC_MISSES.DATA_READ", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.DATA_READ", null, "LLC misses - demand and prefetch data reads - excludes LLC prefetches. Derived from unc_c_tor_inserts.miss_opcode.demand", null));
		eventMap.put("LLC_MISSES.UNCACHEABLE", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.UNCACHEABLE", null, "LLC misses - Uncacheable reads. Derived from unc_c_tor_inserts.miss_opcode.uncacheable", null));
		eventMap.put("LLC_MISSES.RFO_LLC_PREFETCH", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.RFO_LLC_PREFETCH", null, "LLC prefetch misses for RFO. Derived from unc_c_tor_inserts.miss_opcode.rfo_prefetch", null));
		eventMap.put("LLC_MISSES.CODE_LLC_PREFETCH", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.CODE_LLC_PREFETCH", null, "LLC prefetch misses for code reads. Derived from unc_c_tor_inserts.miss_opcode.code", null));
		eventMap.put("LLC_MISSES.DATA_LLC_PREFETCH", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.DATA_LLC_PREFETCH", null, "LLC prefetch misses for data reads. Derived from unc_c_tor_inserts.miss_opcode.data_read", null));
		eventMap.put("LLC_MISSES.PCIE_WRITE", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.PCIE_WRITE", null, "PCIe allocating writes that miss LLC - DDIO misses. Derived from unc_c_tor_inserts.miss_opcode.ddio_miss", null));
		eventMap.put("LLC_MISSES.PCIE_READ", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.PCIE_READ", null, "LLC misses for PCIe read current. Derived from unc_c_tor_inserts.miss_opcode.pcie_read", null));
		eventMap.put("LLC_MISSES.ITOM_WRITE", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.ITOM_WRITE", null, "LLC misses for ItoM writes (as part of fast string memcpy stores). Derived from unc_c_tor_inserts.miss_opcode.itom_write", null));
		eventMap.put("LLC_MISSES.PCIE_NON_SNOOP_READ", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.PCIE_NON_SNOOP_READ", null, "LLC misses for PCIe non-snoop reads. Derived from unc_c_tor_inserts.miss_opcode.pcie_read", null));
		eventMap.put("LLC_MISSES.PCIE_NON_SNOOP_WRITE", new PMUEvent(null, "0x35", "0,1", "0x3", "LLC_MISSES.PCIE_NON_SNOOP_WRITE", null, "LLC misses for PCIe non-snoop writes (full line). Derived from unc_c_tor_inserts.miss_opcode.pcie_write", null));
		eventMap.put("LLC_REFERENCES.STREAMING_FULL", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.STREAMING_FULL", null, "Streaming stores (full cache line). Derived from unc_c_tor_inserts.opcode.streaming_full", null));
		eventMap.put("LLC_REFERENCES.STREAMING_PARTIAL", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.STREAMING_PARTIAL", null, "Streaming stores (partial cache line). Derived from unc_c_tor_inserts.opcode.streaming_partial", null));
		eventMap.put("LLC_REFERENCES.PCIE_PARTIAL_READ", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_PARTIAL_READ", null, "Partial PCIe reads. Derived from unc_c_tor_inserts.opcode.pcie_partial", null));
		eventMap.put("LLC_REFERENCES.PCIE_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_WRITE", null, "PCIe allocating writes that hit in LLC (DDIO hits). Derived from unc_c_tor_inserts.opcode.ddio_hit", null));
		eventMap.put("LLC_REFERENCES.PCIE_READ", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_READ", null, "PCIe read current. Derived from unc_c_tor_inserts.opcode.pcie_read_current", null));
		eventMap.put("LLC_REFERENCES.ITOM_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.ITOM_WRITE", null, "ItoM write hits (as part of fast string memcpy stores). Derived from unc_c_tor_inserts.opcode.itom_write_hit", null));
		eventMap.put("LLC_REFERENCES.PCIE_NS_READ", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_NS_READ", null, "PCIe non-snoop reads. Derived from unc_c_tor_inserts.opcode.pcie_read", null));
		eventMap.put("LLC_REFERENCES.PCIE_NS_PARTIAL_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_NS_PARTIAL_WRITE", null, "PCIe non-snoop writes (partial). Derived from unc_c_tor_inserts.opcode.pcie_partial_write", null));
		eventMap.put("LLC_REFERENCES.PCIE_NS_WRITE", new PMUEvent(null, "0x35", "0,1", "0x1", "LLC_REFERENCES.PCIE_NS_WRITE", null, "PCIe non-snoop writes (full line). Derived from unc_c_tor_inserts.opcode.pcie_full_write", null));
		eventMap.put("UNC_C_TOR_OCCUPANCY.MISS_LOCAL", new PMUEvent(null, "0x36", null, "0x2A", "UNC_C_TOR_OCCUPANCY.MISS_LOCAL", null, "Occupancy for all LLC misses that are addressed to local memory", null));
		eventMap.put("UNC_C_TOR_OCCUPANCY.LLC_DATA_READ", new PMUEvent(null, "0x36", null, "0x3", "UNC_C_TOR_OCCUPANCY.LLC_DATA_READ", null, "Occupancy counter for LLC data reads (demand and L2 prefetch). Derived from unc_c_tor_occupancy.miss_opcode.llc_data_read", null));
		eventMap.put("UNC_C_TOR_OCCUPANCY.MISS_REMOTE", new PMUEvent(null, "0x36", null, "0x8A", "UNC_C_TOR_OCCUPANCY.MISS_REMOTE", null, "Occupancy for all LLC misses that are addressed to remote memory", null));
		eventMap.put("UNC_H_REQUESTS.READS", new PMUEvent(null, "0x1", "0,1,2,3", "0x3", "UNC_H_REQUESTS.READS", null, "Read requests to home agent", null));
		eventMap.put("UNC_H_REQUESTS.WRITES", new PMUEvent(null, "0x1", "0,1,2,3", "0xC", "UNC_H_REQUESTS.WRITES", null, "Write requests to home agent", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSP_FWD_WB", new PMUEvent(null, "0x21", "0,1,2,3", "0x20", "UNC_H_SNOOP_RESP.RSP_FWD_WB", null, "M line forwarded from remote cache along with writeback to memory", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSPIFWD", new PMUEvent(null, "0x21", "0,1,2,3", "0x4", "UNC_H_SNOOP_RESP.RSPIFWD", null, "M line forwarded from remote cache with no writeback to memory", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSPS", new PMUEvent(null, "0x21", "0,1,2,3", "0x2", "UNC_H_SNOOP_RESP.RSPS", null, "Shared line response from remote cache", null));
		eventMap.put("UNC_H_SNOOP_RESP.RSPSFWD", new PMUEvent(null, "0x21", "0,1,2,3", "0x8", "UNC_H_SNOOP_RESP.RSPSFWD", null, "Shared line forwarded from remote cache", null));
		eventMap.put("UNC_Q_CLOCKTICKS", new PMUEvent(null, "0x14", "0,1,2,3", null, "UNC_Q_CLOCKTICKS", null, "QPI clock ticks. Use to get percentages for QPI cycles events", null));
		eventMap.put("UNC_Q_RxL0P_POWER_CYCLES", new PMUEvent(null, "0x10", "0,1,2,3", null, "UNC_Q_RxL0P_POWER_CYCLES", null, "Cycles where receiving QPI link is in half-width mode", null));
		eventMap.put("UNC_Q_TxL0P_POWER_CYCLES", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_Q_TxL0P_POWER_CYCLES", null, "Cycles where transmitting QPI link is in half-width mode", null));
		eventMap.put("UNC_Q_TxL_FLITS_G0.DATA", new PMUEvent(null, null, "0,1,2,3", "0x2", "UNC_Q_TxL_FLITS_G0.DATA", null, "Number of data flits transmitted ", null));
		eventMap.put("UNC_Q_TxL_FLITS_G0.NON_DATA", new PMUEvent(null, null, "0,1,2,3", "0x4", "UNC_Q_TxL_FLITS_G0.NON_DATA", null, "Number of non data (control) flits transmitted ", null));
		eventMap.put("UNC_M_ACT_COUNT.RD", new PMUEvent(null, "0x1", "0,1,2,3", "0x1", "UNC_M_ACT_COUNT.RD", null, "Memory page activates for reads and writes", null));
		eventMap.put("LLC_MISSES.MEM_READ", new PMUEvent(null, "0x4", "0,1,2,3", "0x3", "LLC_MISSES.MEM_READ", null, "Read requests to memory controller. Derived from unc_m_cas_count.rd", null));
		eventMap.put("LLC_MISSES.MEM_WRITE", new PMUEvent(null, "0x4", "0,1,2,3", "0xC", "LLC_MISSES.MEM_WRITE", null, "Write requests to memory controller. Derived from unc_m_cas_count.wr", null));
		eventMap.put("UNC_M_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_M_CLOCKTICKS", null, "Memory controller clock ticks. Use to generate percentages for memory controller CYCLES events", null));
		eventMap.put("UNC_M_POWER_CHANNEL_PPD", new PMUEvent(null, "0x85", "0,1,2,3", null, "UNC_M_POWER_CHANNEL_PPD", null, "Cycles where DRAM ranks are in power down (CKE) mode", null));
		eventMap.put("UNC_M_POWER_CRITICAL_THROTTLE_CYCLES", new PMUEvent(null, "0x86", "0,1,2,3", null, "UNC_M_POWER_CRITICAL_THROTTLE_CYCLES", null, "Cycles all ranks are in critical thermal throttle", null));
		eventMap.put("UNC_M_POWER_SELF_REFRESH", new PMUEvent(null, "0x43", "0,1,2,3", null, "UNC_M_POWER_SELF_REFRESH", null, "Cycles Memory is in self refresh power mode", null));
		eventMap.put("UNC_M_PRE_COUNT.PAGE_MISS", new PMUEvent(null, "0x2", "0,1,2,3", "0x1", "UNC_M_PRE_COUNT.PAGE_MISS", null, "Memory page conflicts", null));
		eventMap.put("UNC_P_CLOCKTICKS", new PMUEvent(null, null, "0,1,2,3", null, "UNC_P_CLOCKTICKS", null, "PCU clock ticks. Use to get percentages of PCU cycles events", null));
		eventMap.put("UNC_P_FREQ_BAND0_CYCLES", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_BAND0_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band0=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND1_CYCLES", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_BAND1_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band1=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND2_CYCLES", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_BAND2_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band2=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND3_CYCLES", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_BAND3_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band3=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency", null));
		eventMap.put("UNC_P_FREQ_BAND0_TRANSITIONS", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_BAND0_TRANSITIONS", null, "Counts the number of times that the uncore transitioned a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band0=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band0_cycles", null));
		eventMap.put("UNC_P_FREQ_BAND1_TRANSITIONS", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_BAND1_TRANSITIONS", null, "Counts the number of times that the uncore transitioned to a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band1=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band1_cycles", null));
		eventMap.put("UNC_P_FREQ_BAND2_TRANSITIONS", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_BAND2_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band2=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band2_cycles", null));
		eventMap.put("UNC_P_FREQ_BAND3_TRANSITIONS", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_BAND3_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to the frequency that is configured in the filter.  (filter_band3=XXX, with XXX in 100Mhz units). One can also use inversion (filter_inv=1) to track cycles when we were less than the configured frequency. Derived from unc_p_freq_band3_cycles", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C0", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C0", null, "This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C3", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C3", null, "This is an occupancy event that tracks the number of cores that are in C3.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details", null));
		eventMap.put("UNC_P_POWER_STATE_OCCUPANCY.CORES_C6", new PMUEvent(null, "0x80", "0,1,2,3", null, "UNC_P_POWER_STATE_OCCUPANCY.CORES_C6", null, "This is an occupancy event that tracks the number of cores that are in C6.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events ", null));
		eventMap.put("UNC_P_PROCHOT_EXTERNAL_CYCLES", new PMUEvent(null, "0xa", "0,1,2,3", null, "UNC_P_PROCHOT_EXTERNAL_CYCLES", null, "Counts the number of cycles that we are in external PROCHOT mode.  This mode is triggered when a sensor off the die determines that something off-die (like DRAM) is too hot and must throttle to avoid damaging the chip", null));
		eventMap.put("UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES", new PMUEvent(null, "0x4", "0,1,2,3", null, "UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES", null, "Counts the number of cycles when temperature is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_OS_CYCLES", new PMUEvent(null, "0x6", "0,1,2,3", null, "UNC_P_FREQ_MAX_OS_CYCLES", null, "Counts the number of cycles when the OS is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_POWER_CYCLES", new PMUEvent(null, "0x5", "0,1,2,3", null, "UNC_P_FREQ_MAX_POWER_CYCLES", null, "Counts the number of cycles when power is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_MAX_CURRENT_CYCLES", new PMUEvent(null, "0x7", "0,1,2,3", null, "UNC_P_FREQ_MAX_CURRENT_CYCLES", null, "Counts the number of cycles when current is the upper limit on frequency", null));
		eventMap.put("UNC_P_FREQ_TRANS_CYCLES", new PMUEvent(null, "0x60", "0,1,2,3", null, "UNC_P_FREQ_TRANS_CYCLES", null, "Cycles spent changing Frequency", null));
		eventMap.put("UNC_P_FREQ_GE_1200MHZ_CYCLES", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_GE_1200MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 1.2Ghz. Derived from unc_p_freq_band0_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_2000MHZ_CYCLES", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_GE_2000MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 2Ghz. Derived from unc_p_freq_band1_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_3000MHZ_CYCLES", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_GE_3000MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 3Ghz. Derived from unc_p_freq_band2_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_4000MHZ_CYCLES", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_GE_4000MHZ_CYCLES", null, "Counts the number of cycles that the uncore was running at a frequency greater than or equal to 4Ghz. Derived from unc_p_freq_band3_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_1200MHZ_TRANSITIONS", new PMUEvent(null, "0xb", "0,1,2,3", null, "UNC_P_FREQ_GE_1200MHZ_TRANSITIONS", null, "Counts the number of times that the uncore transitioned to a frequency greater than or equal to 1.2Ghz. Derived from unc_p_freq_band0_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_2000MHZ_TRANSITIONS", new PMUEvent(null, "0xc", "0,1,2,3", null, "UNC_P_FREQ_GE_2000MHZ_TRANSITIONS", null, "Counts the number of times that the uncore transitioned to a frequency greater than or equal to 2Ghz. Derived from unc_p_freq_band1_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_3000MHZ_TRANSITIONS", new PMUEvent(null, "0xd", "0,1,2,3", null, "UNC_P_FREQ_GE_3000MHZ_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to 3Ghz. Derived from unc_p_freq_band2_cycles", null));
		eventMap.put("UNC_P_FREQ_GE_4000MHZ_TRANSITIONS", new PMUEvent(null, "0xe", "0,1,2,3", null, "UNC_P_FREQ_GE_4000MHZ_TRANSITIONS", null, "Counts the number of cycles that the uncore transitioned to a frequency greater than or equal to 4Ghz. Derived from unc_p_freq_band3_cycles", null));
		eventMap.put("DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Misses in all TLB levels that cause a page walk of any page size from demand loads.", "0x08", "0,1,2,3", "0x81", "DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK", "100003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes an page walk of any page size.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.DEMAND_LD_WALK_COMPLETED", new PMUEvent(null, "0x08", "0,1,2,3", "0x82", "DTLB_LOAD_MISSES.DEMAND_LD_WALK_COMPLETED", "100003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_COMPLETED", new PMUEvent("Misses in all TLB levels that caused page walk completed of any size by demand loads.", "0x08", "0,1,2,3", "0x82", "DTLB_LOAD_MISSES.WALK_COMPLETED", "100003", "Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.DEMAND_LD_WALK_DURATION", new PMUEvent(null, "0x08", "0,1,2,3", "0x84", "DTLB_LOAD_MISSES.DEMAND_LD_WALK_DURATION", "2000003", "Demand load cycles page miss handler (PMH) is busy with this walk.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.WALK_DURATION", new PMUEvent("Cycle PMH is busy with a walk due to demand loads.", "0x08", "0,1,2,3", "0x84", "DTLB_LOAD_MISSES.WALK_DURATION", "2000003", "Demand load cycles page miss handler (PMH) is busy with this walk.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.LARGE_PAGE_WALK_COMPLETED", new PMUEvent(null, "0x08", "0,1,2,3", "0x88", "DTLB_LOAD_MISSES.LARGE_PAGE_WALK_COMPLETED", "100003", "Page walk for a large page completed for Demand load.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Miss in all TLB levels causes a page walk of any page size (4K/2M/4M/1G).", "0x49", "0,1,2,3", "0x1", "DTLB_STORE_MISSES.MISS_CAUSES_A_WALK", "100003", "Store misses in all DTLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_COMPLETED", new PMUEvent("Miss in all TLB levels causes a page walk that completes of any page size (4K/2M/4M/1G).", "0x49", "0,1,2,3", "0x2", "DTLB_STORE_MISSES.WALK_COMPLETED", "100003", "Store misses in all DTLB levels that cause completed page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.WALK_DURATION", new PMUEvent("Cycles PMH is busy with this walk.", "0x49", "0,1,2,3", "0x4", "DTLB_STORE_MISSES.WALK_DURATION", "2000003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_STORE_MISSES.STLB_HIT", new PMUEvent("Store operations that miss the first TLB level but hit the second and do not cause page walks.", "0x49", "0,1,2,3", "0x10", "DTLB_STORE_MISSES.STLB_HIT", "100003", "Store operations that miss the first TLB level but hit the second and do not cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("EPT.WALK_CYCLES", new PMUEvent(null, "0x4F", "0,1,2,3", "0x10", "EPT.WALK_CYCLES", "2000003", "Cycle count for an Extended Page table walk.  The Extended Page Directory cache is used by Virtual Machine operating systems while the guest operating systems use the standard TLB caches.", "0,1,2,3,4,5,6,7"));
		eventMap.put("DTLB_LOAD_MISSES.STLB_HIT", new PMUEvent("Counts load operations that missed 1st level DTLB but hit the 2nd level.", "0x5F", "0,1,2,3", "0x4", "DTLB_LOAD_MISSES.STLB_HIT", "100003", "Load operations that miss the first DTLB level but hit the second and do not cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.MISS_CAUSES_A_WALK", new PMUEvent("Misses in all ITLB levels that cause page walks.", "0x85", "0,1,2,3", "0x1", "ITLB_MISSES.MISS_CAUSES_A_WALK", "100003", "Misses at all ITLB levels that cause page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_COMPLETED", new PMUEvent("Misses in all ITLB levels that cause completed page walks.", "0x85", "0,1,2,3", "0x2", "ITLB_MISSES.WALK_COMPLETED", "100003", "Misses in all ITLB levels that cause completed page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.WALK_DURATION", new PMUEvent("Cycle PMH is busy with a walk.", "0x85", "0,1,2,3", "0x4", "ITLB_MISSES.WALK_DURATION", "2000003", "Cycles when PMH is busy with page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.STLB_HIT", new PMUEvent("Number of cache load STLB hits. No page walk.", "0x85", "0,1,2,3", "0x10", "ITLB_MISSES.STLB_HIT", "100003", "Operations that miss the first ITLB level but hit the second and do not cause any page walks", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB_MISSES.LARGE_PAGE_WALK_COMPLETED", new PMUEvent("Completed page walks in ITLB due to STLB load misses for large pages.", "0x85", "0,1,2,3", "0x80", "ITLB_MISSES.LARGE_PAGE_WALK_COMPLETED", "100003", "Completed page walks in ITLB due to STLB load misses for large pages", "0,1,2,3,4,5,6,7"));
		eventMap.put("ITLB.ITLB_FLUSH", new PMUEvent("Counts the number of ITLB flushes, includes 4k/2M/4M pages.", "0xAE", "0,1,2,3", "0x1", "ITLB.ITLB_FLUSH", "100007", "Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.DTLB_THREAD", new PMUEvent("DTLB flush attempts of the thread-specific entries.", "0xBD", "0,1,2,3", "0x1", "TLB_FLUSH.DTLB_THREAD", "100007", "DTLB flush attempts of the thread-specific entries", "0,1,2,3,4,5,6,7"));
		eventMap.put("TLB_FLUSH.STLB_ANY", new PMUEvent("Count number of STLB flush attempts.", "0xBD", "0,1,2,3", "0x20", "TLB_FLUSH.STLB_ANY", "100007", "STLB flush attempts", "0,1,2,3,4,5,6,7"));
    }

    public PMUEvent get(String eventName) {
        return eventMap.get(eventName.toUpperCase());
    }

	public void forEach(Consumer<PMUEvent> action) {
		for (PMUEvent event : eventMap.values())
			action.accept(event);
	}
}